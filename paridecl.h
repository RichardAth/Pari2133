#pragma once
/* Copyright (C) 1999-2004  The PARI group.

This file is part of the PARI/GP package.

PARI/GP is free software; you can redistribute it and/or modify it under the
terms of the GNU General Public License as published by the Free Software
Foundation; either version 2 of the License, or (at your option) any later
version. It is distributed in the hope that it will be useful, but WITHOUT
ANY WARRANTY WHATSOEVER.

Check the License for details. You should have received a copy of it, along
with the package; see the file 'COPYING'. If not, write to the Free Software
Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA. */

/*******************************************************************/
/*                                                                 */
/*                DECLARATIONS of PUBLIC FUNCTIONS                 */
/*                                                                 */
/*******************************************************************/
#include "parinf.h"

/* black box groups */
struct bb_group
{
  GEN   (*mul)(void *E, GEN, GEN);
  GEN   (*pow)(void *E, GEN, GEN);
  GEN   (*rand)(void *E);
  ulong (*hash)(GEN);
  int   (*equal)(GEN,GEN);
  int   (*equal1)(GEN);
  GEN   (*easylog)(void *E, GEN, GEN, GEN);
};

/* black box fields */
struct bb_field
{
  GEN (*red)(void *E ,GEN);
  GEN (*add)(void *E ,GEN, GEN);
  GEN (*mul)(void *E ,GEN, GEN);
  GEN (*neg)(void *E ,GEN);
  GEN (*inv)(void *E ,GEN);
  int (*equal0)(GEN);
  GEN (*s)(void *E, int64_t);
};

/* black box algebra */
struct bb_algebra
{
  GEN (*red)(void *E, GEN x);
  GEN (*add)(void *E, GEN x, GEN y);
  GEN (*sub)(void *E, GEN x, GEN y);
  GEN (*mul)(void *E, GEN x, GEN y);
  GEN (*sqr)(void *E, GEN x);
  GEN (*one)(void *E);
  GEN (*zero)(void *E);
};

/* black box ring */
struct bb_ring
{
  GEN (*add)(void *E, GEN x, GEN y);
  GEN (*mul)(void *E, GEN x, GEN y);
  GEN (*sqr)(void *E, GEN x);
};

/* OBSOLETE */
PARILIB_API GEN     buchimag(GEN D, GEN c1, GEN c2, GEN gCO);
PARILIB_API GEN     buchreal(GEN D, GEN gsens, GEN c1, GEN c2, GEN gRELSUP, int64_t prec);
PARILIB_API GEN     zidealstar(GEN nf, GEN x);
PARILIB_API GEN     zidealstarinit(GEN nf, GEN x);
PARILIB_API GEN     zidealstarinitgen(GEN nf, GEN x);
PARILIB_API GEN     factmod(GEN f, GEN p);
PARILIB_API void    mpbern(int64_t n, int64_t prec);
PARILIB_API GEN     simplefactmod(GEN f, GEN p);
PARILIB_API void    listkill(GEN list);
PARILIB_API GEN     isprincipalforce(GEN bnf,GEN x);
PARILIB_API GEN     isprincipalgen(GEN bnf, GEN x);
PARILIB_API GEN     isprincipalgenforce(GEN bnf,GEN x);

/* F2v.c */

PARILIB_API GEN     F2Ms_ker(GEN M, int64_t nrows);
PARILIB_API GEN     F2Ms_to_F2m(GEN M, int64_t nrows);
PARILIB_API GEN     F2c_to_ZC(GEN x);
PARILIB_API GEN     F2c_to_mod(GEN x);
PARILIB_API GEN     F2m_F2c_gauss(GEN a, GEN b);
PARILIB_API GEN     F2m_F2c_invimage(GEN A, GEN y);
PARILIB_API GEN     F2m_F2c_mul(GEN x, GEN y);
PARILIB_API GEN     F2m_deplin(GEN x);
PARILIB_API ulong   F2m_det(GEN x);
PARILIB_API ulong   F2m_det_sp(GEN x);
PARILIB_API GEN     F2m_gauss(GEN a, GEN b);
PARILIB_API GEN     F2m_inv(GEN x);
PARILIB_API GEN     F2m_invimage(GEN A, GEN B);
PARILIB_API GEN     F2m_ker(GEN x);
PARILIB_API GEN     F2m_ker_sp(GEN x, int64_t deplin);
PARILIB_API GEN     F2m_mul(GEN x, GEN y);
PARILIB_API GEN     F2m_powu(GEN x, ulong n);
PARILIB_API int64_t    F2m_rank(GEN x);
PARILIB_API GEN     F2m_row(GEN x, int64_t j);
PARILIB_API GEN     F2m_rowslice(GEN x, int64_t a, int64_t b);
PARILIB_API GEN     F2m_to_F2Ms(GEN M);
PARILIB_API GEN     F2m_to_Flm(GEN z);
PARILIB_API GEN     F2m_to_ZM(GEN z);
PARILIB_API GEN     F2m_to_mod(GEN z);
PARILIB_API GEN     F2m_transpose(GEN x);
PARILIB_API void    F2v_add_inplace(GEN x, GEN y);
PARILIB_API void    F2v_and_inplace(GEN x, GEN y);
PARILIB_API ulong   F2v_dotproduct(GEN x, GEN y);
PARILIB_API int     F2v_equal0(GEN a);
PARILIB_API ulong   F2v_hamming(GEN H);
PARILIB_API void    F2v_negimply_inplace(GEN x, GEN y);
PARILIB_API void    F2v_or_inplace(GEN x, GEN y);
PARILIB_API GEN     F2v_slice(GEN x, int64_t a, int64_t b);
PARILIB_API GEN     F2v_to_Flv(GEN x);
PARILIB_API GEN     matid_F2m(int64_t n);

/* F2x.c */

PARILIB_API GEN     F2x_F2xq_eval(GEN Q, GEN x, GEN T);
PARILIB_API GEN     F2x_F2xqV_eval(GEN P, GEN V, GEN T);
PARILIB_API GEN     F2x_Frobenius(GEN T);
PARILIB_API GEN     F2x_1_add(GEN y);
PARILIB_API GEN     F2x_add(GEN x, GEN y);
PARILIB_API GEN     F2x_deflate(GEN x0, int64_t d);
PARILIB_API GEN     F2x_degfact(GEN f);
PARILIB_API int64_t    F2x_degree(GEN x);
PARILIB_API GEN     F2x_deriv(GEN x);
PARILIB_API GEN     F2x_divrem(GEN x, GEN y, GEN *pr);
PARILIB_API ulong   F2x_eval(GEN P, ulong x);
PARILIB_API void    F2x_even_odd(GEN p, GEN *pe, GEN *po);
PARILIB_API GEN     F2x_extgcd(GEN a, GEN b, GEN *ptu, GEN *ptv);
PARILIB_API GEN     F2x_gcd(GEN a, GEN b);
PARILIB_API GEN     F2x_get_red(GEN T);
PARILIB_API GEN     F2x_halfgcd(GEN a, GEN b);
PARILIB_API int     F2x_issquare(GEN a);
PARILIB_API GEN     F2x_matFrobenius(GEN T);
PARILIB_API GEN     F2x_mul(GEN x, GEN y);
PARILIB_API GEN     F2x_recip(GEN T);
PARILIB_API GEN     F2x_rem(GEN x, GEN y);
PARILIB_API GEN     F2x_shift(GEN y, int64_t d);
PARILIB_API GEN     F2x_sqr(GEN x);
PARILIB_API GEN     F2x_sqrt(GEN x);
PARILIB_API GEN     F2x_to_F2v(GEN x, int64_t n);
PARILIB_API GEN     F2x_to_F2xX(GEN z, int64_t sv);
PARILIB_API GEN     F2x_to_Flx(GEN x);
PARILIB_API GEN     F2x_to_ZX(GEN x);
PARILIB_API int64_t    F2x_valrem(GEN x, GEN *Z);
PARILIB_API GEN     F2xC_to_FlxC(GEN v);
PARILIB_API GEN     F2xC_to_ZXC(GEN x);
PARILIB_API GEN     F2xV_to_F2m(GEN v, int64_t n);
PARILIB_API void    F2xV_to_FlxV_inplace(GEN v);
PARILIB_API void    F2xV_to_ZXV_inplace(GEN v);
PARILIB_API GEN     F2xX_F2x_add(GEN x, GEN y);
PARILIB_API GEN     F2xX_F2x_mul(GEN P, GEN U);
PARILIB_API GEN     F2xX_add(GEN x, GEN y);
PARILIB_API GEN     F2xX_deriv(GEN z);
PARILIB_API GEN     F2xX_renormalize(GEN /*in place*/ x, int64_t lx);
PARILIB_API GEN     F2xX_to_Kronecker(GEN P, int64_t d);
PARILIB_API GEN     F2xX_to_FlxX(GEN B);
PARILIB_API GEN     F2xX_to_ZXX(GEN B);
PARILIB_API GEN     F2xX_to_F2xC(GEN x, int64_t N, int64_t sv);
PARILIB_API GEN     F2xXV_to_F2xM(GEN v, int64_t n, int64_t sv);
PARILIB_API GEN     F2xXC_to_ZXXC(GEN B);
PARILIB_API GEN     F2xY_F2xq_evalx(GEN P, GEN x, GEN T);
PARILIB_API GEN     F2xY_F2xqV_evalx(GEN P, GEN x, GEN T);
PARILIB_API int64_t    F2xY_degreex(GEN b);
PARILIB_API GEN     F2xn_inv(GEN f, int64_t e);
PARILIB_API GEN     F2xn_red(GEN a, int64_t n);
PARILIB_API GEN     F2xq_Artin_Schreier(GEN a, GEN T);
PARILIB_API GEN     F2xq_autpow(GEN x, int64_t n, GEN T);
PARILIB_API GEN     F2xq_conjvec(GEN x, GEN T);
PARILIB_API GEN     F2xq_div(GEN x,GEN y,GEN T);
PARILIB_API GEN     F2xq_inv(GEN x, GEN T);
PARILIB_API GEN     F2xq_invsafe(GEN x, GEN T);
PARILIB_API GEN     F2xq_log(GEN a, GEN g, GEN ord, GEN T);
PARILIB_API GEN     F2xq_matrix_pow(GEN y, int64_t n, int64_t m, GEN P);
PARILIB_API GEN     F2xq_mul(GEN x, GEN y, GEN pol);
PARILIB_API GEN     F2xq_order(GEN a, GEN ord, GEN T);
PARILIB_API GEN     F2xq_pow(GEN x, GEN n, GEN pol);
PARILIB_API GEN     F2xq_pow_init(GEN x, GEN n, int64_t k,  GEN T);
PARILIB_API GEN     F2xq_pow_table(GEN R, GEN n, GEN T);
PARILIB_API GEN     F2xq_powu(GEN x, ulong n, GEN pol);
PARILIB_API GEN     F2xq_powers(GEN x, int64_t l, GEN T);
PARILIB_API GEN     F2xq_sqr(GEN x,GEN pol);
PARILIB_API GEN     F2xq_sqrt(GEN a, GEN T);
PARILIB_API GEN     F2xq_sqrt_fast(GEN c, GEN sqx, GEN T);
PARILIB_API GEN     F2xq_sqrtn(GEN a, GEN n, GEN T, GEN *zeta);
PARILIB_API ulong   F2xq_trace(GEN x, GEN T);
PARILIB_API GEN     F2xqX_F2xq_mul(GEN P, GEN U, GEN T);
PARILIB_API GEN     F2xqX_F2xq_mul_to_monic(GEN P, GEN U, GEN T);
PARILIB_API GEN     F2xqX_F2xqXQ_eval(GEN Q, GEN x, GEN S, GEN T);
PARILIB_API GEN     F2xqX_F2xqXQV_eval(GEN P, GEN V, GEN S, GEN T);
PARILIB_API GEN     F2xqX_disc(GEN x, GEN T);
PARILIB_API GEN     F2xqX_divrem(GEN x, GEN y, GEN T, GEN *pr);
PARILIB_API GEN     F2xqX_extgcd(GEN x, GEN y, GEN T,  GEN *ptu, GEN *ptv);
PARILIB_API GEN     F2xqX_gcd(GEN a, GEN b, GEN T);
PARILIB_API GEN     F2xqX_get_red(GEN S, GEN T);
PARILIB_API GEN     F2xqX_halfgcd(GEN x, GEN y, GEN T);
PARILIB_API GEN     F2xqX_invBarrett(GEN T, GEN Q);
PARILIB_API int64_t    F2xqX_ispower(GEN f, int64_t k, GEN T, GEN *pt_r);
PARILIB_API GEN     F2xqX_mul(GEN x, GEN y, GEN T);
PARILIB_API GEN     F2xqX_normalize(GEN z, GEN T);
PARILIB_API GEN     F2xqX_powu(GEN x, ulong n, GEN T);
PARILIB_API GEN     F2xqX_red(GEN z, GEN T);
PARILIB_API GEN     F2xqX_rem(GEN x, GEN S, GEN T);
PARILIB_API GEN     F2xqX_resultant(GEN x, GEN y, GEN T);
PARILIB_API GEN     F2xqX_sqr(GEN x, GEN T);
PARILIB_API GEN     F2xqXQ_inv(GEN x, GEN S, GEN T);
PARILIB_API GEN     F2xqXQ_invsafe(GEN x, GEN S, GEN T);
PARILIB_API GEN     F2xqXQ_mul(GEN x, GEN y, GEN S, GEN T);
PARILIB_API GEN     F2xqXQ_sqr(GEN x, GEN S, GEN T);
PARILIB_API GEN     F2xqXQ_pow(GEN x, GEN n, GEN S, GEN T);
PARILIB_API GEN     F2xqXQ_powers(GEN x, int64_t l, GEN S, GEN T);
PARILIB_API GEN     F2xqXQ_autpow(GEN aut, int64_t n, GEN S, GEN T);
PARILIB_API GEN     F2xqXQ_auttrace(GEN aut, int64_t n, GEN S, GEN T);
PARILIB_API GEN     F2xqXQV_red(GEN z, GEN S, GEN T);
PARILIB_API GEN     Flm_to_F2m(GEN x);
PARILIB_API GEN     Flv_to_F2v(GEN x);
PARILIB_API GEN     Flx_to_F2x(GEN x);
PARILIB_API GEN     FlxC_to_F2xC(GEN x);
PARILIB_API GEN     FlxX_to_F2xX(GEN B);
PARILIB_API GEN     FlxXC_to_F2xXC(GEN B);
PARILIB_API GEN     Kronecker_to_F2xqX(GEN z, GEN T);
PARILIB_API GEN     Rg_to_F2xq(GEN x, GEN T);
PARILIB_API GEN     RgM_to_F2m(GEN x);
PARILIB_API GEN     RgV_to_F2v(GEN x);
PARILIB_API GEN     RgX_to_F2x(GEN x);
PARILIB_API GEN     Z_to_F2x(GEN x, int64_t v);
PARILIB_API GEN     ZM_to_F2m(GEN x);
PARILIB_API GEN     ZV_to_F2v(GEN x);
PARILIB_API GEN     ZX_to_F2x(GEN x);
PARILIB_API GEN     ZXX_to_F2xX(GEN B, int64_t v);
PARILIB_API GEN     const_F2v(int64_t m);
PARILIB_API GEN     gener_F2xq(GEN T, GEN *po);
PARILIB_API const struct bb_field *get_F2xq_field(void **E, GEN T);
PARILIB_API GEN     monomial_F2x(int64_t d, int64_t vs);
PARILIB_API GEN     pol1_F2xX(int64_t v, int64_t sv);
PARILIB_API GEN     polx_F2xX(int64_t v, int64_t sv);
PARILIB_API GEN     random_F2xqX(int64_t d1, int64_t v, GEN T);

/* F2xqE.c */

PARILIB_API GEN     F2x_Teichmuller(GEN P, int64_t n);
PARILIB_API GEN     F2xq_ellcard(GEN a2, GEN a6, GEN T);
PARILIB_API GEN     F2xq_ellgens(GEN a2, GEN a6, GEN ch, GEN D, GEN m, GEN T);
PARILIB_API GEN     F2xq_ellgroup(GEN a2, GEN a6, GEN N, GEN T, GEN *pt_m);
PARILIB_API void    F2xq_elltwist(GEN a, GEN a6, GEN T, GEN *pt_a, GEN *pt_a6);
PARILIB_API GEN     F2xqE_add(GEN P, GEN Q, GEN a2, GEN T);
PARILIB_API GEN     F2xqE_changepoint(GEN x, GEN ch, GEN T);
PARILIB_API GEN     F2xqE_changepointinv(GEN x, GEN ch, GEN T);
PARILIB_API GEN     F2xqE_dbl(GEN P, GEN a2, GEN T);
PARILIB_API GEN     F2xqE_log(GEN a, GEN b, GEN o, GEN a2, GEN T);
PARILIB_API GEN     F2xqE_mul(GEN P, GEN n, GEN a2, GEN T);
PARILIB_API GEN     F2xqE_neg(GEN P, GEN a2, GEN T);
PARILIB_API GEN     F2xqE_order(GEN z, GEN o, GEN a2, GEN T);
PARILIB_API GEN     F2xqE_sub(GEN P, GEN Q, GEN a2, GEN T);
PARILIB_API GEN     F2xqE_tatepairing(GEN t, GEN s, GEN m, GEN a2, GEN T);
PARILIB_API GEN     F2xqE_weilpairing(GEN t, GEN s, GEN m, GEN a2, GEN T);
PARILIB_API const struct bb_group * get_F2xqE_group(void **E, GEN a2, GEN a6, GEN T);
PARILIB_API GEN     RgE_to_F2xqE(GEN x, GEN T);
PARILIB_API GEN     random_F2xqE(GEN a2, GEN a6, GEN T);

/* Fle.c */

PARILIB_API ulong   Fl_elldisc(ulong a4, ulong a6, ulong p);
PARILIB_API ulong   Fl_elldisc_pre(ulong a4, ulong a6, ulong p, ulong pi);
PARILIB_API ulong   Fl_ellj(ulong a4, ulong a6, ulong p);
PARILIB_API void    Fl_ellj_to_a4a6(ulong j, ulong p, ulong *pt_a4, ulong *pt_a6);
PARILIB_API void    Fl_elltwist(ulong a4, ulong a6, ulong p, ulong *pt_a4, ulong *pt_a6);
PARILIB_API void    Fl_elltwist_disc(ulong a4, ulong a6, ulong D, ulong p, ulong *pt_a4, ulong *pt_a6);
PARILIB_API GEN     Fle_add(GEN P, GEN Q, ulong a4, ulong p);
PARILIB_API GEN     Fle_dbl(GEN P, ulong a4, ulong p);
PARILIB_API GEN     Fle_changepoint(GEN x, GEN ch, ulong p);
PARILIB_API GEN     Fle_changepointinv(GEN x, GEN ch, ulong p);
PARILIB_API GEN     Fle_log(GEN a, GEN b, GEN o, ulong a4, ulong p);
PARILIB_API GEN     Fle_mul(GEN P, GEN n, ulong a4, ulong p);
PARILIB_API GEN     Fle_mulu(GEN P, ulong n, ulong a4, ulong p);
PARILIB_API GEN     Fle_order(GEN z, GEN o, ulong a4, ulong p);
PARILIB_API GEN     Fle_sub(GEN P, GEN Q, ulong a4, ulong p);
PARILIB_API GEN     Fle_to_Flj(GEN P);
PARILIB_API GEN     Flj_add_pre(GEN P, GEN Q, ulong a4, ulong p, ulong pi);
PARILIB_API GEN     Flj_changepointinv_pre(GEN P, GEN ch, ulong p, ulong pi);
PARILIB_API GEN     Flj_dbl_pre(GEN P, ulong a4, ulong p, ulong pi);
PARILIB_API GEN     Flj_mulu_pre(GEN P, ulong n, ulong a4, ulong p, ulong pi);
PARILIB_API GEN     Flj_neg(GEN Q, ulong p);
PARILIB_API GEN     Flj_to_Fle_pre(GEN P, ulong p, ulong pi);
PARILIB_API GEN     FljV_factorback_pre(GEN P, GEN L, ulong a4, ulong p, ulong pi);
PARILIB_API GEN     random_Fle(ulong a4, ulong a6, ulong p);
PARILIB_API GEN     random_Fle_pre(ulong a4, ulong a6, ulong p, ulong pi);
PARILIB_API GEN     random_Flj_pre(ulong a4, ulong a6, ulong p, ulong pi);

/* Flv.c */

PARILIB_API GEN     Flc_to_ZC(GEN z);
PARILIB_API GEN     Flc_to_ZC_inplace(GEN z);
PARILIB_API GEN     Flm_Flc_gauss(GEN a, GEN b, ulong p);
PARILIB_API GEN     Flm_Flc_invimage(GEN mat, GEN y, ulong p);
PARILIB_API GEN     Flm_adjoint(GEN A, ulong p);
PARILIB_API GEN     Flm_deplin(GEN x, ulong p);
PARILIB_API ulong   Flm_det(GEN x, ulong p);
PARILIB_API ulong   Flm_det_sp(GEN x, ulong p);
PARILIB_API GEN     Flm_gauss(GEN a, GEN b, ulong p);
PARILIB_API GEN     Flm_intersect(GEN x, GEN y, ulong p);
PARILIB_API GEN     Flm_inv(GEN x, ulong p);
PARILIB_API GEN     Flm_invimage(GEN m, GEN v, ulong p);
PARILIB_API GEN     Flm_ker(GEN x, ulong p);
PARILIB_API GEN     Flm_ker_sp(GEN x, ulong p, int64_t deplin);
PARILIB_API int64_t    Flm_rank(GEN x, ulong p);
PARILIB_API GEN     Flm_to_ZM(GEN z);
PARILIB_API GEN     Flm_to_ZM_inplace(GEN z);
PARILIB_API GEN     Flv_to_ZV(GEN z);

/* Flx.c */

PARILIB_API GEN     Fl_to_Flx(ulong x, int64_t sv);
PARILIB_API int     Fl2_equal1(GEN x);
PARILIB_API GEN     Fl2_inv_pre(GEN x, ulong D, ulong p, ulong pi);
PARILIB_API GEN     Fl2_mul_pre(GEN x, GEN y, ulong D, ulong p, ulong pi);
PARILIB_API ulong   Fl2_norm_pre(GEN x, ulong D, ulong p, ulong pi);
PARILIB_API GEN     Fl2_pow_pre(GEN x, GEN n, ulong D, ulong p, ulong pi);
PARILIB_API GEN     Fl2_sqr_pre(GEN x, ulong D, ulong p, ulong pi);
PARILIB_API GEN     Fl2_sqrtn_pre(GEN a, GEN n, ulong D, ulong p, ulong pi, GEN *zeta);
PARILIB_API GEN     Flm_to_FlxV(GEN x, int64_t sv);
PARILIB_API GEN     Flm_to_FlxX(GEN x, int64_t v,int64_t w);
PARILIB_API GEN     Flv_Flm_polint(GEN xa, GEN ya, ulong p, int64_t vs);
PARILIB_API GEN     Flv_inv(GEN x, ulong p);
PARILIB_API void    Flv_inv_inplace(GEN x, ulong p);
PARILIB_API void    Flv_inv_pre_inplace(GEN x, ulong p, ulong pi);
PARILIB_API GEN     Flv_inv_pre(GEN x, ulong p, ulong pi);
PARILIB_API GEN     Flv_invVandermonde(GEN L, ulong den, ulong p);
PARILIB_API GEN     Flv_polint(GEN xa, GEN ya, ulong p, int64_t vs);
PARILIB_API ulong   Flv_prod(GEN v, ulong p);
PARILIB_API ulong   Flv_prod_pre(GEN x, ulong p, ulong pi);
PARILIB_API GEN     Flv_roots_to_pol(GEN a, ulong p, int64_t vs);
PARILIB_API GEN     Flv_to_Flx(GEN x, int64_t vs);
PARILIB_API GEN     Flx_Fl_add(GEN y, ulong x, ulong p);
PARILIB_API GEN     Flx_Fl_mul(GEN y, ulong x, ulong p);
PARILIB_API GEN     Flx_Fl_mul_to_monic(GEN y, ulong x, ulong p);
PARILIB_API GEN     Flx_Fl_sub(GEN y, ulong x, ulong p);
PARILIB_API GEN     Flx_Fl2_eval_pre(GEN x, GEN y, ulong D, ulong p, ulong pi);
PARILIB_API GEN     Flx_Flv_multieval(GEN P, GEN v, ulong p);
PARILIB_API GEN     Flx_Flxq_eval(GEN f,GEN x,GEN T,ulong p);
PARILIB_API GEN     Flx_FlxqV_eval(GEN f,GEN x,GEN T,ulong p);
PARILIB_API GEN     Flx_Frobenius(GEN T, ulong p);
PARILIB_API GEN     Flx_Laplace(GEN x, ulong p);
PARILIB_API GEN     Flx_Newton(GEN P, int64_t n, ulong p);
PARILIB_API GEN     Flx_add(GEN x, GEN y, ulong p);
PARILIB_API GEN     Flx_blocks(GEN P, int64_t n, int64_t m);
PARILIB_API GEN     Flx_deflate(GEN x0, int64_t d);
PARILIB_API GEN     Flx_deriv(GEN z, ulong p);
PARILIB_API GEN     Flx_diff1(GEN P, ulong p);
PARILIB_API GEN     Flx_digits(GEN x, GEN T, ulong p);
PARILIB_API GEN     Flx_div_by_X_x(GEN a, ulong x, ulong p, ulong *rem);
PARILIB_API GEN     Flx_divrem(GEN x, GEN y, ulong p, GEN *pr);
PARILIB_API GEN     Flx_double(GEN y, ulong p);
PARILIB_API int     Flx_equal(GEN V, GEN W);
PARILIB_API ulong   Flx_eval(GEN x, ulong y, ulong p);
PARILIB_API ulong   Flx_eval_powers_pre(GEN x, GEN y, ulong p, ulong pi);
PARILIB_API ulong   Flx_eval_pre(GEN x, ulong y, ulong p, ulong pi);
PARILIB_API GEN     Flx_extgcd(GEN a, GEN b, ulong p, GEN *ptu, GEN *ptv);
PARILIB_API ulong   Flx_extresultant(GEN a, GEN b, ulong p, GEN *ptU, GEN *ptV);
PARILIB_API GEN     Flx_fromNewton(GEN P, ulong p);
PARILIB_API GEN     Flx_gcd(GEN a, GEN b, ulong p);
PARILIB_API GEN     Flx_get_red(GEN T, ulong p);
PARILIB_API GEN     Flx_halfgcd(GEN a, GEN b, ulong p);
PARILIB_API GEN     Flx_halve(GEN y, ulong p);
PARILIB_API GEN     Flx_inflate(GEN x0, int64_t d);
PARILIB_API GEN     Flx_integ(GEN z, ulong p);
PARILIB_API GEN     Flx_invBarrett(GEN T, ulong p);
PARILIB_API GEN     Flx_invLaplace(GEN x, ulong p);
PARILIB_API int     Flx_is_squarefree(GEN z, ulong p);
PARILIB_API int     Flx_is_smooth(GEN g, int64_t r, ulong p);
PARILIB_API GEN     Flx_matFrobenius(GEN T, ulong p);
PARILIB_API GEN     Flx_mod_Xn1(GEN T, ulong n, ulong p);
PARILIB_API GEN     Flx_mod_Xnm1(GEN T, ulong n, ulong p);
PARILIB_API GEN     Flx_mul(GEN x, GEN y, ulong p);
PARILIB_API GEN     Flx_neg(GEN x, ulong p);
PARILIB_API GEN     Flx_neg_inplace(GEN x, ulong p);
PARILIB_API GEN     Flx_normalize(GEN z, ulong p);
PARILIB_API GEN     Flx_powu(GEN x, ulong n, ulong p);
PARILIB_API GEN     Flx_recip(GEN x);
PARILIB_API GEN     Flx_red(GEN z, ulong p);
PARILIB_API GEN     Flx_rem(GEN x, GEN y, ulong p);
PARILIB_API GEN     Flx_renormalize(GEN x, int64_t l);
PARILIB_API GEN     Flx_rescale(GEN P, ulong h, ulong p);
PARILIB_API ulong   Flx_resultant(GEN a, GEN b, ulong p);
PARILIB_API GEN     Flx_shift(GEN a, int64_t n);
PARILIB_API GEN     Flx_splitting(GEN p, int64_t k);
PARILIB_API GEN     Flx_sqr(GEN x, ulong p);
PARILIB_API GEN     Flx_sub(GEN x, GEN y, ulong p);
PARILIB_API GEN     Flx_translate1(GEN P, ulong p);
PARILIB_API GEN     Flx_translate1_basecase(GEN P, ulong p);
PARILIB_API GEN     Flx_to_Flv(GEN x, int64_t N);
PARILIB_API GEN     Flx_to_FlxX(GEN z, int64_t v);
PARILIB_API GEN     Flx_to_ZX(GEN z);
PARILIB_API GEN     Flx_to_ZX_inplace(GEN z);
PARILIB_API GEN     Flx_triple(GEN y, ulong p);
PARILIB_API int64_t    Flx_val(GEN x);
PARILIB_API int64_t    Flx_valrem(GEN x, GEN *Z);
PARILIB_API GEN     FlxC_FlxqV_eval(GEN x, GEN v, GEN T, ulong p);
PARILIB_API GEN     FlxC_Flxq_eval(GEN x, GEN F, GEN T, ulong p);
PARILIB_API GEN     FlxC_eval_powers_pre(GEN z, GEN x, ulong p, ulong pi);
PARILIB_API GEN     FlxC_neg(GEN x, ulong p);
PARILIB_API GEN     FlxC_sub(GEN x, GEN y, ulong p);
PARILIB_API GEN     FlxC_to_ZXC(GEN x);
PARILIB_API GEN     FlxM_Flx_add_shallow(GEN x, GEN y, ulong p);
PARILIB_API GEN     FlxM_eval_powers_pre(GEN z, GEN x, ulong p, ulong pi);
PARILIB_API GEN     FlxM_neg(GEN x, ulong p);
PARILIB_API GEN     FlxM_sub(GEN x, GEN y, ulong p);
PARILIB_API GEN     FlxM_to_ZXM(GEN z);
PARILIB_API GEN     FlxT_red(GEN z, ulong p);
PARILIB_API GEN     FlxV_Flc_mul(GEN V, GEN W, ulong p);
PARILIB_API GEN     FlxV_Flv_multieval(GEN P, GEN v, ulong p);
PARILIB_API GEN     FlxV_Flx_fromdigits(GEN x, GEN T, ulong p);
PARILIB_API GEN     FlxV_prod(GEN V, ulong p);
PARILIB_API GEN     FlxV_red(GEN z, ulong p);
PARILIB_API GEN     FlxV_to_Flm(GEN v, int64_t n);
PARILIB_API GEN     FlxV_to_FlxX(GEN x, int64_t v);
PARILIB_API GEN     FlxV_to_ZXV(GEN x);
PARILIB_API void    FlxV_to_ZXV_inplace(GEN v);
PARILIB_API GEN     Flxn_exp(GEN h, int64_t e, ulong p);
PARILIB_API GEN     Flxn_expint(GEN h, int64_t e, ulong p);
PARILIB_API GEN     Flxn_inv(GEN f, int64_t e, ulong p);
PARILIB_API GEN     Flxn_mul(GEN a, GEN b, int64_t n, ulong p);
PARILIB_API GEN     Flxn_sqr(GEN a, int64_t n, ulong p);
PARILIB_API GEN     Flxn_red(GEN a, int64_t n);
PARILIB_API GEN     Flxq_autpow(GEN x, ulong n, GEN T, ulong p);
PARILIB_API GEN     Flxq_autpowers(GEN x, ulong n, GEN T, ulong p);
PARILIB_API GEN     Flxq_autsum(GEN x, ulong n, GEN T, ulong p);
PARILIB_API GEN     Flxq_auttrace(GEN x, ulong n, GEN T, ulong p);
PARILIB_API GEN     Flxq_charpoly(GEN x, GEN T, ulong p);
PARILIB_API GEN     Flxq_conjvec(GEN x, GEN T, ulong p);
PARILIB_API GEN     Flxq_div(GEN x, GEN y, GEN T, ulong p);
PARILIB_API GEN     Flxq_inv(GEN x,GEN T,ulong p);
PARILIB_API GEN     Flxq_invsafe(GEN x, GEN T, ulong p);
PARILIB_API int     Flxq_issquare(GEN x, GEN T, ulong p);
PARILIB_API int     Flxq_is2npower(GEN x, int64_t n, GEN T, ulong p);
PARILIB_API GEN     Flxq_log(GEN a, GEN g, GEN ord, GEN T, ulong p);
PARILIB_API GEN     Flxq_lroot(GEN a, GEN T, int64_t p);
PARILIB_API GEN     Flxq_lroot_fast(GEN a, GEN sqx, GEN T, int64_t p);
PARILIB_API GEN     Flxq_matrix_pow(GEN y, int64_t n, int64_t m, GEN P, ulong l);
PARILIB_API GEN     Flxq_minpoly(GEN x, GEN T, ulong p);
PARILIB_API GEN     Flxq_mul(GEN x, GEN y, GEN T, ulong p);
PARILIB_API ulong   Flxq_norm(GEN x, GEN T, ulong p);
PARILIB_API GEN     Flxq_order(GEN a, GEN ord, GEN T, ulong p);
PARILIB_API GEN     Flxq_pow(GEN x, GEN n, GEN T, ulong p);
PARILIB_API GEN     Flxq_pow_init(GEN x, GEN n, int64_t k,  GEN T, ulong p);
PARILIB_API GEN     Flxq_pow_table(GEN R, GEN n, GEN T, ulong p);
PARILIB_API GEN     Flxq_powu(GEN x, ulong n, GEN T, ulong p);
PARILIB_API GEN     Flxq_powers(GEN x, int64_t l, GEN T, ulong p);
PARILIB_API GEN     Flxq_sqr(GEN y,GEN T,ulong p);
PARILIB_API GEN     Flxq_sqrt(GEN a, GEN T, ulong p);
PARILIB_API GEN     Flxq_sqrtn(GEN a, GEN n, GEN T, ulong p, GEN *zetan);
PARILIB_API ulong   Flxq_trace(GEN x, GEN T, ulong p);
PARILIB_API GEN     FlxqC_Flxq_mul(GEN x, GEN y, GEN T, ulong p);
PARILIB_API GEN     FlxqM_Flxq_mul(GEN x, GEN y, GEN T, ulong p);
PARILIB_API GEN     FlxqV_dotproduct(GEN x, GEN y, GEN T, ulong p);
PARILIB_API ulong   Rg_to_F2(GEN x);
PARILIB_API ulong   Rg_to_Fl(GEN x, ulong p);
PARILIB_API GEN     Rg_to_Flxq(GEN x, GEN T, ulong p);
PARILIB_API GEN     RgX_to_Flx(GEN x, ulong p);
PARILIB_API GEN     RgXV_to_FlxV(GEN x, ulong p);
PARILIB_API GEN     Z_to_Flx(GEN x, ulong p, int64_t sv);
PARILIB_API GEN     ZX_to_Flx(GEN x, ulong p);
PARILIB_API GEN     ZXV_to_FlxV(GEN v, ulong p);
PARILIB_API GEN     ZXT_to_FlxT(GEN z, ulong p);
PARILIB_API GEN     gener_Flxq(GEN T, ulong p, GEN *o);
PARILIB_API const struct bb_field *get_Flxq_field(void **E, GEN T, ulong p);
PARILIB_API const struct bb_group *get_Flxq_star(void **E, GEN T, ulong p);
PARILIB_API GEN     monomial_Flx(ulong a, int64_t d, int64_t vs);
PARILIB_API GEN     random_Flx(int64_t d1, int64_t v, ulong p);
PARILIB_API GEN     zero_FlxC(int64_t n, int64_t sv);
PARILIB_API GEN     zero_FlxM(int64_t r, int64_t c, int64_t sv);
PARILIB_API GEN     zlx_translate1(GEN P, ulong p, int64_t e);
PARILIB_API GEN     zx_to_Flx(GEN x, ulong p);

/* FlxX.c */

PARILIB_API GEN     FlxX_Fl_mul(GEN x, ulong y, ulong p);
PARILIB_API GEN     FlxX_Flx_add(GEN y, GEN x, ulong p);
PARILIB_API GEN     FlxX_Flx_mul(GEN x, GEN y, ulong p);
PARILIB_API GEN     FlxX_Flx_sub(GEN y, GEN x, ulong p);
PARILIB_API GEN     FlxX_Laplace(GEN x, ulong p);
PARILIB_API GEN     FlxX_add(GEN P, GEN Q, ulong p);
PARILIB_API GEN     FlxX_blocks(GEN P, int64_t n, int64_t m, int64_t vs);
PARILIB_API GEN     FlxX_deriv(GEN z, ulong p);
PARILIB_API GEN     FlxX_double(GEN x, ulong p);
PARILIB_API GEN     FlxX_invLaplace(GEN x, ulong p);
PARILIB_API GEN     FlxX_neg(GEN x, ulong p);
PARILIB_API GEN     FlxX_renormalize(GEN x, int64_t lx);
PARILIB_API GEN     FlxX_shift(GEN a, int64_t n, int64_t vs);
PARILIB_API GEN     FlxX_sub(GEN P, GEN Q, ulong p);
PARILIB_API GEN     FlxX_swap(GEN x, int64_t n, int64_t ws);
PARILIB_API GEN     FlxX_to_Flm(GEN v, int64_t n);
PARILIB_API GEN     FlxX_to_Flx(GEN f);
PARILIB_API GEN     FlxX_to_FlxC(GEN x, int64_t N, int64_t sv);
PARILIB_API GEN     FlxX_to_ZXX(GEN B);
PARILIB_API GEN     FlxX_translate1(GEN P, int64_t p, int64_t n);
PARILIB_API GEN     FlxX_triple(GEN x, ulong p);
PARILIB_API GEN     FlxXC_to_ZXXC(GEN B);
PARILIB_API GEN     FlxXM_to_ZXXM(GEN B);
PARILIB_API GEN     FlxXV_to_FlxM(GEN v, int64_t n, int64_t sv);
PARILIB_API GEN     FlxXn_red(GEN a, int64_t n);
PARILIB_API GEN     FlxY_Flx_div(GEN x, GEN y, ulong p);
PARILIB_API GEN     FlxY_Flx_translate(GEN P, GEN c, ulong p);
PARILIB_API GEN     FlxY_Flxq_evalx(GEN P, GEN x, GEN T, ulong p);
PARILIB_API GEN     FlxY_FlxqV_evalx(GEN P, GEN x, GEN T, ulong p);
PARILIB_API int64_t    FlxY_degreex(GEN b);
PARILIB_API ulong   FlxY_eval_powers_pre(GEN pol, GEN ypowers, GEN xpowers, ulong p, ulong pi);
PARILIB_API GEN     FlxY_evalx(GEN Q, ulong x, ulong p);
PARILIB_API GEN     FlxY_evalx_powers_pre(GEN pol, GEN ypowers, ulong p, ulong pi);
PARILIB_API GEN     FlxYqq_pow(GEN x, GEN n, GEN S, GEN T, ulong p);
PARILIB_API GEN     FlxqV_roots_to_pol(GEN V, GEN T, ulong p, int64_t v);
PARILIB_API GEN     FlxqX_FlxqXQ_eval(GEN Q, GEN x, GEN S, GEN T, ulong p);
PARILIB_API GEN     FlxqX_FlxqXQV_eval(GEN P, GEN V, GEN S, GEN T, ulong p);
PARILIB_API GEN     FlxqX_Flxq_mul(GEN P, GEN U, GEN T, ulong p);
PARILIB_API GEN     FlxqX_Flxq_mul_to_monic(GEN P, GEN U, GEN T, ulong p);
PARILIB_API GEN     FlxqX_Newton(GEN P, int64_t n, GEN T, ulong p);
PARILIB_API GEN     FlxqX_divrem(GEN x, GEN y, GEN T, ulong p, GEN *pr);
PARILIB_API GEN     FlxqX_disc(GEN x, GEN T, ulong p);
PARILIB_API GEN     FlxqX_dotproduct(GEN x, GEN y, GEN T, ulong p);
PARILIB_API GEN     FlxqX_extgcd(GEN a, GEN b, GEN T, ulong p, GEN *ptu, GEN *ptv);
PARILIB_API GEN     FlxqX_fromNewton(GEN P, GEN T, ulong p);
PARILIB_API GEN     FlxqX_gcd(GEN P, GEN Q, GEN T, ulong p);
PARILIB_API GEN     FlxqX_get_red(GEN S, GEN T, ulong p);
PARILIB_API GEN     FlxqX_halfgcd(GEN x, GEN y, GEN T, ulong p);
PARILIB_API GEN     FlxqX_invBarrett(GEN T, GEN Q, ulong p);
PARILIB_API GEN     FlxqX_mul(GEN x, GEN y, GEN T, ulong p);
PARILIB_API GEN     FlxqX_normalize(GEN z, GEN T, ulong p);
PARILIB_API GEN     FlxqX_powu(GEN V, ulong n, GEN T, ulong p);
PARILIB_API GEN     FlxqX_red(GEN z, GEN T, ulong p);
PARILIB_API GEN     FlxqX_rem(GEN x, GEN y, GEN T, ulong p);
PARILIB_API GEN     FlxqX_resultant(GEN x, GEN y, GEN T, ulong p);
PARILIB_API GEN     FlxqX_safegcd(GEN P, GEN Q, GEN T, ulong p);
PARILIB_API GEN     FlxqX_saferesultant(GEN a, GEN b, GEN T, ulong p);
PARILIB_API GEN     FlxqX_sqr(GEN x, GEN T, ulong p);
PARILIB_API GEN     FlxqXQ_div(GEN x, GEN y, GEN S, GEN T, ulong p);
PARILIB_API GEN     FlxqXQ_inv(GEN x, GEN S, GEN T, ulong p);
PARILIB_API GEN     FlxqXQ_invsafe(GEN x, GEN S, GEN T, ulong p);
PARILIB_API GEN     FlxqXQ_matrix_pow(GEN x, int64_t n, int64_t m, GEN S, GEN T, ulong p);
PARILIB_API GEN     FlxqXQ_minpoly(GEN x, GEN S, GEN T, ulong p);
PARILIB_API GEN     FlxqXQ_mul(GEN x, GEN y, GEN S, GEN T, ulong p);
PARILIB_API GEN     FlxqXQ_pow(GEN x, GEN n, GEN S, GEN T, ulong p);
PARILIB_API GEN     FlxqXQ_powu(GEN x, ulong n, GEN S, GEN T, ulong p);
PARILIB_API GEN     FlxqXQ_powers(GEN x, int64_t n, GEN S, GEN T, ulong p);
PARILIB_API GEN     FlxqXQ_sqr(GEN x, GEN S, GEN T, ulong p);
PARILIB_API GEN     FlxqXQ_autpow(GEN x, int64_t n, GEN S, GEN T, ulong p);
PARILIB_API GEN     FlxqXQ_autsum(GEN aut, int64_t n, GEN S, GEN T, ulong p);
PARILIB_API GEN     FlxqXQ_auttrace(GEN x, ulong n, GEN S, GEN T, ulong p);
PARILIB_API GEN     FlxqXV_prod(GEN V, GEN T, ulong p);
PARILIB_API GEN     FlxqXn_expint(GEN h, int64_t e, GEN T, ulong p);
PARILIB_API GEN     FlxqXn_inv(GEN f, int64_t e, GEN T, ulong p);
PARILIB_API GEN     FlxqXn_mul(GEN a, GEN b, int64_t n, GEN T, ulong p);
PARILIB_API GEN     FlxqXn_sqr(GEN a, int64_t n, GEN T, ulong p);
PARILIB_API GEN     Fly_to_FlxY(GEN B, int64_t v);
PARILIB_API GEN     Kronecker_to_FlxqX(GEN z, GEN T, ulong p);
PARILIB_API GEN     RgX_to_FlxqX(GEN x, GEN T, ulong p);
PARILIB_API const struct bb_algebra *get_FlxqXQ_algebra(void **E, GEN S, GEN T, ulong p);
PARILIB_API GEN     pol1_FlxX(int64_t v, int64_t sv);
PARILIB_API GEN     polx_FlxX(int64_t v, int64_t sv);
PARILIB_API GEN     random_FlxqX(int64_t d1, int64_t v, GEN T, ulong p);
PARILIB_API GEN     zlxX_translate1(GEN P, int64_t p, int64_t e, int64_t n);
PARILIB_API GEN     zxX_to_FlxX(GEN B, ulong p);
PARILIB_API GEN     zxX_to_Kronecker(GEN P, GEN Q);

/* FlxqE.c */

PARILIB_API GEN     Flxq_ellcard(GEN a4, GEN a6, GEN T, ulong p);
PARILIB_API GEN     Flxq_ellgens(GEN a4, GEN a6, GEN ch, GEN D, GEN m, GEN T, ulong p);
PARILIB_API GEN     Flxq_ellgroup(GEN a4, GEN a6, GEN N, GEN T, ulong p, GEN *pt_m);
PARILIB_API void    Flxq_elltwist(GEN a, GEN a6, GEN T, ulong p, GEN *pt_a, GEN *pt_a6);
PARILIB_API GEN     Flxq_ellj(GEN a4, GEN a6, GEN T, ulong p);
PARILIB_API void    Flxq_ellj_to_a4a6(GEN j, GEN T, ulong p, GEN *pt_a4, GEN *pt_a6);
PARILIB_API GEN     FlxqE_add(GEN P, GEN Q, GEN a4, GEN T, ulong p);
PARILIB_API GEN     FlxqE_changepoint(GEN x, GEN ch, GEN T, ulong p);
PARILIB_API GEN     FlxqE_changepointinv(GEN x, GEN ch, GEN T, ulong p);
PARILIB_API GEN     FlxqE_dbl(GEN P, GEN a4, GEN T, ulong p);
PARILIB_API GEN     FlxqE_log(GEN a, GEN b, GEN o, GEN a4, GEN T, ulong p);
PARILIB_API GEN     FlxqE_mul(GEN P, GEN n, GEN a4, GEN T, ulong p);
PARILIB_API GEN     FlxqE_neg(GEN P, GEN T, ulong p);
PARILIB_API GEN     FlxqE_order(GEN z, GEN o, GEN a4, GEN T, ulong p);
PARILIB_API GEN     FlxqE_sub(GEN P, GEN Q, GEN a4, GEN T, ulong p);
PARILIB_API GEN     FlxqE_tatepairing(GEN t, GEN s, GEN m, GEN a4, GEN T, ulong p);
PARILIB_API GEN     FlxqE_weilpairing(GEN t, GEN s, GEN m, GEN a4, GEN T, ulong p);
PARILIB_API GEN     ZXX_to_FlxX(GEN B, ulong p, int64_t v);
PARILIB_API GEN     ZXXT_to_FlxXT(GEN z, ulong p, int64_t v);
PARILIB_API GEN     ZXXV_to_FlxXV(GEN V, ulong p, int64_t v);
PARILIB_API const struct bb_group * get_FlxqE_group(void **E, GEN a4, GEN a6, GEN T, ulong p);
PARILIB_API GEN     RgE_to_FlxqE(GEN x, GEN T, ulong p);
PARILIB_API GEN     random_FlxqE(GEN a4, GEN a6, GEN T, ulong p);

/* FpE.c */

PARILIB_API int64_t    Fl_elltrace(ulong a4, ulong a6, ulong p);
PARILIB_API int64_t    Fl_elltrace_CM(int64_t CM, ulong a4, ulong a6, ulong p);
PARILIB_API GEN     Fp_ellcard(GEN a4, GEN a6, GEN p);
PARILIB_API GEN     Fp_elldivpol(GEN a4, GEN a6, int64_t n, GEN p);
PARILIB_API GEN     Fp_ellgens(GEN a4, GEN a6, GEN ch, GEN D, GEN m, GEN p);
PARILIB_API GEN     Fp_ellgroup(GEN a4, GEN a6, GEN N, GEN p, GEN *pt_m);
PARILIB_API GEN     Fp_ellj(GEN a4, GEN a6, GEN p);
PARILIB_API int     Fp_elljissupersingular(GEN j, GEN p);
PARILIB_API void    Fp_elltwist(GEN a4, GEN a6, GEN p, GEN *pt_a4, GEN *pt_a6);
PARILIB_API GEN     Fp_ffellcard(GEN a4, GEN a6, GEN q, int64_t n, GEN p);
PARILIB_API GEN     FpE_add(GEN P, GEN Q, GEN a4, GEN p);
PARILIB_API GEN     FpE_changepoint(GEN x, GEN ch, GEN p);
PARILIB_API GEN     FpE_changepointinv(GEN x, GEN ch, GEN p);
PARILIB_API GEN     FpE_dbl(GEN P, GEN a4, GEN p);
PARILIB_API GEN     FpE_log(GEN a, GEN b, GEN o, GEN a4, GEN p);
PARILIB_API GEN     FpE_mul(GEN P, GEN n, GEN a4, GEN p);
PARILIB_API GEN     FpE_neg(GEN P, GEN p);
PARILIB_API GEN     FpE_order(GEN z, GEN o, GEN a4, GEN p);
PARILIB_API GEN     FpE_sub(GEN P, GEN Q, GEN a4, GEN p);
PARILIB_API GEN     FpE_to_FpJ(GEN P);
PARILIB_API GEN     FpE_to_mod(GEN P, GEN p);
PARILIB_API GEN     FpE_tatepairing(GEN t, GEN s, GEN m, GEN a4, GEN p);
PARILIB_API GEN     FpE_weilpairing(GEN t, GEN s, GEN m, GEN a4, GEN p);
PARILIB_API GEN     FpJ_add(GEN P, GEN Q, GEN a4, GEN p);
PARILIB_API GEN     FpJ_dbl(GEN P, GEN a4, GEN p);
PARILIB_API GEN     FpJ_mul(GEN P, GEN n, GEN a4, GEN p);
PARILIB_API GEN     FpJ_neg(GEN Q, GEN p);
PARILIB_API GEN     FpJ_to_FpE(GEN P, GEN p);
PARILIB_API GEN     FpXQ_ellcard(GEN a4, GEN a6, GEN T, GEN p);
PARILIB_API GEN     FpXQ_elldivpol(GEN a4, GEN a6, int64_t n, GEN T, GEN p);
PARILIB_API GEN     FpXQ_ellgens(GEN a4, GEN a6, GEN ch, GEN D, GEN m, GEN T, GEN p);
PARILIB_API GEN     FpXQ_ellgroup(GEN a4, GEN a6, GEN N, GEN T, GEN p, GEN *pt_m);
PARILIB_API GEN     FpXQ_ellj(GEN a4, GEN a6, GEN T, GEN p);
PARILIB_API int     FpXQ_elljissupersingular(GEN j, GEN T, GEN p);
PARILIB_API void    FpXQ_elltwist(GEN a4, GEN a6, GEN T, GEN p, GEN *pt_a4, GEN *pt_a6);
PARILIB_API GEN     FpXQE_add(GEN P, GEN Q, GEN a4, GEN T, GEN p);
PARILIB_API GEN     FpXQE_changepoint(GEN x, GEN ch, GEN T, GEN p);
PARILIB_API GEN     FpXQE_changepointinv(GEN x, GEN ch, GEN T, GEN p);
PARILIB_API GEN     FpXQE_dbl(GEN P, GEN a4, GEN T, GEN p);
PARILIB_API GEN     FpXQE_log(GEN a, GEN b, GEN o, GEN a4, GEN T, GEN p);
PARILIB_API GEN     FpXQE_mul(GEN P, GEN n, GEN a4, GEN T, GEN p);
PARILIB_API GEN     FpXQE_neg(GEN P, GEN T, GEN p);
PARILIB_API GEN     FpXQE_order(GEN z, GEN o, GEN a4, GEN T, GEN p);
PARILIB_API GEN     FpXQE_sub(GEN P, GEN Q, GEN a4, GEN T, GEN p);
PARILIB_API GEN     FpXQE_tatepairing(GEN t, GEN s, GEN m, GEN a4, GEN T, GEN p);
PARILIB_API GEN     FpXQE_weilpairing(GEN t, GEN s, GEN m, GEN a4, GEN T, GEN p);
PARILIB_API GEN     Fq_elldivpolmod(GEN a4, GEN a6, int64_t n, GEN h, GEN T, GEN p);
PARILIB_API GEN     RgE_to_FpE(GEN x, GEN p);
PARILIB_API GEN     RgE_to_FpXQE(GEN x, GEN T, GEN p);
PARILIB_API const struct bb_group * get_FpE_group(void **E, GEN a4, GEN a6, GEN p);
PARILIB_API const struct bb_group * get_FpXQE_group(void **E, GEN a4, GEN a6, GEN T, GEN p);
PARILIB_API GEN     elltrace_extension(GEN t, int64_t n, GEN p);
PARILIB_API GEN     random_FpE(GEN a4, GEN a6, GEN p);
PARILIB_API GEN     random_FpXQE(GEN a4, GEN a6, GEN T, GEN p);

/* FpX.c */

PARILIB_API int     Fp_issquare(GEN x, GEN p);
PARILIB_API GEN     Fp_FpX_sub(GEN x, GEN y, GEN p);
PARILIB_API GEN     Fp_FpXQ_log(GEN a, GEN g, GEN ord, GEN T, GEN p);
PARILIB_API GEN     FpV_FpM_polint(GEN xa, GEN ya, GEN p, int64_t vs);
PARILIB_API GEN     FpV_inv(GEN x, GEN p);
PARILIB_API GEN     FpV_invVandermonde(GEN L, GEN den, GEN p);
PARILIB_API GEN     FpV_polint(GEN xa, GEN ya, GEN p, int64_t v);
PARILIB_API GEN     FpV_roots_to_pol(GEN V, GEN p, int64_t v);
PARILIB_API GEN     FpX_Fp_add(GEN x, GEN y, GEN p);
PARILIB_API GEN     FpX_Fp_add_shallow(GEN y,GEN x,GEN p);
PARILIB_API GEN     FpX_Fp_div(GEN x, GEN y, GEN p);
PARILIB_API GEN     FpX_Fp_mul(GEN x, GEN y, GEN p);
PARILIB_API GEN     FpX_Fp_mul_to_monic(GEN y,GEN x,GEN p);
PARILIB_API GEN     FpX_Fp_mulspec(GEN y,GEN x,GEN p,int64_t ly);
PARILIB_API GEN     FpX_Fp_sub(GEN x, GEN y, GEN p);
PARILIB_API GEN     FpX_Fp_sub_shallow(GEN y,GEN x,GEN p);
PARILIB_API GEN     FpX_FpV_multieval(GEN P, GEN xa, GEN p);
PARILIB_API GEN     FpX_FpXQ_eval(GEN f,GEN x,GEN T,GEN p);
PARILIB_API GEN     FpX_FpXQV_eval(GEN f,GEN x,GEN T,GEN p);
PARILIB_API GEN     FpX_FpXV_multirem(GEN P, GEN xa, GEN p);
PARILIB_API GEN     FpX_Frobenius(GEN T, GEN p);
PARILIB_API GEN     FpX_Laplace(GEN x, GEN p);
PARILIB_API GEN     FpX_Newton(GEN P, int64_t n, GEN p);
PARILIB_API GEN     FpX_add(GEN x, GEN y, GEN p);
PARILIB_API GEN     FpX_center(GEN x, GEN p, GEN pov2);
PARILIB_API GEN     FpX_center_i(GEN T, GEN p, GEN pov2);
PARILIB_API GEN     FpX_chinese_coprime(GEN x,GEN y,GEN Tx,GEN Ty,GEN Tz,GEN p);
PARILIB_API GEN     FpX_convol(GEN x, GEN y, GEN p);
PARILIB_API GEN     FpX_deriv(GEN x, GEN p);
PARILIB_API GEN     FpX_digits(GEN x, GEN y, GEN p);
PARILIB_API GEN     FpX_disc(GEN x, GEN p);
PARILIB_API GEN     FpX_div_by_X_x(GEN a, GEN x, GEN p, GEN *r);
PARILIB_API GEN     FpX_divrem(GEN x, GEN y, GEN p, GEN *pr);
PARILIB_API GEN     FpX_divu(GEN x, ulong y, GEN p);
PARILIB_API GEN     FpX_dotproduct(GEN x, GEN y, GEN p);
PARILIB_API GEN     FpX_eval(GEN x,GEN y,GEN p);
PARILIB_API GEN     FpX_extgcd(GEN x, GEN y, GEN p, GEN *ptu, GEN *ptv);
PARILIB_API GEN     FpX_fromNewton(GEN P, GEN p);
PARILIB_API GEN     FpX_gcd(GEN x, GEN y, GEN p);
PARILIB_API GEN     FpX_gcd_check(GEN x, GEN y, GEN p);
PARILIB_API GEN     FpX_get_red(GEN T, GEN p);
PARILIB_API GEN     FpX_halve(GEN y, GEN p);
PARILIB_API GEN     FpX_halfgcd(GEN x, GEN y, GEN p);
PARILIB_API GEN     FpX_integ(GEN x, GEN p);
PARILIB_API GEN     FpX_invBarrett(GEN T, GEN p);
PARILIB_API GEN     FpX_invLaplace(GEN x, GEN p);
PARILIB_API int     FpX_is_squarefree(GEN f, GEN p);
PARILIB_API int64_t    FpX_ispower(GEN f, ulong k, GEN p, GEN *pt_r);
PARILIB_API GEN     FpX_matFrobenius(GEN T, GEN p);
PARILIB_API GEN     FpX_mul(GEN x, GEN y, GEN p);
PARILIB_API GEN     FpX_mulspec(GEN a, GEN b, GEN p, int64_t na, int64_t nb);
PARILIB_API GEN     FpX_mulu(GEN x, ulong y, GEN p);
PARILIB_API GEN     FpX_neg(GEN x, GEN p);
PARILIB_API GEN     FpX_normalize(GEN z, GEN p);
PARILIB_API GEN     FpX_powu(GEN x, ulong n, GEN p);
PARILIB_API GEN     FpX_red(GEN z, GEN p);
PARILIB_API GEN     FpX_rem(GEN x, GEN y, GEN p);
PARILIB_API GEN     FpX_rescale(GEN P, GEN h, GEN p);
PARILIB_API GEN     FpX_resultant(GEN a, GEN b, GEN p);
PARILIB_API GEN     FpX_sqr(GEN x, GEN p);
PARILIB_API GEN     FpX_sub(GEN x, GEN y, GEN p);
PARILIB_API int64_t    FpX_valrem(GEN x0, GEN t, GEN p, GEN *py);
PARILIB_API GEN     FpXC_FpXQ_eval(GEN Q, GEN x, GEN T, GEN p);
PARILIB_API GEN     FpXC_FpXQV_eval(GEN Q, GEN x, GEN T, GEN p);
PARILIB_API GEN     FpXM_FpXQV_eval(GEN Q, GEN x, GEN T, GEN p);
PARILIB_API GEN     FpXQ_autpow(GEN x, ulong n, GEN T, GEN p);
PARILIB_API GEN     FpXQ_autpowers(GEN aut, int64_t f, GEN T, GEN p);
PARILIB_API GEN     FpXQ_autsum(GEN x, ulong n, GEN T, GEN p);
PARILIB_API GEN     FpXQ_auttrace(GEN x, ulong n, GEN T, GEN p);
PARILIB_API GEN     FpXQ_charpoly(GEN x, GEN T, GEN p);
PARILIB_API GEN     FpXQ_conjvec(GEN x, GEN T, GEN p);
PARILIB_API GEN     FpXQ_div(GEN x,GEN y,GEN T,GEN p);
PARILIB_API GEN     FpXQ_inv(GEN x,GEN T,GEN p);
PARILIB_API GEN     FpXQ_invsafe(GEN x, GEN T, GEN p);
PARILIB_API int     FpXQ_issquare(GEN x, GEN T, GEN p);
PARILIB_API GEN     FpXQ_log(GEN a, GEN g, GEN ord, GEN T, GEN p);
PARILIB_API GEN     FpXQ_matrix_pow(GEN y, int64_t n, int64_t m, GEN P, GEN l);
PARILIB_API GEN     FpXQ_minpoly(GEN x, GEN T, GEN p);
PARILIB_API GEN     FpXQ_mul(GEN y,GEN x,GEN T,GEN p);
PARILIB_API GEN     FpXQ_norm(GEN x, GEN T, GEN p);
PARILIB_API GEN     FpXQ_order(GEN a, GEN ord, GEN T, GEN p);
PARILIB_API GEN     FpXQ_pow(GEN x, GEN n, GEN T, GEN p);
PARILIB_API GEN     FpXQ_powu(GEN x, ulong n, GEN T, GEN p);
PARILIB_API GEN     FpXQ_powers(GEN x, int64_t l, GEN T, GEN p);
PARILIB_API GEN     FpXQ_red(GEN x, GEN T, GEN p);
PARILIB_API GEN     FpXQ_sqr(GEN y, GEN T, GEN p);
PARILIB_API GEN     FpXQ_sqrt(GEN a, GEN T, GEN p);
PARILIB_API GEN     FpXQ_sqrtn(GEN a, GEN n, GEN T, GEN p, GEN *zetan);
PARILIB_API GEN     FpXQ_trace(GEN x, GEN T, GEN p);
PARILIB_API GEN     FpXQC_to_mod(GEN z, GEN T, GEN p);
PARILIB_API GEN     FpXQM_autsum(GEN x, ulong n, GEN T, GEN p);
PARILIB_API GEN     FpXT_red(GEN z, GEN p);
PARILIB_API GEN     FpXV_FpX_fromdigits(GEN x, GEN T, GEN p);
PARILIB_API GEN     FpXV_chinese(GEN A, GEN P, GEN p, GEN *pt_mod);
PARILIB_API GEN     FpXV_prod(GEN V, GEN p);
PARILIB_API GEN     FpXV_red(GEN z, GEN p);
PARILIB_API GEN     FpXn_exp(GEN x, int64_t n, GEN p);
PARILIB_API GEN     FpXn_expint(GEN x, int64_t n, GEN p);
PARILIB_API GEN     FpXn_inv(GEN x, int64_t n, GEN p);
PARILIB_API GEN     FpXn_mul(GEN a, GEN b, int64_t n, GEN p);
PARILIB_API GEN     FpXn_sqr(GEN a, int64_t n, GEN p);
PARILIB_API int     Fq_issquare(GEN x, GEN T, GEN p);
PARILIB_API int64_t    Fq_ispower(GEN x, GEN K, GEN T, GEN p);
PARILIB_API GEN     Fq_log(GEN a, GEN g, GEN ord, GEN T, GEN p);
PARILIB_API GEN     FqC_to_mod(GEN z, GEN T, GEN p);
PARILIB_API GEN     FqM_to_mod(GEN z, GEN T, GEN p);
PARILIB_API GEN     FqV_inv(GEN x, GEN T, GEN p);
PARILIB_API GEN     Z_to_FpX(GEN a, GEN p, int64_t v);
PARILIB_API GEN     gener_FpXQ(GEN T, GEN p, GEN *o);
PARILIB_API GEN     gener_FpXQ_local(GEN T, GEN p, GEN L);
PARILIB_API const struct bb_group * get_FpXQ_star(void **E, GEN T, GEN p);
PARILIB_API const struct bb_algebra * get_FpX_algebra(void **E, GEN p, int64_t v);
PARILIB_API const struct bb_algebra * get_FpXQ_algebra(void **E, GEN T, GEN p);
PARILIB_API GEN     random_FpX(int64_t d, int64_t v, GEN p);

/* FpX_factor.c */

PARILIB_API GEN     F2x_ddf(GEN f);
PARILIB_API GEN     F2x_factor(GEN f);
PARILIB_API GEN     F2x_factor_squarefree(GEN f);
PARILIB_API int     F2x_is_irred(GEN f);
PARILIB_API GEN     Flx_ddf(GEN T, ulong p);
PARILIB_API int     Flx_is_irred(GEN f, ulong p);
PARILIB_API int     Flx_is_totally_split(GEN f, ulong p);
PARILIB_API int64_t    Flx_ispower(GEN f, ulong k, ulong p, GEN *pt_r);
PARILIB_API GEN     Flx_degfact(GEN f, ulong p);
PARILIB_API GEN     Flx_factor(GEN f, ulong p);
PARILIB_API GEN     Flx_factor_squarefree(GEN f, ulong p);
PARILIB_API int64_t    Flx_nbfact(GEN z, ulong p);
PARILIB_API int64_t    Flx_nbfact_Frobenius(GEN T, GEN XP, ulong p);
PARILIB_API GEN     Flx_nbfact_by_degree(GEN z, int64_t *nb, ulong p);
PARILIB_API int64_t    Flx_nbroots(GEN f, ulong p);
PARILIB_API ulong   Flx_oneroot(GEN f, ulong p);
PARILIB_API ulong   Flx_oneroot_split(GEN f, ulong p);
PARILIB_API GEN     Flx_roots(GEN f, ulong p);
PARILIB_API GEN     Flx_rootsff(GEN P, GEN T, ulong p);
PARILIB_API GEN     FpX_ddf(GEN f, GEN p);
PARILIB_API int64_t    FpX_ddf_degree(GEN T, GEN XP, GEN p);
PARILIB_API GEN     FpX_degfact(GEN f, GEN p);
PARILIB_API GEN     FpX_factor(GEN f, GEN p);
PARILIB_API GEN     FpX_factor_squarefree(GEN T, GEN p);
PARILIB_API int     FpX_is_irred(GEN f, GEN p);
PARILIB_API int     FpX_is_totally_split(GEN f, GEN p);
PARILIB_API int64_t    FpX_nbfact(GEN f, GEN p);
PARILIB_API int64_t    FpX_nbfact_Frobenius(GEN T, GEN XP, GEN p);
PARILIB_API int64_t    FpX_nbroots(GEN f, GEN p);
PARILIB_API GEN     FpX_oneroot(GEN f, GEN p);
PARILIB_API GEN     FpX_oneroot_split(GEN fact, GEN p);
PARILIB_API GEN     FpX_roots(GEN f, GEN p);
PARILIB_API GEN     FpX_rootsff(GEN P, GEN T, GEN p);
PARILIB_API GEN     FpX_split_part(GEN f, GEN p);

/* FpXQX_factor.c */

PARILIB_API GEN     F2xqX_ddf(GEN S, GEN T);
PARILIB_API GEN     F2xqX_degfact(GEN S, GEN T);
PARILIB_API GEN     F2xqX_factor(GEN x, GEN T);
PARILIB_API GEN     F2xqX_factor_squarefree(GEN x, GEN T);
PARILIB_API GEN     F2xqX_roots(GEN x, GEN T);
PARILIB_API GEN     Flx_factorff_irred(GEN P, GEN Q, ulong p);
PARILIB_API void    Flx_ffintersect(GEN P,GEN Q,int64_t n,ulong l,GEN *SP,GEN *SQ,GEN MA,GEN MB);
PARILIB_API GEN     Flx_ffisom(GEN P,GEN Q,ulong l);
PARILIB_API GEN     Flxq_ffisom_inv(GEN S,GEN Tp, ulong p);
PARILIB_API GEN     FlxqX_Frobenius(GEN S, GEN T, ulong p);
PARILIB_API GEN     FlxqX_ddf(GEN S, GEN T, ulong p);
PARILIB_API int64_t    FlxqX_ddf_degree(GEN S, GEN XP, GEN T, ulong p);
PARILIB_API GEN     FlxqX_degfact(GEN S, GEN T, ulong p);
PARILIB_API GEN     FlxqX_factor(GEN x, GEN T, ulong p);
PARILIB_API GEN     FlxqX_factor_squarefree(GEN x, GEN T, ulong p);
PARILIB_API int64_t    FlxqX_ispower(GEN f, ulong k, GEN T, ulong p, GEN *pt_r);
PARILIB_API int64_t    FlxqX_is_squarefree(GEN P, GEN T, ulong p);
PARILIB_API int64_t    FlxqX_nbfact(GEN S, GEN T, ulong p);
PARILIB_API int64_t    FlxqX_nbfact_Frobenius(GEN S, GEN Xq, GEN T, ulong p);
PARILIB_API int64_t    FlxqX_nbroots(GEN f, GEN T, ulong p);
PARILIB_API GEN     FlxqX_roots(GEN S, GEN T, ulong p);
PARILIB_API GEN     FlxqXQ_halfFrobenius(GEN a, GEN S, GEN T, ulong p);
PARILIB_API GEN     FpX_factorff(GEN P, GEN T, GEN p);
PARILIB_API GEN     FpX_factorff_irred(GEN P, GEN Q, GEN p);
PARILIB_API void    FpX_ffintersect(GEN P,GEN Q,int64_t n,GEN l,GEN *SP,GEN *SQ,GEN MA,GEN MB);
PARILIB_API GEN     FpX_ffisom(GEN P,GEN Q,GEN l);
PARILIB_API GEN     FpXQ_ffisom_inv(GEN S,GEN Tp, GEN p);
PARILIB_API GEN     FpXQX_Frobenius(GEN S, GEN T, GEN p);
PARILIB_API GEN     FpXQX_ddf(GEN S, GEN T, GEN p);
PARILIB_API int64_t    FpXQX_ddf_degree(GEN S, GEN XP, GEN T, GEN p);
PARILIB_API GEN     FpXQX_degfact(GEN S, GEN T, GEN p);
PARILIB_API GEN     FpXQX_factor(GEN x, GEN T, GEN p);
PARILIB_API GEN     FpXQX_factor_squarefree(GEN x, GEN T, GEN p);
PARILIB_API int64_t    FpXQX_ispower(GEN f, ulong k, GEN T, GEN p, GEN *pt);
PARILIB_API int64_t    FpXQX_nbfact(GEN u, GEN T, GEN p);
PARILIB_API int64_t    FpXQX_nbfact_Frobenius(GEN S, GEN Xq, GEN T, GEN p);
PARILIB_API int64_t    FpXQX_nbroots(GEN f, GEN T, GEN p);
PARILIB_API GEN     FpXQX_roots(GEN f, GEN T, GEN p);
PARILIB_API GEN     FpXQX_split_part(GEN f, GEN T, GEN p);
PARILIB_API GEN     FpXQXQ_halfFrobenius(GEN a, GEN S, GEN T, GEN p);
PARILIB_API int64_t    FqX_is_squarefree(GEN P, GEN T, GEN p);
PARILIB_API int64_t    FqX_ispower(GEN f, ulong k, GEN T, GEN p, GEN *pt);
PARILIB_API int64_t    FqX_nbfact(GEN u, GEN T, GEN p);
PARILIB_API int64_t    FqX_nbroots(GEN f, GEN T, GEN p);
PARILIB_API GEN     factorff(GEN f, GEN p, GEN a);
PARILIB_API GEN     factormod0(GEN f, GEN p,int64_t flag);
PARILIB_API GEN     factormodDDF(GEN f, GEN D);
PARILIB_API GEN     factormodSQF(GEN f, GEN D);
PARILIB_API int     ff_parse_Tp(GEN Tp, GEN *T, GEN *p, int64_t red);
PARILIB_API GEN     polrootsff(GEN f, GEN p, GEN T);
PARILIB_API GEN     polrootsmod(GEN f, GEN p);
PARILIB_API GEN     rootmod0(GEN f, GEN p,int64_t flag);

/* FpXX.c */

PARILIB_API GEN     FpXQX_FpXQ_mul(GEN P, GEN U, GEN T, GEN p);
PARILIB_API GEN     FpXQX_FpXQXQV_eval(GEN P, GEN V, GEN S, GEN T, GEN p);
PARILIB_API GEN     FpXQX_FpXQXQ_eval(GEN P, GEN x, GEN S, GEN T, GEN p);
PARILIB_API GEN     FpXQX_digits(GEN x, GEN B, GEN T, GEN p);
PARILIB_API GEN     FpXQX_disc(GEN x, GEN T, GEN p);
PARILIB_API GEN     FpXQX_div_by_X_x(GEN a, GEN x, GEN T, GEN p, GEN *pr);
PARILIB_API GEN     FpXQX_divrem(GEN x, GEN y, GEN T, GEN p, GEN *pr);
PARILIB_API GEN     FpXQX_dotproduct(GEN x, GEN y, GEN T, GEN p);
PARILIB_API GEN     FpXQX_extgcd(GEN x, GEN y, GEN T, GEN p, GEN *ptu, GEN *ptv);
PARILIB_API GEN     FpXQX_gcd(GEN P, GEN Q, GEN T, GEN p);
PARILIB_API GEN     FpXQX_get_red(GEN S, GEN T, GEN p);
PARILIB_API GEN     FpXQX_halfgcd(GEN x, GEN y, GEN T, GEN p);
PARILIB_API GEN     FpXQX_invBarrett(GEN S, GEN T, GEN p);
PARILIB_API GEN     FpXQX_mul(GEN x, GEN y, GEN T, GEN p);
PARILIB_API GEN     FpXQX_powu(GEN x, ulong n, GEN T, GEN p);
PARILIB_API GEN     FpXQX_red(GEN z, GEN T, GEN p);
PARILIB_API GEN     FpXQX_rem(GEN x, GEN S, GEN T, GEN p);
PARILIB_API GEN     FpXQX_resultant(GEN a, GEN b, GEN T, GEN p);
PARILIB_API GEN     FpXQX_sqr(GEN x, GEN T, GEN p);
PARILIB_API GEN     FpXQX_to_mod(GEN z, GEN T, GEN p);
PARILIB_API GEN     FpXQXQ_div(GEN x,GEN y,GEN S, GEN T,GEN p);
PARILIB_API GEN     FpXQXQ_inv(GEN x, GEN S, GEN T,GEN p);
PARILIB_API GEN     FpXQXQ_invsafe(GEN x, GEN S, GEN T, GEN p);
PARILIB_API GEN     FpXQXQ_matrix_pow(GEN y, int64_t n, int64_t m, GEN S, GEN T, GEN p);
PARILIB_API GEN     FpXQXQ_minpoly(GEN x, GEN S, GEN T, GEN p);
PARILIB_API GEN     FpXQXQ_mul(GEN x, GEN y, GEN S, GEN T, GEN p);
PARILIB_API GEN     FpXQXQ_pow(GEN x, GEN n, GEN S, GEN T, GEN p);
PARILIB_API GEN     FpXQXQ_powers(GEN x, int64_t n, GEN S, GEN T, GEN p);
PARILIB_API GEN     FpXQXQ_sqr(GEN x, GEN S, GEN T, GEN p);
PARILIB_API GEN     FpXQXQ_autpow(GEN aut, int64_t n, GEN S, GEN T, GEN p);
PARILIB_API GEN     FpXQXQ_autsum(GEN aut, int64_t n, GEN S, GEN T, GEN p);
PARILIB_API GEN     FpXQXQ_auttrace(GEN aut, int64_t n, GEN S, GEN T, GEN p);
PARILIB_API GEN     FpXQXV_FpXQX_fromdigits(GEN x, GEN B, GEN T, GEN p);
PARILIB_API GEN     FpXQXV_prod(GEN V, GEN Tp, GEN p);
PARILIB_API GEN     FpXQXn_exp(GEN x, int64_t n, GEN T, GEN p);
PARILIB_API GEN     FpXQXn_expint(GEN x, int64_t n, GEN T, GEN p);
PARILIB_API GEN     FpXQXn_inv(GEN x, int64_t n, GEN T, GEN p);
PARILIB_API GEN     FpXQXn_mul(GEN x, GEN y, int64_t n, GEN T, GEN p);
PARILIB_API GEN     FpXQXn_sqr(GEN x, int64_t n, GEN T, GEN p);
PARILIB_API GEN     FpXX_Fp_mul(GEN x, GEN y, GEN p);
PARILIB_API GEN     FpXX_FpX_mul(GEN x, GEN y, GEN p);
PARILIB_API GEN     FpXX_add(GEN x, GEN y, GEN p);
PARILIB_API GEN     FpXX_deriv(GEN P, GEN p);
PARILIB_API GEN     FpXX_halve(GEN P, GEN p);
PARILIB_API GEN     FpXX_integ(GEN P, GEN p);
PARILIB_API GEN     FpXX_mulu(GEN P, ulong u, GEN p);
PARILIB_API GEN     FpXX_neg(GEN x, GEN p);
PARILIB_API GEN     FpXX_red(GEN z, GEN p);
PARILIB_API GEN     FpXX_sub(GEN x, GEN y, GEN p);
PARILIB_API GEN     FpXY_FpXQ_evalx(GEN P, GEN x, GEN T, GEN p);
PARILIB_API GEN     FpXY_FpXQV_evalx(GEN P, GEN x, GEN T, GEN p);
PARILIB_API GEN     FpXY_eval(GEN Q, GEN y, GEN x, GEN p);
PARILIB_API GEN     FpXY_evalx(GEN Q, GEN x, GEN p);
PARILIB_API GEN     FpXY_evaly(GEN Q, GEN y, GEN p, int64_t vy);
PARILIB_API GEN     FpXYQQ_pow(GEN x, GEN n, GEN S, GEN T, GEN p);
PARILIB_API GEN     FqXC_to_mod(GEN z, GEN T, GEN p);
PARILIB_API GEN     FqXM_to_mod(GEN z, GEN T, GEN p);
PARILIB_API GEN     Kronecker_to_FpXQX(GEN z, GEN pol, GEN p);
PARILIB_API const struct bb_algebra * get_FpXQX_algebra(void **E, GEN T, GEN p, int64_t v);
PARILIB_API const struct bb_algebra * get_FpXQXQ_algebra(void **E, GEN S, GEN T, GEN p);
PARILIB_API GEN     random_FpXQX(int64_t d1, int64_t v, GEN T, GEN p);

/* FpV.c */

PARILIB_API GEN     Flc_Flv_mul(GEN x, GEN y, ulong p);
PARILIB_API GEN     Flc_to_mod(GEN z, ulong pp);
PARILIB_API GEN     Flm_Fl_add(GEN x, ulong y, ulong p);
PARILIB_API GEN     Flm_Fl_mul(GEN y, ulong x, ulong p);
PARILIB_API void    Flm_Fl_mul_inplace(GEN y, ulong x, ulong p);
PARILIB_API GEN     Flm_Fl_mul_pre(GEN y, ulong x, ulong p, ulong pi);
PARILIB_API GEN     Flm_Fl_sub(GEN x, ulong y, ulong p);
PARILIB_API GEN     Flm_Flc_mul(GEN x, GEN y, ulong p);
PARILIB_API GEN     Flm_Flc_mul_pre(GEN x, GEN y, ulong p, ulong pi);
PARILIB_API GEN     Flm_Flc_mul_pre_Flx(GEN x, GEN y, ulong p, ulong pi, int64_t sv);
PARILIB_API GEN     Flm_add(GEN x, GEN y, ulong p);
PARILIB_API GEN     Flm_center(GEN z, ulong p, ulong ps2);
PARILIB_API GEN     Flm_mul(GEN x, GEN y, ulong p);
PARILIB_API GEN     Flm_mul_pre(GEN x, GEN y, ulong p, ulong pi);
PARILIB_API GEN     Flm_neg(GEN y, ulong p);
PARILIB_API GEN     Flm_powers(GEN x, ulong n, ulong p);
PARILIB_API GEN     Flm_powu(GEN x, ulong n, ulong p);
PARILIB_API GEN     Flm_sub(GEN x, GEN y, ulong p);
PARILIB_API GEN     Flm_to_mod(GEN z, ulong pp);
PARILIB_API GEN     Flm_transpose(GEN x);
PARILIB_API GEN     Flv_Fl_div(GEN x, ulong y, ulong p);
PARILIB_API void    Flv_Fl_div_inplace(GEN x, ulong y, ulong p);
PARILIB_API GEN     Flv_Fl_mul(GEN x, ulong y, ulong p);
PARILIB_API void    Flv_Fl_mul_inplace(GEN x, ulong y, ulong p);
PARILIB_API void    Flv_Fl_mul_part_inplace(GEN x, ulong y, ulong p, int64_t l);
PARILIB_API GEN     Flv_add(GEN x, GEN y, ulong p);
PARILIB_API void    Flv_add_inplace(GEN x, GEN y, ulong p);
PARILIB_API GEN     Flv_center(GEN z, ulong p, ulong ps2);
PARILIB_API ulong   Flv_dotproduct(GEN x, GEN y, ulong p);
PARILIB_API ulong   Flv_dotproduct_pre(GEN x, GEN y, ulong p, ulong pi);
PARILIB_API GEN     Flv_neg(GEN v, ulong p);
PARILIB_API void    Flv_neg_inplace(GEN v, ulong p);
PARILIB_API GEN     Flv_sub(GEN x, GEN y, ulong p);
PARILIB_API void    Flv_sub_inplace(GEN x, GEN y, ulong p);
PARILIB_API ulong   Flv_sum(GEN x, ulong p);
PARILIB_API ulong   Flx_dotproduct(GEN x, GEN y, ulong p);
PARILIB_API GEN     Fp_to_mod(GEN z, GEN p);
PARILIB_API GEN     FpC_FpV_mul(GEN x, GEN y, GEN p);
PARILIB_API GEN     FpC_Fp_mul(GEN x, GEN y, GEN p);
PARILIB_API GEN     FpC_center(GEN z, GEN p, GEN pov2);
PARILIB_API void    FpC_center_inplace(GEN z, GEN p, GEN pov2);
PARILIB_API GEN     FpC_red(GEN z, GEN p);
PARILIB_API GEN     FpC_to_mod(GEN z, GEN p);
PARILIB_API GEN     FpM_add(GEN x, GEN y, GEN p);
PARILIB_API GEN     FpM_Fp_mul(GEN X, GEN c, GEN p);
PARILIB_API GEN     FpM_FpC_mul(GEN x, GEN y, GEN p);
PARILIB_API GEN     FpM_FpC_mul_FpX(GEN x, GEN y, GEN p, int64_t v);
PARILIB_API GEN     FpM_center(GEN z, GEN p, GEN pov2);
PARILIB_API void    FpM_center_inplace(GEN z, GEN p, GEN pov2);
PARILIB_API GEN     FpM_mul(GEN x, GEN y, GEN p);
PARILIB_API GEN     FpM_powu(GEN x, ulong n, GEN p);
PARILIB_API GEN     FpM_red(GEN z, GEN p);
PARILIB_API GEN     FpM_sub(GEN x, GEN y, GEN p);
PARILIB_API GEN     FpM_to_mod(GEN z, GEN p);
PARILIB_API GEN     FpMs_FpC_mul(GEN M, GEN B, GEN p);
PARILIB_API GEN     FpMs_FpCs_solve(GEN M, GEN B, int64_t nbrow, GEN p);
PARILIB_API GEN     FpMs_FpCs_solve_safe(GEN M, GEN A, int64_t nbrow, GEN p);
PARILIB_API GEN     FpMs_leftkernel_elt(GEN M, int64_t nbrow, GEN p);
PARILIB_API GEN     FpC_add(GEN x, GEN y, GEN p);
PARILIB_API GEN     FpC_sub(GEN x, GEN y, GEN p);
PARILIB_API GEN     FpV_FpMs_mul(GEN B, GEN M, GEN p);
PARILIB_API GEN     FpV_add(GEN x, GEN y, GEN p);
PARILIB_API GEN     FpV_sub(GEN x, GEN y, GEN p);
PARILIB_API GEN     FpV_dotproduct(GEN x, GEN y, GEN p);
PARILIB_API GEN     FpV_dotsquare(GEN x, GEN p);
PARILIB_API GEN     FpV_red(GEN z, GEN p);
PARILIB_API GEN     FpV_to_mod(GEN z, GEN p);
PARILIB_API GEN     FpVV_to_mod(GEN z, GEN p);
PARILIB_API GEN     FpX_to_mod(GEN z, GEN p);
PARILIB_API GEN     FpXC_to_mod(GEN x, GEN p);
PARILIB_API GEN     FpXM_to_mod(GEN x, GEN p);
PARILIB_API GEN     ZabM_ker(GEN M, GEN P, int64_t n);
PARILIB_API GEN     ZabM_indexrank(GEN M, GEN P, int64_t n);
PARILIB_API GEN     ZabM_inv(GEN M, GEN P, int64_t n, GEN *pden);
PARILIB_API GEN     ZabM_inv_ratlift(GEN M, GEN P, int64_t n, GEN *pden);
PARILIB_API GEN     ZabM_pseudoinv(GEN M, GEN P, int64_t n, GEN *pv, GEN *den);
PARILIB_API GEN     ZV_zMs_mul(GEN B, GEN M);
PARILIB_API GEN     ZpMs_ZpCs_solve(GEN M, GEN B, int64_t nbrow, GEN p, int64_t e);
PARILIB_API GEN     gen_FpM_Wiedemann(void *E, GEN (*f)(void*, GEN), GEN B, GEN p);
PARILIB_API GEN     gen_ZpM_Dixon_Wiedemann(void *E, GEN (*f)(void*, GEN), GEN B, GEN p, int64_t e);
PARILIB_API GEN     gen_matid(int64_t n, void *E, const struct bb_field *S);
PARILIB_API GEN     matid_Flm(int64_t n);
PARILIB_API GEN     matid_F2xqM(int64_t n, GEN T);
PARILIB_API GEN     matid_FlxqM(int64_t n, GEN T, ulong p);
PARILIB_API GEN     random_Flv(int64_t n, ulong p);
PARILIB_API GEN     random_FpC(int64_t d, GEN p);
PARILIB_API GEN     random_FpV(int64_t d, GEN p);
PARILIB_API GEN     scalar_Flm(int64_t s, int64_t n);
PARILIB_API GEN     zCs_to_ZC(GEN C, int64_t nbrow);
PARILIB_API GEN     zMs_to_ZM(GEN M, int64_t nbrow);
PARILIB_API GEN     zMs_ZC_mul(GEN M, GEN B);
PARILIB_API GEN     ZMV_to_FlmV(GEN z, ulong m);

/* Hensel.c */

PARILIB_API GEN     Flx_Teichmuller(GEN P, ulong p, int64_t n);
PARILIB_API GEN     Z2_sqrt(GEN x, int64_t e);
PARILIB_API GEN     Zp_sqrt(GEN x, GEN p, int64_t e);
PARILIB_API GEN     Zp_sqrtlift(GEN b, GEN a, GEN p, int64_t e);
PARILIB_API GEN     Zp_sqrtnlift(GEN b, GEN n, GEN a, GEN p, int64_t e);
PARILIB_API GEN     ZpM_invlift(GEN M, GEN C, GEN p, int64_t n);
PARILIB_API GEN     ZpX_Frobenius(GEN T, GEN p, int64_t e);
PARILIB_API GEN     ZpX_ZpXQ_liftroot(GEN P, GEN S, GEN T, GEN p, int64_t e);
PARILIB_API GEN     ZpX_ZpXQ_liftroot_ea(GEN P, GEN S, GEN T, GEN p, int64_t n, void *E,
                    GEN     early(void *E, GEN x, GEN q));
PARILIB_API GEN     ZpX_liftfact(GEN pol, GEN Q, GEN pe, GEN p, int64_t e);
PARILIB_API GEN     ZpX_liftroot(GEN f, GEN a, GEN p, int64_t e);
PARILIB_API GEN     ZpX_liftroots(GEN f, GEN S, GEN p, int64_t e);
PARILIB_API GEN     ZpX_roots(GEN f, GEN p, int64_t e);
PARILIB_API GEN     ZpXQ_div(GEN a, GEN b, GEN T, GEN q, GEN p, int64_t e);
PARILIB_API GEN     ZpXQ_inv(GEN a, GEN T, GEN p, int64_t e);
PARILIB_API GEN     ZpXQ_invlift(GEN b, GEN a, GEN T, GEN p, int64_t e);
PARILIB_API GEN     ZpXQ_log(GEN a, GEN T, GEN p, int64_t N);
PARILIB_API GEN     ZpXQ_sqrt(GEN a, GEN T, GEN p, int64_t e);
PARILIB_API GEN     ZpXQ_sqrtnlift(GEN b, GEN n, GEN a, GEN T, GEN p, int64_t e);
PARILIB_API GEN     ZpXQM_prodFrobenius(GEN M, GEN T, GEN p, int64_t e);
PARILIB_API GEN     ZpXQX_digits(GEN x, GEN B, GEN T, GEN q, GEN p, int64_t e);
PARILIB_API GEN     ZpXQX_divrem(GEN x, GEN S, GEN T, GEN q, GEN p, int64_t e, GEN *pr);
PARILIB_API GEN     ZpXQX_liftfact(GEN pol, GEN Q, GEN T, GEN pe, GEN p, int64_t e);
PARILIB_API GEN     ZpXQX_liftroot(GEN f, GEN a, GEN T, GEN p, int64_t e);
PARILIB_API GEN     ZpXQX_liftroot_vald(GEN f, GEN a, int64_t v, GEN T, GEN p, int64_t e);
PARILIB_API GEN     ZpXQX_liftroots(GEN f, GEN S, GEN T, GEN p, int64_t e);
PARILIB_API GEN     ZpXQX_roots(GEN F, GEN T, GEN p, int64_t e);
PARILIB_API GEN     Zq_sqrtnlift(GEN a, GEN n, GEN x, GEN T, GEN p, int64_t e);
PARILIB_API GEN     ZqX_liftfact(GEN pol, GEN Q, GEN T, GEN pe, GEN p, int64_t e);
PARILIB_API GEN     ZqX_liftroot(GEN f, GEN a, GEN T, GEN p, int64_t e);
PARILIB_API GEN     ZqX_roots(GEN F, GEN T, GEN p, int64_t e);
PARILIB_API GEN     gen_ZpM_Dixon(GEN F, GEN V, GEN q, GEN p, int64_t N, void *E,
                             GEN lin(void *E, GEN F, GEN d, GEN q),
                             GEN invl(void *E, GEN d));
PARILIB_API GEN     gen_ZpM_Newton(GEN x, GEN p, int64_t n, void *E,
                             GEN eval(void* E, GEN f, GEN q),
                             GEN invd(void *E, GEN V, GEN v, GEN q, int64_t M));
PARILIB_API GEN     gen_ZpX_Dixon(GEN F, GEN V, GEN q, GEN p, int64_t N, void *E,
                             GEN lin(void *E, GEN F, GEN d, GEN q),
                              GEN invl(void *E, GEN d));
PARILIB_API GEN     gen_ZpX_Newton(GEN x, GEN p, int64_t n, void *E,
                              GEN eval(void *E, GEN f, GEN q),
                              GEN invd(void *E, GEN V, GEN v, GEN q, int64_t M));
PARILIB_API GEN     polteichmuller(GEN P, ulong p, int64_t n);
PARILIB_API GEN     polhensellift(GEN pol, GEN fct, GEN p, int64_t exp);
PARILIB_API ulong   quadratic_prec_mask(int64_t n);

/* QX_factor.c */

PARILIB_API GEN     QX_factor(GEN x);
PARILIB_API GEN     ZX_factor(GEN x);
PARILIB_API int64_t    ZX_is_irred(GEN x);
PARILIB_API GEN     ZX_squff(GEN f, GEN *ex);
PARILIB_API GEN     polcyclofactors(GEN f);
PARILIB_API int64_t    poliscyclo(GEN f);
PARILIB_API int64_t    poliscycloprod(GEN f);


/* RgV.c */

PARILIB_API GEN     Rg_RgC_sub(GEN a, GEN x);
PARILIB_API GEN     RgC_Rg_add(GEN x, GEN y);
PARILIB_API GEN     RgC_Rg_div(GEN x, GEN y);
PARILIB_API GEN     RgC_Rg_mul(GEN x, GEN y);
PARILIB_API GEN     RgC_Rg_sub(GEN x, GEN y);
PARILIB_API GEN     RgC_RgM_mul(GEN x, GEN y);
PARILIB_API GEN     RgC_RgV_mul(GEN x, GEN y);
PARILIB_API GEN     RgC_add(GEN x, GEN y);
PARILIB_API int64_t    RgC_is_ei(GEN x);
PARILIB_API GEN     RgC_neg(GEN x);
PARILIB_API GEN     RgC_sub(GEN x, GEN y);
PARILIB_API GEN     RgM_Rg_add(GEN x, GEN y);
PARILIB_API GEN     RgM_Rg_add_shallow(GEN x, GEN y);
PARILIB_API GEN     RgM_Rg_div(GEN x, GEN y);
PARILIB_API GEN     RgM_Rg_mul(GEN x, GEN y);
PARILIB_API GEN     RgM_Rg_sub(GEN x, GEN y);
PARILIB_API GEN     RgM_Rg_sub_shallow(GEN x, GEN y);
PARILIB_API GEN     RgM_RgC_mul(GEN x, GEN y);
PARILIB_API GEN     RgM_RgV_mul(GEN x, GEN y);
PARILIB_API GEN     RgM_ZM_mul(GEN x, GEN y);
PARILIB_API GEN     RgM_add(GEN x, GEN y);
PARILIB_API GEN     RgM_det_triangular(GEN x);
PARILIB_API int     RgM_is_QM(GEN x);
PARILIB_API int     RgM_is_ZM(GEN x);
PARILIB_API int     RgM_isdiagonal(GEN x);
PARILIB_API int     RgM_isidentity(GEN x);
PARILIB_API int     RgM_isscalar(GEN x, GEN s);
PARILIB_API GEN     RgM_mul(GEN x, GEN y);
PARILIB_API GEN     RgM_multosym(GEN x, GEN y);
PARILIB_API GEN     RgM_neg(GEN x);
PARILIB_API GEN     RgM_powers(GEN x, int64_t l);
PARILIB_API GEN     RgM_sqr(GEN x);
PARILIB_API GEN     RgM_sub(GEN x, GEN y);
PARILIB_API GEN     RgM_sumcol(GEN A);
PARILIB_API GEN     RgM_transmul(GEN x, GEN y);
PARILIB_API GEN     RgM_transmultosym(GEN x, GEN y);
PARILIB_API GEN     RgMrow_zc_mul(GEN x, GEN y, int64_t i);
PARILIB_API GEN     RgM_zc_mul(GEN x, GEN y);
PARILIB_API GEN     RgM_zm_mul(GEN x, GEN y);
PARILIB_API GEN     RgMrow_RgC_mul(GEN x, GEN y, int64_t i);
PARILIB_API GEN     RgV_RgM_mul(GEN x, GEN y);
PARILIB_API GEN     RgV_RgC_mul(GEN x, GEN y);
PARILIB_API GEN     RgV_Rg_mul(GEN x, GEN y);
PARILIB_API GEN     RgV_add(GEN x, GEN y);
PARILIB_API GEN     RgV_dotproduct(GEN x, GEN y);
PARILIB_API GEN     RgV_dotsquare(GEN x);
PARILIB_API int     RgV_is_ZMV(GEN V);
PARILIB_API GEN     RgV_kill0(GEN v);
PARILIB_API GEN     RgV_neg(GEN x);
PARILIB_API GEN     RgV_prod(GEN v);
PARILIB_API GEN     RgV_sub(GEN x, GEN y);
PARILIB_API GEN     RgV_sum(GEN v);
PARILIB_API GEN     RgV_sumpart(GEN v, int64_t n);
PARILIB_API GEN     RgV_sumpart2(GEN v, int64_t m, int64_t n);
PARILIB_API GEN     RgV_zc_mul(GEN x, GEN y);
PARILIB_API GEN     RgV_zm_mul(GEN x, GEN y);
PARILIB_API GEN     RgX_RgM_eval(GEN x, GEN y);
PARILIB_API GEN     RgX_RgMV_eval(GEN x, GEN y);
PARILIB_API int     isdiagonal(GEN x);
PARILIB_API GEN     matid(int64_t n);
PARILIB_API GEN     scalarcol(GEN x, int64_t n);
PARILIB_API GEN     scalarcol_shallow(GEN x, int64_t n);
PARILIB_API GEN     scalarmat(GEN x, int64_t n);
PARILIB_API GEN     scalarmat_shallow(GEN x, int64_t n);
PARILIB_API GEN     scalarmat_s(int64_t x, int64_t n);

/* RgX.c */

PARILIB_API GEN     Kronecker_to_mod(GEN z, GEN pol);
PARILIB_API GEN     QX_ZXQV_eval(GEN P, GEN V, GEN dV);
PARILIB_API GEN     QXQ_charpoly(GEN A, GEN T, int64_t v);
PARILIB_API GEN     QXQ_powers(GEN a, int64_t n, GEN T);
PARILIB_API GEN     QXQ_to_mod_shallow(GEN x, GEN T);
PARILIB_API GEN     QXQC_to_mod_shallow(GEN V, GEN T);
PARILIB_API GEN     QXQM_to_mod_shallow(GEN V, GEN T);
PARILIB_API GEN     QXQV_to_mod(GEN V, GEN T);
PARILIB_API GEN     QXQX_to_mod_shallow(GEN z, GEN T);
PARILIB_API GEN     QXQXV_to_mod(GEN V, GEN T);
PARILIB_API GEN     QXV_QXQ_eval(GEN v, GEN a, GEN T);
PARILIB_API GEN     QXX_QXQ_eval(GEN v, GEN a, GEN T);
PARILIB_API GEN     Rg_RgX_sub(GEN x, GEN y);
PARILIB_API GEN     Rg_get_0(GEN x);
PARILIB_API GEN     Rg_get_1(GEN x);
PARILIB_API GEN     Rg_to_RgC(GEN x, int64_t N);
PARILIB_API GEN     RgM_to_RgXV(GEN x, int64_t v);
PARILIB_API GEN     RgM_to_RgXX(GEN x, int64_t v,int64_t w);
PARILIB_API GEN     RgV_to_RgX(GEN x, int64_t v);
PARILIB_API GEN     RgV_to_RgM(GEN v, int64_t n);
PARILIB_API GEN     RgV_to_RgX_reverse(GEN x, int64_t v);
PARILIB_API GEN     RgX_RgXQ_eval(GEN f, GEN x, GEN T);
PARILIB_API GEN     RgX_RgXQV_eval(GEN P, GEN V, GEN T);
PARILIB_API GEN     RgX_RgXn_eval(GEN Q, GEN x, int64_t n);
PARILIB_API GEN     RgX_RgXnV_eval(GEN Q, GEN x, int64_t n);
PARILIB_API GEN     RgX_Rg_add(GEN y, GEN x);
PARILIB_API GEN     RgX_Rg_add_shallow(GEN y, GEN x);
PARILIB_API GEN     RgX_Rg_div(GEN y, GEN x);
PARILIB_API GEN     RgX_Rg_divexact(GEN x, GEN y);
PARILIB_API GEN     RgX_Rg_eval_bk(GEN Q, GEN x);
PARILIB_API GEN     RgX_Rg_mul(GEN y, GEN x);
PARILIB_API GEN     RgX_Rg_sub(GEN y, GEN x);
PARILIB_API GEN     RgX_RgV_eval(GEN Q, GEN x);
PARILIB_API GEN     RgX_add(GEN x, GEN y);
PARILIB_API GEN     RgX_addmulXn_shallow(GEN x, GEN y, int64_t d);
PARILIB_API GEN     RgX_addmulXn(GEN x, GEN y, int64_t d);
PARILIB_API GEN     RgX_addspec(GEN x, GEN y, int64_t nx, int64_t ny);
PARILIB_API GEN     RgX_addspec_shallow(GEN x, GEN y, int64_t nx, int64_t ny);
PARILIB_API GEN     RgX_blocks(GEN P, int64_t n, int64_t m);
PARILIB_API GEN     RgX_deflate(GEN x0, int64_t d);
PARILIB_API GEN     RgX_deriv(GEN x);
PARILIB_API GEN     RgX_digits(GEN A, GEN B);
PARILIB_API GEN     RgX_div_by_X_x(GEN a, GEN x, GEN *r);
PARILIB_API GEN     RgX_divrem(GEN x,GEN y,GEN *r);
PARILIB_API GEN     RgX_divs(GEN y, int64_t x);
PARILIB_API int64_t    RgX_equal(GEN x, GEN y);
PARILIB_API void    RgX_even_odd(GEN p, GEN *pe, GEN *po);
PARILIB_API GEN     RgX_inflate(GEN x0, int64_t d);
PARILIB_API GEN     RgX_mul(GEN x,GEN y);
PARILIB_API GEN     RgX_mul_i(GEN x,GEN y);
PARILIB_API GEN     RgX_mul_normalized(GEN A, int64_t a, GEN B, int64_t b);
PARILIB_API GEN     RgX_mulXn(GEN x, int64_t d);
PARILIB_API GEN     RgX_mulhigh_i(GEN f, GEN g, int64_t n);
PARILIB_API GEN     RgX_muls(GEN y, int64_t x);
PARILIB_API GEN     RgX_mulspec(GEN a, GEN b, int64_t na, int64_t nb);
PARILIB_API GEN     RgX_neg(GEN x);
PARILIB_API GEN     RgX_normalize(GEN x);
PARILIB_API GEN     RgX_pseudodivrem(GEN x, GEN y, GEN *ptr);
PARILIB_API GEN     RgX_pseudorem(GEN x, GEN y);
PARILIB_API GEN     RgX_recip(GEN x);
PARILIB_API GEN     RgX_recip_shallow(GEN x);
PARILIB_API GEN     RgX_rem(GEN x, GEN y);
PARILIB_API GEN     RgX_renormalize_lg(GEN x, int64_t lx);
PARILIB_API GEN     RgX_rescale(GEN P, GEN h);
PARILIB_API GEN     RgX_rotate_shallow(GEN P, int64_t k, int64_t p);
PARILIB_API GEN     RgX_shift(GEN a, int64_t n);
PARILIB_API GEN     RgX_shift_shallow(GEN x, int64_t n);
PARILIB_API GEN     RgX_splitting(GEN p, int64_t k);
PARILIB_API GEN     RgX_sqr(GEN x);
PARILIB_API GEN     RgX_sqr_i(GEN x);
PARILIB_API GEN     RgX_sqrhigh_i(GEN f, int64_t n);
PARILIB_API GEN     RgX_sqrspec(GEN a, int64_t na);
PARILIB_API GEN     RgX_sub(GEN x, GEN y);
PARILIB_API GEN     RgX_to_RgC(GEN x, int64_t N);
PARILIB_API GEN     RgX_translate(GEN P, GEN c);
PARILIB_API GEN     RgX_unscale(GEN P, GEN h);
PARILIB_API GEN     RgXQ_matrix_pow(GEN y, int64_t n, int64_t m, GEN P);
PARILIB_API GEN     RgXQ_norm(GEN x, GEN T);
PARILIB_API GEN     RgXQ_pow(GEN x, GEN n, GEN T);
PARILIB_API GEN     RgXQ_powers(GEN x, int64_t l, GEN T);
PARILIB_API GEN     RgXQ_powu(GEN x, ulong n, GEN T);
PARILIB_API GEN     RgXQC_red(GEN P, GEN T);
PARILIB_API GEN     RgXQM_mul(GEN P, GEN Q, GEN T);
PARILIB_API GEN     RgXQM_red(GEN P, GEN T);
PARILIB_API GEN     RgXQV_RgXQ_mul(GEN v, GEN x, GEN T);
PARILIB_API GEN     RgXQV_red(GEN P, GEN T);
PARILIB_API GEN     RgXQX_RgXQ_mul(GEN x, GEN y, GEN T);
PARILIB_API GEN     RgXQX_divrem(GEN x,GEN y,GEN T,GEN *r);
PARILIB_API GEN     RgXQX_mul(GEN x,GEN y,GEN T);
PARILIB_API GEN     RgXQX_powers(GEN P, int64_t n, GEN T);
PARILIB_API GEN     RgXQX_pseudodivrem(GEN x, GEN y, GEN T, GEN *ptr);
PARILIB_API GEN     RgXQX_pseudorem(GEN x, GEN y, GEN T);
PARILIB_API GEN     RgXQX_red(GEN P, GEN T);
PARILIB_API GEN     RgXQX_sqr(GEN x, GEN T);
PARILIB_API GEN     RgXQX_translate(GEN P, GEN c, GEN T);
PARILIB_API GEN     RgXV_RgV_eval(GEN Q, GEN x);
PARILIB_API GEN     RgXV_to_RgM(GEN v, int64_t n);
PARILIB_API GEN     RgXV_unscale(GEN v, GEN h);
PARILIB_API GEN     RgXX_to_RgM(GEN v, int64_t n);
PARILIB_API int64_t    RgXY_degreex(GEN bpol);
PARILIB_API GEN     RgXY_swap(GEN x, int64_t n, int64_t w);
PARILIB_API GEN     RgXY_swapspec(GEN x, int64_t n, int64_t w, int64_t nx);
PARILIB_API GEN     RgXn_eval(GEN Q, GEN x, int64_t n);
PARILIB_API GEN     RgXn_exp(GEN f, int64_t e);
PARILIB_API GEN     RgXn_expint(GEN f, int64_t e);
PARILIB_API GEN     RgXn_inv(GEN f, int64_t e);
PARILIB_API GEN     RgXn_inv_i(GEN f, int64_t e);
PARILIB_API GEN     RgXn_mul(GEN f, GEN g, int64_t n);
PARILIB_API GEN     RgXn_powers(GEN f, int64_t m, int64_t n);
PARILIB_API GEN     RgXn_recip_shallow(GEN P, int64_t n);
PARILIB_API GEN     RgXn_red_shallow(GEN a, int64_t n);
PARILIB_API GEN     RgXn_reverse(GEN f, int64_t e);
PARILIB_API GEN     RgXn_sqr(GEN f, int64_t n);
PARILIB_API GEN     RgXn_sqrt(GEN f, int64_t n);
PARILIB_API GEN     RgXnV_red_shallow(GEN P, int64_t n);
PARILIB_API GEN     RgXn_powu(GEN x, ulong m, int64_t n);
PARILIB_API GEN     RgXn_powu_i(GEN x, ulong m, int64_t n);
PARILIB_API GEN     ZX_translate(GEN P, GEN c);
PARILIB_API GEN     ZX_unscale2n(GEN P, int64_t n);
PARILIB_API GEN     ZX_unscale(GEN P, GEN h);
PARILIB_API GEN     ZX_unscale_div(GEN P, GEN h);
PARILIB_API GEN     ZX_z_unscale(GEN P, int64_t h);
PARILIB_API GEN     ZXQ_powers(GEN x, int64_t l, GEN T);
PARILIB_API GEN     ZXQ_powu(GEN x, ulong n, GEN T);
PARILIB_API int     ZXQX_dvd(GEN x, GEN y, GEN T);
PARILIB_API int64_t    brent_kung_optpow(int64_t d, int64_t n, int64_t m);
PARILIB_API GEN     gen_bkeval(GEN Q, int64_t d, GEN x, int use_sqr, void *E,
          const struct bb_algebra *ff, GEN cmul(void *E, GEN P, int64_t a, GEN x));
PARILIB_API GEN     gen_bkeval_powers(GEN P, int64_t d, GEN V, void *E,
           const struct bb_algebra *ff, GEN cmul(void *E, GEN P, int64_t a, GEN x));
PARILIB_API const struct bb_algebra * get_Rg_algebra(void);
PARILIB_API int64_t    rfrac_deflate_order(GEN F);
PARILIB_API GEN     rfrac_deflate_max(GEN F, int64_t *m);
PARILIB_API GEN     rfrac_deflate(GEN F, int64_t m);

/* ZG.c */
PARILIB_API void    ZGC_G_mul_inplace(GEN v, GEN x);
PARILIB_API GEN     ZGCs_add(GEN x, GEN y);
PARILIB_API GEN     G_ZGC_mul(GEN x, GEN v);
PARILIB_API GEN     G_ZG_mul(GEN x, GEN y);
PARILIB_API GEN     ZGC_G_mul(GEN v, GEN x);
PARILIB_API GEN     ZGC_Z_mul(GEN v, GEN x);
PARILIB_API GEN     ZG_G_mul(GEN x, GEN y);
PARILIB_API GEN     ZG_Z_mul(GEN x, GEN c);
PARILIB_API GEN     ZG_add(GEN x, GEN y);
PARILIB_API GEN     ZG_mul(GEN x, GEN y);
PARILIB_API GEN     ZG_neg(GEN x);
PARILIB_API GEN     ZG_normalize(GEN x);
PARILIB_API GEN     ZG_sub(GEN x, GEN y);

/* ZV.c */

PARILIB_API void    Flc_lincomb1_inplace(GEN X, GEN Y, ulong v, ulong q);
PARILIB_API GEN     vecsmall_prod(GEN v);
PARILIB_API GEN     QM_QC_mul(GEN x, GEN y);
PARILIB_API GEN     QM_det(GEN x);
PARILIB_API GEN     QM_ker(GEN M);
PARILIB_API GEN     QM_mul(GEN x, GEN y);
PARILIB_API GEN     QM_sqr(GEN x);
PARILIB_API void    RgM_check_ZM(GEN A, const char *s);
PARILIB_API void    RgV_check_ZV(GEN A, const char *s);
PARILIB_API GEN     Z_ZC_sub(GEN a, GEN x);
PARILIB_API GEN     ZV_zc_mul(GEN x, GEN y);
PARILIB_API GEN     ZC_Q_mul(GEN A, GEN z);
PARILIB_API GEN     ZC_Z_add(GEN x, GEN y);
PARILIB_API GEN     ZC_Z_div(GEN x, GEN c);
PARILIB_API GEN     ZC_Z_divexact(GEN X, GEN c);
PARILIB_API GEN     ZC_Z_mul(GEN X, GEN c);
PARILIB_API GEN     ZC_Z_sub(GEN x, GEN y);
PARILIB_API GEN     ZC_ZV_mul(GEN x, GEN y);
PARILIB_API GEN     ZC_u_divexact(GEN x, ulong c);
PARILIB_API GEN     ZC_add(GEN x, GEN y);
PARILIB_API GEN     ZC_copy(GEN x);
PARILIB_API GEN     ZC_hnfremdiv(GEN x, GEN y, GEN *Q);
PARILIB_API int64_t    ZC_is_ei(GEN x);
PARILIB_API GEN     ZC_lincomb(GEN u, GEN v, GEN X, GEN Y);
PARILIB_API void    ZC_lincomb1_inplace(GEN X, GEN Y, GEN v);
PARILIB_API void    ZC_lincomb1_inplace_i(GEN X, GEN Y, GEN v, int64_t n);
PARILIB_API GEN     ZC_neg(GEN M);
PARILIB_API GEN     ZC_reducemodlll(GEN x,GEN y);
PARILIB_API GEN     ZC_reducemodmatrix(GEN v, GEN y);
PARILIB_API GEN     ZC_sub(GEN x, GEN y);
PARILIB_API GEN     ZC_z_mul(GEN X, int64_t c);
PARILIB_API GEN     ZM_Q_mul(GEN A, GEN z);
PARILIB_API GEN     ZM_ZC_mul(GEN x, GEN y);
PARILIB_API GEN     ZM_Z_div(GEN X, GEN c);
PARILIB_API GEN     ZM_Z_divexact(GEN X, GEN c);
PARILIB_API GEN     ZM_Z_mul(GEN X, GEN c);
PARILIB_API GEN     ZM_add(GEN x, GEN y);
PARILIB_API GEN     ZM_copy(GEN x);
PARILIB_API GEN     ZM_det_triangular(GEN mat);
PARILIB_API GEN     ZM_diag_mul(GEN m, GEN d);
PARILIB_API int     ZM_equal(GEN A, GEN B);
PARILIB_API int     ZM_equal0(GEN A);
PARILIB_API GEN     ZM_hnfdivrem(GEN x, GEN y, GEN *Q);
PARILIB_API int     ZM_ishnf(GEN x);
PARILIB_API int     ZM_isdiagonal(GEN x);
PARILIB_API int     ZM_isidentity(GEN x);
PARILIB_API int     ZM_isscalar(GEN x, GEN s);
PARILIB_API int64_t    ZM_max_lg(GEN x);
PARILIB_API GEN     ZM_mul(GEN x, GEN y);
PARILIB_API GEN     ZM_mul_diag(GEN m, GEN d);
PARILIB_API GEN     ZM_multosym(GEN x, GEN y);
PARILIB_API GEN     ZM_neg(GEN x);
PARILIB_API GEN     ZM_nm_mul(GEN x, GEN y);
PARILIB_API GEN     ZM_pow(GEN x, GEN n);
PARILIB_API GEN     ZM_powu(GEN x, ulong n);
PARILIB_API GEN     ZM_reducemodlll(GEN x,GEN y);
PARILIB_API GEN     ZM_reducemodmatrix(GEN v, GEN y);
PARILIB_API GEN     ZM_sqr(GEN x);
PARILIB_API GEN     ZM_sub(GEN x, GEN y);
PARILIB_API GEN     ZM_supnorm(GEN x);
PARILIB_API GEN     ZM_to_Flm(GEN x, ulong p);
PARILIB_API GEN     ZM_to_zm(GEN z);
PARILIB_API GEN     ZM_transmul(GEN x, GEN y);
PARILIB_API GEN     ZM_transmultosym(GEN x, GEN y);
PARILIB_API GEN     ZMV_to_zmV(GEN z);
PARILIB_API void    ZM_togglesign(GEN M);
PARILIB_API GEN     ZM_zc_mul(GEN x, GEN y);
PARILIB_API GEN     ZM_zm_mul(GEN x, GEN y);
PARILIB_API GEN     ZMrow_ZC_mul(GEN x, GEN y, int64_t i);
PARILIB_API int     ZMrow_equal0(GEN V, int64_t i);
PARILIB_API GEN     ZV_ZM_mul(GEN x, GEN y);
PARILIB_API int     ZV_abscmp(GEN x, GEN y);
PARILIB_API int     ZV_cmp(GEN x, GEN y);
PARILIB_API GEN     ZV_content(GEN x);
PARILIB_API GEN     ZV_dotproduct(GEN x,GEN y);
PARILIB_API GEN     ZV_dotsquare(GEN x);
PARILIB_API int     ZV_equal(GEN V, GEN W);
PARILIB_API int     ZV_equal0(GEN V);
PARILIB_API int64_t    ZV_max_lg(GEN x);
PARILIB_API void    ZV_neg_inplace(GEN M);
PARILIB_API GEN     ZV_prod(GEN v);
PARILIB_API GEN     ZV_sum(GEN v);
PARILIB_API GEN     ZV_to_Flv(GEN x, ulong p);
PARILIB_API GEN     ZV_to_nv(GEN z);
PARILIB_API void    ZV_togglesign(GEN M);
PARILIB_API GEN     gram_matrix(GEN M);
PARILIB_API GEN     nm_Z_mul(GEN X, GEN c);
PARILIB_API GEN     zm_mul(GEN x, GEN y);
PARILIB_API GEN     zm_to_Flm(GEN z, ulong p);
PARILIB_API GEN     zm_to_ZM(GEN z);
PARILIB_API GEN     zm_zc_mul(GEN x, GEN y);
PARILIB_API GEN     zmV_to_ZMV(GEN z);
PARILIB_API int64_t    zv_content(GEN x);
PARILIB_API int64_t    zv_dotproduct(GEN x, GEN y);
PARILIB_API int     zv_equal(GEN V, GEN W);
PARILIB_API int     zv_equal0(GEN V);
PARILIB_API GEN     zv_neg(GEN x);
PARILIB_API GEN     zv_neg_inplace(GEN M);
PARILIB_API int64_t    zv_prod(GEN v);
PARILIB_API GEN     zv_prod_Z(GEN v);
PARILIB_API int64_t    zv_sum(GEN v);
PARILIB_API int64_t    zv_sumpart(GEN v, int64_t n);
PARILIB_API GEN     zv_to_Flv(GEN z, ulong p);
PARILIB_API GEN     zv_z_mul(GEN v, int64_t n);
PARILIB_API GEN     zv_ZM_mul(GEN x, GEN y);
PARILIB_API int     zvV_equal(GEN V, GEN W);

/* ZX.c */

PARILIB_API GEN     Kronecker_to_ZXQX(GEN z, GEN T);
PARILIB_API GEN     Kronecker_to_ZXX(GEN z, int64_t N, int64_t v);
PARILIB_API GEN     QX_ZX_rem(GEN x, GEN y);
PARILIB_API GEN     QX_mul(GEN x, GEN y);
PARILIB_API GEN     QX_sqr(GEN x);
PARILIB_API GEN     QXQM_mul(GEN x, GEN y, GEN T);
PARILIB_API GEN     QXQM_sqr(GEN x, GEN T);
PARILIB_API GEN     QXQX_QXQ_mul(GEN P, GEN U, GEN T);
PARILIB_API GEN     QXQX_mul(GEN x, GEN y, GEN T);
PARILIB_API GEN     QXQX_powers(GEN P, int64_t n, GEN T);
PARILIB_API GEN     QXQX_sqr(GEN x, GEN T);
PARILIB_API void    RgX_check_QX(GEN x, const char *s);
PARILIB_API void    RgX_check_ZX(GEN x, const char *s);
PARILIB_API void    RgX_check_ZXX(GEN x, const char *s);
PARILIB_API GEN     Z_ZX_sub(GEN x, GEN y);
PARILIB_API GEN     ZX_Z_add(GEN y,GEN x);
PARILIB_API GEN     ZX_Z_add_shallow(GEN y, GEN x);
PARILIB_API GEN     ZX_Z_divexact(GEN y,GEN x);
PARILIB_API GEN     ZX_Z_mul(GEN y,GEN x);
PARILIB_API GEN     ZX_Z_sub(GEN y, GEN x);
PARILIB_API GEN     ZX_add(GEN x, GEN y);
PARILIB_API GEN     ZX_copy(GEN x);
PARILIB_API GEN     ZX_deriv(GEN x);
PARILIB_API GEN     ZX_div_by_X_1(GEN a, GEN *r);
PARILIB_API GEN     ZX_divuexact(GEN y, ulong x);
PARILIB_API int     ZX_equal(GEN V, GEN W);
PARILIB_API GEN     ZX_eval1(GEN x);
PARILIB_API int64_t    ZX_max_lg(GEN x);
PARILIB_API GEN     ZX_mod_Xnm1(GEN T, ulong n);
PARILIB_API GEN     ZX_mul(GEN x, GEN y);
PARILIB_API GEN     ZX_mulspec(GEN a, GEN b, int64_t na, int64_t nb);
PARILIB_API GEN     ZX_mulu(GEN y, ulong x);
PARILIB_API GEN     ZX_neg(GEN x);
PARILIB_API GEN     ZX_rem(GEN x, GEN y);
PARILIB_API GEN     ZX_remi2n(GEN y, int64_t n);
PARILIB_API GEN     ZX_rescale2n(GEN P, int64_t n);
PARILIB_API GEN     ZX_rescale(GEN P, GEN h);
PARILIB_API GEN     ZX_rescale_lt(GEN P);
PARILIB_API GEN     ZX_shifti(GEN x, int64_t n);
PARILIB_API GEN     ZX_sqr(GEN x);
PARILIB_API GEN     ZX_sqrspec(GEN a, int64_t na);
PARILIB_API GEN     ZX_sub(GEN x, GEN y);
PARILIB_API int64_t    ZX_val(GEN x);
PARILIB_API int64_t    ZX_valrem(GEN x, GEN *Z);
PARILIB_API GEN     ZXQM_mul(GEN x, GEN y, GEN T);
PARILIB_API GEN     ZXQM_sqr(GEN x, GEN T);
PARILIB_API GEN     ZXQX_ZXQ_mul(GEN P, GEN U, GEN T);
PARILIB_API GEN     ZXQX_sqr(GEN x, GEN T);
PARILIB_API GEN     ZXQX_mul(GEN x, GEN y, GEN T);
PARILIB_API GEN     ZXT_remi2n(GEN z, int64_t n);
PARILIB_API GEN     ZXV_Z_mul(GEN y, GEN x);
PARILIB_API GEN     ZXV_dotproduct(GEN V, GEN W);
PARILIB_API int     ZXV_equal(GEN V, GEN W);
PARILIB_API GEN     ZXV_remi2n(GEN x, int64_t n);
PARILIB_API GEN     ZXX_Z_divexact(GEN y, GEN x);
PARILIB_API GEN     ZXX_Z_mul(GEN y, GEN x);
PARILIB_API GEN     ZXX_Z_add_shallow(GEN x, GEN y);
PARILIB_API GEN     ZXX_evalx0(GEN y);
PARILIB_API int64_t    ZXX_max_lg(GEN x);
PARILIB_API GEN     ZXX_mul_Kronecker(GEN x, GEN y, int64_t n);
PARILIB_API GEN     ZXX_renormalize(GEN x, int64_t lx);
PARILIB_API GEN     ZXX_sqr_Kronecker(GEN x, int64_t n);
PARILIB_API GEN     ZXX_to_Kronecker(GEN P, int64_t n);
PARILIB_API GEN     ZXX_to_Kronecker_spec(GEN P, int64_t lP, int64_t n);
PARILIB_API GEN     ZXn_mul(GEN x, GEN y, int64_t n);
PARILIB_API GEN     ZXn_sqr(GEN x, int64_t n);
PARILIB_API GEN     scalar_ZX(GEN x, int64_t v);
PARILIB_API GEN     scalar_ZX_shallow(GEN x, int64_t v);
PARILIB_API GEN     zx_to_ZX(GEN z);
PARILIB_API GEN     zx_z_divexact(GEN y, int64_t x);

/* algebras.c */

PARILIB_API GEN     alg_centralproj(GEN al, GEN z, int64_t maps);
PARILIB_API GEN     alg_changeorder(GEN al, GEN ord);
PARILIB_API GEN     alg_complete(GEN rnf, GEN aut, GEN hi, GEN hf, int64_t maxord);
PARILIB_API GEN     alg_csa_table(GEN nf, GEN mt, int64_t v, int64_t maxord);
PARILIB_API GEN     alg_cyclic(GEN rnf, GEN aut, GEN b, int64_t maxord);
PARILIB_API int64_t    alg_get_absdim(GEN al);
PARILIB_API GEN     alg_get_abssplitting(GEN al);
PARILIB_API GEN     alg_get_aut(GEN al);
PARILIB_API GEN     algaut(GEN al);
PARILIB_API GEN     alg_get_auts(GEN al);
PARILIB_API GEN     alg_get_b(GEN al);
PARILIB_API GEN     algb(GEN al);
PARILIB_API GEN     algcenter(GEN al);
PARILIB_API GEN     alg_get_center(GEN al);
PARILIB_API GEN     alg_get_char(GEN al);
PARILIB_API GEN     algchar(GEN al);
PARILIB_API int64_t    alg_get_degree(GEN al);
PARILIB_API int64_t    algdegree(GEN al);
PARILIB_API int64_t    alg_get_dim(GEN al);
PARILIB_API int64_t    algdim(GEN al, int64_t abs);
PARILIB_API GEN     alg_get_hasse_f(GEN al);
PARILIB_API GEN     alghassef(GEN al);
PARILIB_API GEN     alg_get_hasse_i(GEN al);
PARILIB_API GEN     alghassei(GEN al);
PARILIB_API GEN     alg_get_invbasis(GEN al);
PARILIB_API GEN     alginvbasis(GEN al);
PARILIB_API GEN     alg_get_multable(GEN al);
PARILIB_API GEN     alg_get_basis(GEN al);
PARILIB_API GEN     algbasis(GEN al);
PARILIB_API GEN     alg_get_relmultable(GEN al);
PARILIB_API GEN     algrelmultable(GEN al);
PARILIB_API GEN     alg_get_splitpol(GEN al);
PARILIB_API GEN     alg_get_splittingfield(GEN al);
PARILIB_API GEN     algsplittingfield(GEN al);
PARILIB_API GEN     alg_get_splittingbasis(GEN al);
PARILIB_API GEN     alg_get_splittingbasisinv(GEN al);
PARILIB_API GEN     alg_get_splittingdata(GEN al);
PARILIB_API GEN     algsplittingdata(GEN al);
PARILIB_API GEN     alg_get_tracebasis(GEN al);
PARILIB_API GEN     alg_hasse(GEN nf, int64_t n, GEN hi, GEN hf, int64_t var, int64_t maxord);
PARILIB_API GEN     alg_hilbert(GEN nf, GEN a, GEN b, int64_t v, int64_t maxord);
PARILIB_API GEN     alg_matrix(GEN nf, int64_t n, int64_t v, GEN L, int64_t maxord);
PARILIB_API int64_t    alg_model(GEN al, GEN x);
PARILIB_API GEN     alg_quotient(GEN al, GEN I, int64_t maps);
PARILIB_API GEN     algradical(GEN al);
PARILIB_API GEN     algsimpledec(GEN al, int64_t maps);
PARILIB_API GEN     algsimpledec_ss(GEN al, int64_t maps);
PARILIB_API GEN     algsubalg(GEN al, GEN basis);
PARILIB_API int64_t    alg_type(GEN al);
PARILIB_API GEN     algadd(GEN al, GEN x, GEN y);
PARILIB_API GEN     algalgtobasis(GEN al, GEN x);
PARILIB_API GEN     algbasistoalg(GEN al, GEN x);
PARILIB_API GEN     algcharpoly(GEN al, GEN x, int64_t v, int64_t abs);
PARILIB_API GEN     algdisc(GEN al);
PARILIB_API GEN     algdivl(GEN al, GEN x, GEN y);
PARILIB_API GEN     algdivr(GEN al, GEN x, GEN y);
PARILIB_API GEN     alggroup(GEN gal, GEN p);
PARILIB_API GEN     alggroupcenter(GEN gal, GEN p, GEN* ptr_conjclasses);
PARILIB_API GEN     alghasse(GEN al, GEN pl);
PARILIB_API GEN     alginit(GEN A, GEN B, int64_t v, int64_t maxord);
PARILIB_API int64_t    algindex(GEN al, GEN pl);
PARILIB_API GEN     alginv(GEN al, GEN x);
PARILIB_API int     algisassociative(GEN mt0, GEN p);
PARILIB_API int     algiscommutative(GEN al);
PARILIB_API int     algisdivision(GEN al, GEN pl);
PARILIB_API int     algisramified(GEN al, GEN pl);
PARILIB_API int     algissemisimple(GEN al);
PARILIB_API int     algissimple(GEN al, int64_t ss);
PARILIB_API int     algissplit(GEN al, GEN pl);
PARILIB_API int     algisdivl(GEN al, GEN x, GEN y, GEN* ptz);
PARILIB_API int     algisinv(GEN al, GEN x, GEN* ptix);
PARILIB_API GEN     algmakeintegral(GEN mt0, int64_t maps);
PARILIB_API GEN     algmul(GEN al, GEN x, GEN y);
PARILIB_API GEN     algmultable(GEN al);
PARILIB_API GEN     alglat_get_primbasis(GEN lat);
PARILIB_API GEN     alglat_get_scalar(GEN lat);
PARILIB_API GEN     alglatadd(GEN al, GEN lat1, GEN lat2, GEN* ptinter);
PARILIB_API int     alglatcontains(GEN al, GEN lat, GEN x, GEN* ptc);
PARILIB_API GEN     alglatelement(GEN al, GEN lat, GEN c);
PARILIB_API GEN     alglathnf(GEN al, GEN m, GEN d);
PARILIB_API GEN     alglatindex(GEN al, GEN lat1, GEN lat2);
PARILIB_API GEN     alglatinter(GEN al, GEN lat1, GEN lat2, GEN* ptsum);
PARILIB_API GEN     alglatmul(GEN al, GEN lat1, GEN lat2);
PARILIB_API GEN     alglatlefttransporter(GEN al, GEN lat1, GEN lat2);
PARILIB_API GEN     alglatrighttransporter(GEN al, GEN lat1, GEN lat2);
PARILIB_API int     alglatsubset(GEN al, GEN lat1, GEN lat2, GEN* ptindex);
PARILIB_API GEN     algneg(GEN al, GEN x);
PARILIB_API GEN     algnorm(GEN al, GEN x, int64_t abs);
PARILIB_API GEN     algpoleval(GEN al, GEN pol, GEN x);
PARILIB_API GEN     algpow(GEN al, GEN x, GEN n);
PARILIB_API GEN     algprimesubalg(GEN al);
PARILIB_API GEN     algramifiedplaces(GEN al);
PARILIB_API GEN     algrandom(GEN al, GEN b);
PARILIB_API GEN     algsplit(GEN al, int64_t v);
PARILIB_API GEN     algtomatrix(GEN al, GEN x, int64_t abs);
PARILIB_API GEN     algsqr(GEN al, GEN x);
PARILIB_API GEN     algsub(GEN al, GEN x, GEN y);
PARILIB_API GEN     algtableinit(GEN mt, GEN p);
PARILIB_API GEN     algtensor(GEN al1, GEN al2, int64_t maxord);
PARILIB_API GEN     algtrace(GEN al, GEN x, int64_t abs);
PARILIB_API int64_t    algtype(GEN al);
PARILIB_API GEN     bnfgwgeneric(GEN bnf, GEN Lpr, GEN Ld, GEN pl, int64_t var);
PARILIB_API void    checkalg(GEN x);
PARILIB_API void    checkhasse(GEN nf, GEN hi, GEN hf, int64_t n);
PARILIB_API void    checklat(GEN al, GEN lat);
PARILIB_API GEN     conjclasses_algcenter(GEN cc, GEN p);
PARILIB_API GEN     galoischardet(GEN gal, GEN ch, int64_t o);
PARILIB_API GEN     galoischarpoly(GEN gal, GEN ch, int64_t o);
PARILIB_API GEN     galoischartable(GEN gal);
PARILIB_API GEN     nfgrunwaldwang(GEN nf0, GEN Lpr, GEN Ld, GEN pl, int64_t var);
PARILIB_API GEN     nfgwkummer(GEN nf, GEN Lpr, GEN Ld, GEN pl, int64_t var);

/* alglin1.c */

PARILIB_API GEN     F2Ms_colelim(GEN M, int64_t nbrow);
PARILIB_API GEN     F2m_image(GEN x);
PARILIB_API GEN     F2m_indexrank(GEN x);
PARILIB_API GEN     F2m_suppl(GEN x);
PARILIB_API GEN     F2xqM_F2xqC_gauss(GEN a, GEN b, GEN T);
PARILIB_API GEN     F2xqM_F2xqC_invimage(GEN a, GEN b, GEN T);
PARILIB_API GEN     F2xqM_F2xqC_mul(GEN a, GEN b, GEN T);
PARILIB_API GEN     F2xqM_deplin(GEN x, GEN T);
PARILIB_API GEN     F2xqM_det(GEN a, GEN T);
PARILIB_API GEN     F2xqM_gauss(GEN a, GEN b, GEN T);
PARILIB_API GEN     F2xqM_ker(GEN x, GEN T);
PARILIB_API GEN     F2xqM_image(GEN x, GEN T);
PARILIB_API GEN     F2xqM_indexrank(GEN x, GEN T);
PARILIB_API GEN     F2xqM_inv(GEN a, GEN T);
PARILIB_API GEN     F2xqM_invimage(GEN a, GEN b, GEN T);
PARILIB_API GEN     F2xqM_mul(GEN a, GEN b, GEN T);
PARILIB_API int64_t    F2xqM_rank(GEN x, GEN T);
PARILIB_API GEN     F2xqM_suppl(GEN x, GEN T);
PARILIB_API GEN     Flm_image(GEN x, ulong p);
PARILIB_API GEN     Flm_indexrank(GEN x, ulong p);
PARILIB_API GEN     Flm_suppl(GEN x, ulong p);
PARILIB_API GEN     FlxqM_FlxqC_gauss(GEN a, GEN b, GEN T, ulong p);
PARILIB_API GEN     FlxqM_FlxqC_invimage(GEN a, GEN b, GEN T, ulong p);
PARILIB_API GEN     FlxqM_FlxqC_mul(GEN a, GEN b, GEN T, ulong p);
PARILIB_API GEN     FlxqM_deplin(GEN x, GEN T, ulong p);
PARILIB_API GEN     FlxqM_det(GEN a, GEN T, ulong p);
PARILIB_API GEN     FlxqM_gauss(GEN a, GEN b, GEN T, ulong p);
PARILIB_API GEN     FlxqM_ker(GEN x, GEN T, ulong p);
PARILIB_API GEN     FlxqM_image(GEN x, GEN T, ulong p);
PARILIB_API GEN     FlxqM_indexrank(GEN x, GEN T, ulong p);
PARILIB_API GEN     FlxqM_inv(GEN x, GEN T, ulong p);
PARILIB_API GEN     FlxqM_invimage(GEN a, GEN b, GEN T, ulong p);
PARILIB_API GEN     FlxqM_mul(GEN a, GEN b, GEN T, ulong p);
PARILIB_API int64_t    FlxqM_rank(GEN x, GEN T, ulong p);
PARILIB_API GEN     FlxqM_suppl(GEN x, GEN T, ulong p);
PARILIB_API GEN     FpM_FpC_gauss(GEN a, GEN b, GEN p);
PARILIB_API GEN     FpM_FpC_invimage(GEN m, GEN v, GEN p);
PARILIB_API GEN     FpM_deplin(GEN x, GEN p);
PARILIB_API GEN     FpM_det(GEN x, GEN p);
PARILIB_API GEN     FpM_gauss(GEN a, GEN b, GEN p);
PARILIB_API GEN     FpM_image(GEN x, GEN p);
PARILIB_API GEN     FpM_indexrank(GEN x, GEN p);
PARILIB_API GEN     FpM_intersect(GEN x, GEN y, GEN p);
PARILIB_API GEN     FpM_inv(GEN x, GEN p);
PARILIB_API GEN     FpM_invimage(GEN m, GEN v, GEN p);
PARILIB_API GEN     FpM_ker(GEN x, GEN p);
PARILIB_API int64_t    FpM_rank(GEN x, GEN p);
PARILIB_API GEN     FpM_suppl(GEN x, GEN p);
PARILIB_API GEN     FqM_FqC_gauss(GEN a, GEN b, GEN T, GEN p);
PARILIB_API GEN     FqM_FqC_invimage(GEN a, GEN b, GEN T, GEN p);
PARILIB_API GEN     FqM_FqC_mul(GEN a, GEN b, GEN T, GEN p);
PARILIB_API GEN     FqM_deplin(GEN x, GEN T, GEN p);
PARILIB_API GEN     FqM_det(GEN x, GEN T, GEN p);
PARILIB_API GEN     FqM_gauss(GEN a, GEN b, GEN T, GEN p);
PARILIB_API GEN     FqM_ker(GEN x, GEN T, GEN p);
PARILIB_API GEN     FqM_image(GEN x, GEN T, GEN p);
PARILIB_API GEN     FqM_indexrank(GEN x, GEN T, GEN p);
PARILIB_API GEN     FqM_inv(GEN x, GEN T, GEN p);
PARILIB_API GEN     FqM_invimage(GEN a, GEN b, GEN T, GEN p);
PARILIB_API GEN     FqM_mul(GEN a, GEN b, GEN T, GEN p);
PARILIB_API int64_t    FqM_rank(GEN a, GEN T, GEN p);
PARILIB_API GEN     FqM_suppl(GEN x, GEN T, GEN p);
PARILIB_API GEN     QM_image_shallow(GEN A);
PARILIB_API GEN     QM_image(GEN A);
PARILIB_API GEN     QM_gauss(GEN a, GEN b);
PARILIB_API GEN     QM_gauss_i(GEN M, GEN B, int64_t flag);
PARILIB_API GEN     QM_indexrank(GEN x);
PARILIB_API GEN     QM_inv(GEN M);
PARILIB_API int64_t    QM_rank(GEN x);
PARILIB_API GEN     RgM_Fp_init(GEN a, GEN p, ulong *pp);
PARILIB_API GEN     RgM_Hadamard(GEN a);
PARILIB_API GEN     RgM_RgC_invimage(GEN A, GEN B);
PARILIB_API GEN     RgM_diagonal(GEN m);
PARILIB_API GEN     RgM_diagonal_shallow(GEN m);
PARILIB_API GEN     RgM_inv(GEN a);
PARILIB_API GEN     RgM_inv_upper(GEN a);
PARILIB_API GEN     RgM_invimage(GEN A, GEN B);
PARILIB_API GEN     RgM_solve(GEN a, GEN b);
PARILIB_API GEN     RgM_solve_realimag(GEN x, GEN y);
PARILIB_API void    RgMs_structelim(GEN M, int64_t nbrow, GEN A, GEN *p_col, GEN *p_lin);
PARILIB_API GEN     ZM_det(GEN a);
PARILIB_API GEN     ZM_detmult(GEN A);
PARILIB_API GEN     ZM_gauss(GEN a, GEN b);
PARILIB_API GEN     ZM_ker(GEN M);
PARILIB_API GEN     ZM_imagecompl(GEN x);
PARILIB_API GEN     ZM_indeximage(GEN x);
PARILIB_API GEN     ZM_indexrank(GEN x);
PARILIB_API GEN     ZM_inv(GEN M, GEN *den);
PARILIB_API GEN     ZM_inv_ratlift(GEN M, GEN *pden);
PARILIB_API GEN     ZM_pseudoinv(GEN M, GEN *pv, GEN *den);
PARILIB_API int64_t    ZM_rank(GEN x);
PARILIB_API GEN     ZlM_gauss(GEN a, GEN b, ulong p, int64_t e, GEN C);
PARILIB_API GEN     closemodinvertible(GEN x, GEN y);
PARILIB_API GEN     deplin(GEN x);
PARILIB_API GEN     det(GEN a);
PARILIB_API GEN     det0(GEN a,int64_t flag);
PARILIB_API GEN     det2(GEN a);
PARILIB_API GEN     detint(GEN x);
PARILIB_API GEN     eigen(GEN x, int64_t prec);
PARILIB_API GEN     gauss(GEN a, GEN b);
PARILIB_API GEN     gaussmodulo(GEN M, GEN D, GEN Y);
PARILIB_API GEN     gaussmodulo2(GEN M, GEN D, GEN Y);
PARILIB_API GEN     gen_Gauss(GEN a, GEN b, void *E, const struct bb_field *ff);
PARILIB_API GEN     gen_Gauss_pivot(GEN x, int64_t *rr, void *E, const struct bb_field *ff);
PARILIB_API GEN     gen_det(GEN a, void *E, const struct bb_field *ff);
PARILIB_API GEN     gen_ker(GEN x, int64_t deplin, void *E, const struct bb_field *ff);
PARILIB_API GEN     gen_matcolinvimage(GEN a, GEN b, void *E, const struct bb_field *ff);
PARILIB_API GEN     gen_matcolmul(GEN a, GEN b, void *E, const struct bb_field *ff);
PARILIB_API GEN     gen_matinvimage(GEN a, GEN b, void *E, const struct bb_field *ff);
PARILIB_API GEN     gen_matmul(GEN a, GEN b, void *E, const struct bb_field *ff);
PARILIB_API GEN     image(GEN x);
PARILIB_API GEN     image2(GEN x);
PARILIB_API GEN     imagecompl(GEN x);
PARILIB_API GEN     indexrank(GEN x);
PARILIB_API GEN     inverseimage(GEN mat, GEN y);
PARILIB_API GEN     ker(GEN x);
PARILIB_API GEN     mateigen(GEN x, int64_t flag, int64_t prec);
PARILIB_API GEN     matimage0(GEN x,int64_t flag);
PARILIB_API GEN     matker0(GEN x, int64_t flag);
PARILIB_API int64_t    rank(GEN x);
PARILIB_API GEN     reducemodinvertible(GEN x, GEN y);
PARILIB_API GEN     reducemodlll(GEN x,GEN y);
PARILIB_API GEN     split_realimag(GEN x, int64_t r1, int64_t r2);
PARILIB_API GEN     suppl(GEN x);

/* alglin2.c */

PARILIB_API GEN     Flm_charpoly(GEN x, ulong p);
PARILIB_API GEN     Flm_hess(GEN x, ulong p);
PARILIB_API GEN     FpM_charpoly(GEN x, GEN p);
PARILIB_API GEN     FpM_hess(GEN x, GEN p);
PARILIB_API GEN     Frobeniusform(GEN V, int64_t n);
PARILIB_API GEN     QM_minors_coprime(GEN x, GEN pp);
PARILIB_API GEN     QM_ImZ(GEN x);
PARILIB_API GEN     QM_ImZ_all(GEN x, GEN *U, int64_t remove, int64_t hnf);
PARILIB_API GEN     QM_ImZ_hnf(GEN x);
PARILIB_API GEN     QM_ImZ_hnfall(GEN x, GEN *U, int64_t remove);
PARILIB_API GEN     QM_ImQ(GEN x);
PARILIB_API GEN     QM_ImQ_all(GEN x, GEN *U, int64_t remove, int64_t hnf);
PARILIB_API GEN     QM_ImQ_hnf(GEN x);
PARILIB_API GEN     QM_ImQ_hnfall(GEN x, GEN *U, int64_t remove);
PARILIB_API GEN     QM_charpoly_ZX(GEN M);
PARILIB_API GEN     QM_charpoly_ZX_bound(GEN M, int64_t bit);
PARILIB_API GEN     ZM_charpoly(GEN x);
PARILIB_API GEN     adj(GEN x);
PARILIB_API GEN     adjsafe(GEN x);
PARILIB_API GEN     caract(GEN x, int64_t v);
PARILIB_API GEN     caradj(GEN x, int64_t v, GEN *py);
PARILIB_API GEN     carberkowitz(GEN x, int64_t v);
PARILIB_API GEN     carhess(GEN x, int64_t v);
PARILIB_API GEN     charpoly(GEN x, int64_t v);
PARILIB_API GEN     charpoly0(GEN x, int64_t v,int64_t flag);
PARILIB_API GEN     gnorm(GEN x);
PARILIB_API GEN     gnorml1(GEN x,int64_t prec);
PARILIB_API GEN     gnorml1_fake(GEN x);
PARILIB_API GEN     gnormlp(GEN x, GEN p, int64_t prec);
PARILIB_API GEN     gnorml2(GEN x);
PARILIB_API GEN     gsupnorm(GEN x, int64_t prec);
PARILIB_API void    gsupnorm_aux(GEN x, GEN *m, GEN *msq, int64_t prec);
PARILIB_API GEN     gtrace(GEN x);
PARILIB_API GEN     hess(GEN x);
PARILIB_API GEN     intersect(GEN x, GEN y);
PARILIB_API GEN     jacobi(GEN a, int64_t prec);
PARILIB_API GEN     matadjoint0(GEN x, int64_t flag);
PARILIB_API GEN     matcompanion(GEN x);
PARILIB_API GEN     matrixqz0(GEN x, GEN pp);
PARILIB_API GEN     minpoly(GEN x, int64_t v);
PARILIB_API GEN     qfgaussred(GEN a);
PARILIB_API GEN     qfgaussred_positive(GEN a);
PARILIB_API GEN     qfsign(GEN a);

/* alglin3.c */

PARILIB_API GEN     apply0(GEN f, GEN A);
PARILIB_API GEN     diagonal(GEN x);
PARILIB_API GEN     diagonal_shallow(GEN x);
PARILIB_API GEN     extract0(GEN x, GEN l1, GEN l2);
PARILIB_API GEN     fold0(GEN f, GEN A);
PARILIB_API GEN     genapply(void *E, GEN (*f)(void *E, GEN x), GEN A);
PARILIB_API GEN     genfold(void *E, GEN (*f)(void *E, GEN x, GEN y), GEN A);
PARILIB_API GEN     genindexselect(void *E, int64_t (*f)(void *E, GEN x), GEN A);
PARILIB_API GEN     genselect(void *E, int64_t (*f)(void *E, GEN x), GEN A);
PARILIB_API GEN     gtomat(GEN x);
PARILIB_API GEN     gtrans(GEN x);
PARILIB_API GEN     matmuldiagonal(GEN x, GEN d);
PARILIB_API GEN     matmultodiagonal(GEN x, GEN y);
PARILIB_API GEN     matslice0(GEN A, int64_t x1, int64_t x2, int64_t y1, int64_t y2);
PARILIB_API GEN     parapply(GEN V, GEN C);
PARILIB_API void    parfor(GEN a, GEN b, GEN code, void *E, int64_t call(void*, GEN, GEN));
PARILIB_API void    parfor_init(parfor_t *T, GEN a, GEN b, GEN code);
PARILIB_API GEN     parfor_next(parfor_t *T);
PARILIB_API void    parfor_stop(parfor_t *T);
PARILIB_API void    parforeach(GEN x, GEN code, void *E, int64_t call(void*, GEN, GEN));
PARILIB_API void    parforeach_init(parforeach_t *T, GEN x, GEN code);
PARILIB_API GEN     parforeach_next(parforeach_t *T);
PARILIB_API void    parforeach_stop(parforeach_t *T);
PARILIB_API void    parforprime(GEN a, GEN b, GEN code, void *E, int64_t call(void*, GEN, GEN));
PARILIB_API void    parforprime_init(parforprime_t *T, GEN a, GEN b, GEN code);
PARILIB_API GEN     parforprime_next(parforprime_t *T);
PARILIB_API void    parforprime_stop(parforprime_t *T);
PARILIB_API void    parforprimestep(GEN a, GEN b, GEN q, GEN code, void *E, int64_t call(void*, GEN, GEN));
PARILIB_API void    parforprimestep_init(parforprime_t *T, GEN a, GEN b, GEN q, GEN code);
PARILIB_API void    parforvec(GEN x, GEN code, int64_t flag, void *E, int64_t call(void*, GEN, GEN));
PARILIB_API void    parforvec_init(parforvec_t *T, GEN x, GEN code, int64_t flag);
PARILIB_API GEN     parforvec_next(parforvec_t *T);
PARILIB_API void    parforvec_stop(parforvec_t *T);
PARILIB_API GEN     parselect(GEN C, GEN D, int64_t flag);
PARILIB_API GEN     select0(GEN A, GEN f, int64_t flag);
PARILIB_API GEN     shallowextract(GEN x, GEN L);
PARILIB_API GEN     shallowmatextract(GEN x, GEN l1, GEN l2);
PARILIB_API GEN     shallowtrans(GEN x);
PARILIB_API GEN     vecapply(void *E, GEN (*f)(void* E, GEN x), GEN x);
PARILIB_API GEN     veccatapply(void *E, GEN (*f)(void* E, GEN x), GEN x);
PARILIB_API GEN     veccatselapply(void *Epred, int64_t (*pred)(void* E, GEN x), void *Efun,
                             GEN (*fun)(void* E, GEN x), GEN A);
PARILIB_API GEN     vecrange(GEN a, GEN b);
PARILIB_API GEN     vecrangess(int64_t a, int64_t b);
PARILIB_API GEN     vecselapply(void *Epred, int64_t (*pred)(void* E, GEN x), void *Efun,
                            GEN (*fun)(void* E, GEN x), GEN A);
PARILIB_API GEN     vecselect(void *E, int64_t (*f)(void* E, GEN x), GEN A);
PARILIB_API GEN     vecslice0(GEN A, int64_t y1, int64_t y2);
PARILIB_API GEN     vecsum(GEN v);
PARILIB_API GEN     zv_diagonal(GEN x);

/* anal.c */

PARILIB_API void    addhelp(const char *e, char *s);
PARILIB_API GEN     arity0(GEN C);
PARILIB_API void    alias0(const char *s, const char *old);
PARILIB_API GEN     compile_str(const char *s);
PARILIB_API int64_t    delete_var(void);
PARILIB_API int64_t    fetch_user_var(const char *s);
PARILIB_API int64_t    fetch_var(void);
PARILIB_API int64_t    fetch_var_higher(void);
PARILIB_API GEN     fetch_var_value(int64_t vx, GEN t);
PARILIB_API char *  gp_embedded(const char *s);
PARILIB_API void    gp_embedded_init(int64_t rsize, int64_t vsize);
PARILIB_API GEN     gp_read_str(const char *t);
PARILIB_API GEN     gp_read_str_bitprec(const char *s, int64_t bitprec);
PARILIB_API GEN     gp_read_str_prec(const char *s, int64_t prec);
PARILIB_API entree* install(void *f, const char *name, const char *code);
PARILIB_API entree* is_entry(const char *s);
PARILIB_API void    kill0(const char *e);
PARILIB_API void    pari_var_close(void);
PARILIB_API void    pari_var_init(void);
PARILIB_API int64_t    pari_var_next(void);
PARILIB_API int64_t    pari_var_next_temp(void);
PARILIB_API int64_t    pari_var_create(entree *ep);
PARILIB_API void    name_var(int64_t n, const char *s);
PARILIB_API GEN     readseq(char *t);
PARILIB_API GEN*    safegel(GEN x, int64_t l);
PARILIB_API int64_t*   safeel(GEN x, int64_t l);
PARILIB_API GEN*    safelistel(GEN x, int64_t l);
PARILIB_API GEN*    safegcoeff(GEN x, int64_t a, int64_t b);
PARILIB_API GEN     strtoi(const char *s);
PARILIB_API GEN     strtor(const char *s, int64_t prec);
PARILIB_API GEN     varhigher(const char *s, int64_t v);
PARILIB_API GEN     varlower(const char *s, int64_t v);

/* aprcl.c */

PARILIB_API GEN     divisorslenstra(GEN N, GEN r, GEN s);
PARILIB_API int64_t    isprimeAPRCL(GEN N);

/* Qfb.c */

PARILIB_API GEN     Qfb0(GEN x, GEN y, GEN z, GEN d, int64_t prec);
PARILIB_API void    check_quaddisc(GEN x, int64_t *s, int64_t *r, const char *f);
PARILIB_API void    check_quaddisc_imag(GEN x, int64_t *r, const char *f);
PARILIB_API void    check_quaddisc_real(GEN x, int64_t *r, const char *f);
PARILIB_API int64_t    cornacchia(GEN d, GEN p, GEN *px, GEN *py);
PARILIB_API int64_t    cornacchia2(GEN d, GEN p, GEN *px, GEN *py);
PARILIB_API int64_t    cornacchia2_sqrt(GEN d, GEN p, GEN b, GEN *px, GEN *py);
PARILIB_API GEN     nucomp(GEN x, GEN y, GEN L);
PARILIB_API GEN     nudupl(GEN x, GEN L);
PARILIB_API GEN     nupow(GEN x, GEN n, GEN L);
PARILIB_API GEN     primeform(GEN x, GEN p, int64_t prec);
PARILIB_API GEN     primeform_u(GEN x, ulong p);
PARILIB_API int     qfb_equal1(GEN f);
PARILIB_API GEN     qfbcompraw(GEN x, GEN y);
PARILIB_API GEN     qfbpowraw(GEN x, int64_t n);
PARILIB_API GEN     qfbred0(GEN x, int64_t flag, GEN D, GEN isqrtD, GEN sqrtD);
PARILIB_API GEN     qfbredsl2(GEN q, GEN S);
PARILIB_API GEN     qfbsolve(GEN Q, GEN n, int64_t flag);
PARILIB_API GEN     qfi(GEN x, GEN y, GEN z);
PARILIB_API GEN     qfi_1(GEN x);
PARILIB_API GEN     qfi_Shanks(GEN a, GEN g, int64_t n);
PARILIB_API GEN     qfi_log(GEN a, GEN g, GEN o);
PARILIB_API GEN     qfi_order(GEN q, GEN o);
PARILIB_API GEN     qficomp(GEN x, GEN y);
PARILIB_API GEN     qficompraw(GEN x, GEN y);
PARILIB_API GEN     qfipowraw(GEN x, int64_t n);
PARILIB_API GEN     qfisolvep(GEN Q, GEN p);
PARILIB_API GEN     qfisqr(GEN x);
PARILIB_API GEN     qfisqrraw(GEN x);
PARILIB_API GEN     qfr(GEN x, GEN y, GEN z, GEN d);
PARILIB_API GEN     qfr3_comp(GEN x, GEN y, struct qfr_data *S);
PARILIB_API GEN     qfr3_pow(GEN x, GEN n, struct qfr_data *S);
PARILIB_API GEN     qfr3_red(GEN x, struct qfr_data *S);
PARILIB_API GEN     qfr3_rho(GEN x, struct qfr_data *S);
PARILIB_API GEN     qfr3_to_qfr(GEN x, GEN z);
PARILIB_API GEN     qfr5_comp(GEN x, GEN y, struct qfr_data *S);
PARILIB_API GEN     qfr5_dist(GEN e, GEN d, int64_t prec);
PARILIB_API GEN     qfr5_pow(GEN x, GEN n, struct qfr_data *S);
PARILIB_API GEN     qfr5_red(GEN x, struct qfr_data *S);
PARILIB_API GEN     qfr5_rho(GEN x, struct qfr_data *S);
PARILIB_API GEN     qfr5_to_qfr(GEN x, GEN d0);
PARILIB_API GEN     qfr_1(GEN x);
PARILIB_API void    qfr_data_init(GEN D, int64_t prec, struct qfr_data *S);
PARILIB_API GEN     qfr_to_qfr5(GEN x, int64_t prec);
PARILIB_API GEN     qfrcomp(GEN x, GEN y);
PARILIB_API GEN     qfrcompraw(GEN x, GEN y);
PARILIB_API GEN     qfrpow(GEN x, GEN n);
PARILIB_API GEN     qfrpowraw(GEN x, int64_t n);
PARILIB_API GEN     qfrsolvep(GEN Q, GEN p);
PARILIB_API GEN     qfrsqr(GEN x);
PARILIB_API GEN     qfrsqrraw(GEN x);
PARILIB_API GEN     quadgen(GEN x);
PARILIB_API GEN     quadgen0(GEN x, int64_t v);
PARILIB_API GEN     quadpoly(GEN x);
PARILIB_API GEN     quadpoly0(GEN x, int64_t v);
PARILIB_API GEN     redimag(GEN x);
PARILIB_API GEN     redreal(GEN x);
PARILIB_API GEN     redrealnod(GEN x, GEN isqrtD);
PARILIB_API GEN     rhoreal(GEN x);
PARILIB_API GEN     rhorealnod(GEN x, GEN isqrtD);

/* arith1.c */

PARILIB_API ulong   get_Fl_red(ulong n);
PARILIB_API ulong   Fl_2gener_pre(ulong p, ulong pi);
PARILIB_API ulong   Fl_log(ulong a, ulong g, ulong ord, ulong p);
PARILIB_API ulong   Fl_log_pre(ulong a, ulong g, ulong ord, ulong p, ulong pi);
PARILIB_API ulong   Fl_order(ulong a, ulong o, ulong p);
PARILIB_API GEN     Fl_powers(ulong x, int64_t n, ulong p);
PARILIB_API GEN     Fl_powers_pre(ulong x, int64_t n, ulong p, ulong pi);
PARILIB_API ulong   Fl_powu(ulong x, ulong n, ulong p);
PARILIB_API ulong   Fl_powu_pre(ulong x, ulong n, ulong p, ulong pi);
PARILIB_API ulong   Fl_sqrt(ulong a, ulong p);
PARILIB_API ulong   Fl_sqrt_pre(ulong a, ulong p, ulong pi);
PARILIB_API ulong   Fl_sqrt_pre_i(ulong a, ulong s2, ulong p, ulong pi);
PARILIB_API ulong   Fl_sqrtl(ulong a, ulong l, ulong p);
PARILIB_API ulong   Fl_sqrtl_pre(ulong a, ulong l, ulong p, ulong pi);
PARILIB_API ulong   Fl_sqrtn(ulong a, int64_t n, ulong p, ulong *zetan);
PARILIB_API ulong   Fl_sqrtn_pre(ulong a, int64_t n, ulong p, ulong pi, ulong *zetan);
PARILIB_API GEN     Fp_2gener(GEN p);
PARILIB_API GEN     Fp_factored_order(GEN a, GEN o, GEN p);
PARILIB_API int     Fp_ispower(GEN x, GEN K, GEN p);
PARILIB_API GEN     Fp_log(GEN a, GEN g, GEN ord, GEN p);
PARILIB_API GEN     Fp_order(GEN a, GEN o, GEN p);
PARILIB_API GEN     Fp_pow(GEN a, GEN n, GEN m);
PARILIB_API GEN     Fp_pow_init(GEN x, GEN n, int64_t k, GEN p);
PARILIB_API GEN     Fp_pow_table(GEN R, GEN n, GEN p);
PARILIB_API GEN     Fp_powers(GEN x, int64_t n, GEN p);
PARILIB_API GEN     Fp_pows(GEN A, int64_t k, GEN N);
PARILIB_API GEN     Fp_powu(GEN x, ulong k, GEN p);
PARILIB_API GEN     Fp_sqrt(GEN a, GEN p);
PARILIB_API GEN     Fp_sqrt_i(GEN a, GEN y, GEN p);
PARILIB_API GEN     Fp_sqrtn(GEN a, GEN n, GEN p, GEN *zetan);
PARILIB_API GEN     FpV_prod(GEN V, GEN p);
PARILIB_API GEN     Z_ZV_mod(GEN P, GEN xa);
PARILIB_API GEN     Z_ZV_mod_tree(GEN P, GEN xa, GEN T);
PARILIB_API GEN     Z_chinese(GEN a, GEN b, GEN A, GEN B);
PARILIB_API GEN     Z_chinese_all(GEN a, GEN b, GEN A, GEN B, GEN *pC);
PARILIB_API GEN     Z_chinese_coprime(GEN a, GEN b, GEN A, GEN B, GEN C);
PARILIB_API GEN     Z_chinese_post(GEN a, GEN b, GEN C, GEN U, GEN d);
PARILIB_API void    Z_chinese_pre(GEN A, GEN B, GEN *pC, GEN *pU, GEN *pd);
PARILIB_API GEN     Z_factor_listP(GEN N, GEN L);
PARILIB_API int64_t    Z_isanypower(GEN x, GEN *y);
PARILIB_API int64_t    Z_isfundamental(GEN x);
PARILIB_API int64_t    Z_ispow2(GEN x);
PARILIB_API int64_t    Z_ispowerall(GEN x, ulong k, GEN *pt);
PARILIB_API int64_t    Z_issquareall(GEN x, GEN *pt);
PARILIB_API GEN     Z_nv_mod(GEN P, GEN xa);
PARILIB_API GEN     ZM_nv_mod_tree(GEN M, GEN xa, GEN T);
PARILIB_API GEN     ZV_allpnqn(GEN x);
PARILIB_API GEN     ZV_chinese(GEN A, GEN P, GEN *pt_mod);
PARILIB_API GEN     ZV_chinese_tree(GEN A, GEN P, GEN T, GEN R);
PARILIB_API GEN     ZV_chinesetree(GEN P, GEN T);
PARILIB_API GEN     ZV_nv_mod_tree(GEN V, GEN xa, GEN T);
PARILIB_API GEN     ZV_producttree(GEN xa);
PARILIB_API GEN     ZX_nv_mod_tree(GEN P, GEN xa, GEN T);
PARILIB_API GEN     ZXC_nv_mod_tree(GEN P, GEN xa, GEN T, int64_t w);
PARILIB_API GEN     ZXM_nv_mod_tree(GEN M, GEN xa, GEN T, int64_t w);
PARILIB_API GEN     ZXX_nv_mod_tree(GEN P, GEN xa, GEN T, int64_t w);
PARILIB_API GEN     Zideallog(GEN bid, GEN x);
PARILIB_API int64_t    Zp_issquare(GEN a, GEN p);
PARILIB_API GEN     bestappr(GEN x, GEN k);
PARILIB_API GEN     bestapprPade(GEN x, int64_t B);
PARILIB_API GEN     chinese(GEN x, GEN y);
PARILIB_API GEN     chinese1(GEN x);
PARILIB_API GEN     chinese1_coprime_Z(GEN x);
PARILIB_API GEN     classno(GEN x);
PARILIB_API GEN     classno2(GEN x);
PARILIB_API GEN     contfrac0(GEN x, GEN b, int64_t flag);
PARILIB_API GEN     contfracpnqn(GEN x, int64_t n);
PARILIB_API GEN     fibo(int64_t n);
PARILIB_API GEN     gboundcf(GEN x, int64_t k);
PARILIB_API GEN     gcf(GEN x);
PARILIB_API GEN     gcf2(GEN b, GEN x);
PARILIB_API const struct bb_field *get_Fp_field(void **E, GEN p);
PARILIB_API int64_t    gisanypower(GEN x, GEN *pty);
PARILIB_API GEN     gissquare(GEN x);
PARILIB_API GEN     gissquareall(GEN x, GEN *pt);
PARILIB_API GEN     hclassno(GEN x);
PARILIB_API GEN     hclassno6(GEN x);
PARILIB_API int64_t    hilbert(GEN x, GEN y, GEN p);
PARILIB_API int64_t    hilbertii(GEN x, GEN y, GEN p);
PARILIB_API int64_t    isfundamental(GEN x);
PARILIB_API int64_t    ispolygonal(GEN x, GEN S, GEN *N);
PARILIB_API int64_t    ispower(GEN x, GEN k, GEN *pty);
PARILIB_API int64_t    isprimepower(GEN x, GEN *pty);
PARILIB_API int64_t    ispseudoprimepower(GEN n, GEN *pt);
PARILIB_API int64_t    issquare(GEN x);
PARILIB_API int64_t    issquareall(GEN x, GEN *pt);
PARILIB_API int64_t    krois(GEN x, int64_t y);
PARILIB_API int64_t    kroiu(GEN x, ulong y);
PARILIB_API int64_t    kronecker(GEN x, GEN y);
PARILIB_API int64_t    krosi(int64_t s, GEN x);
PARILIB_API int64_t    kross(int64_t x, int64_t y);
PARILIB_API int64_t    kroui(ulong x, GEN y);
PARILIB_API int64_t    krouu(ulong x, ulong y);
PARILIB_API GEN     lcmii(GEN a, GEN b);
PARILIB_API GEN     Fp_invgen(GEN x, GEN N, GEN *pd);
PARILIB_API int64_t    logint0(GEN B, GEN y, GEN *ptq);
PARILIB_API int64_t    logintall(GEN B, GEN y, GEN *ptq);
PARILIB_API GEN     mpfact(int64_t n);
PARILIB_API ulong   factorial_Fl(int64_t n, ulong p);
PARILIB_API GEN     factorial_Fp(int64_t n, GEN p);
PARILIB_API GEN     muls_interval(int64_t a, int64_t b);
PARILIB_API GEN     mulu_interval(ulong a, ulong b);
PARILIB_API GEN     mulu_interval_step(ulong a, ulong b, ulong step);
PARILIB_API GEN     ncV_chinese_center(GEN A, GEN P, GEN *pt_mod);
PARILIB_API GEN     ncV_chinese_center_tree(GEN A, GEN P, GEN T, GEN R);
PARILIB_API GEN     nmV_chinese_center(GEN A, GEN P, GEN *pt_mod);
PARILIB_API GEN     nmV_chinese_center_tree(GEN A, GEN P, GEN T, GEN R);
PARILIB_API ulong   nonsquare_Fl(ulong p);
PARILIB_API GEN     nxCV_chinese_center(GEN A, GEN P, GEN *pt_mod);
PARILIB_API GEN     nxCV_chinese_center_tree(GEN A, GEN P, GEN T, GEN R);
PARILIB_API GEN     nxMV_chinese_center(GEN A, GEN P, GEN *pt_mod);
PARILIB_API GEN     nxV_chinese_center(GEN A, GEN P, GEN *pt_mod);
PARILIB_API GEN     nxV_chinese_center_tree(GEN A, GEN P, GEN T, GEN R);
PARILIB_API GEN     ZV_chinese_center(GEN A, GEN P, GEN *pt_mod);
PARILIB_API GEN     odd_prime_divisors(GEN q);
PARILIB_API GEN     order(GEN x);
PARILIB_API ulong   pgener_Fl(ulong p);
PARILIB_API ulong   pgener_Fl_local(ulong p, GEN L);
PARILIB_API GEN     pgener_Fp(GEN p);
PARILIB_API GEN     pgener_Fp_local(GEN p, GEN L);
PARILIB_API ulong   pgener_Zl(ulong p);
PARILIB_API GEN     pgener_Zp(GEN p);
PARILIB_API GEN     pnqn(GEN x);
PARILIB_API GEN     qfbclassno0(GEN x,int64_t flag);
PARILIB_API GEN     quadclassno(GEN x);
PARILIB_API GEN     quaddisc(GEN x);
PARILIB_API GEN     quadregulator(GEN x, int64_t prec);
PARILIB_API GEN     quadunit(GEN x);
PARILIB_API GEN     quadunit0(GEN x, int64_t v);
PARILIB_API GEN     ramanujantau(GEN n);
PARILIB_API ulong   rootsof1_Fl(ulong n, ulong p);
PARILIB_API GEN     rootsof1_Fp(GEN n, GEN p);
PARILIB_API GEN     rootsof1u_Fp(ulong n, GEN p);
PARILIB_API int64_t    sisfundamental(int64_t x);
PARILIB_API GEN     sqrtint(GEN a);
PARILIB_API GEN     sqrtint0(GEN a, GEN *r);
PARILIB_API ulong   u_chinese_coprime(ulong a, ulong b, ulong A, ulong B, ulong C);
PARILIB_API int64_t    uisprimepower(ulong n, ulong *p);
PARILIB_API int64_t    uissquare(ulong A);
PARILIB_API int64_t    uissquareall(ulong A, ulong *sqrtA);
PARILIB_API int64_t    ulogintall(ulong B, ulong y, ulong *ptq);
PARILIB_API int64_t    unegisfundamental(ulong x);
PARILIB_API int64_t    uposisfundamental(ulong x);
PARILIB_API GEN     znlog(GEN x, GEN g, GEN o);
PARILIB_API GEN     znorder(GEN x, GEN o);
PARILIB_API GEN     znprimroot(GEN m);
PARILIB_API GEN     znstar(GEN x);
PARILIB_API GEN     znstar0(GEN N, int64_t flag);
PARILIB_API GEN     Zn_quad_roots(GEN N, GEN B, GEN C);

/* arith2.c */

PARILIB_API int     RgV_is_ZVpos(GEN v);
PARILIB_API int     RgV_is_ZVnon0(GEN v);
PARILIB_API GEN     Z_smoothen(GEN N, GEN L, GEN *pP, GEN *pe);
PARILIB_API GEN     boundfact(GEN n, ulong lim);
PARILIB_API GEN     check_arith_pos(GEN n, const char *f);
PARILIB_API GEN     check_arith_non0(GEN n, const char *f);
PARILIB_API GEN     check_arith_all(GEN n, const char *f);
PARILIB_API GEN     clean_Z_factor(GEN f);
PARILIB_API GEN     corepartial(GEN n, int64_t l);
PARILIB_API GEN     core0(GEN n,int64_t flag);
PARILIB_API GEN     core2(GEN n);
PARILIB_API GEN     core2partial(GEN n, int64_t l);
PARILIB_API GEN     coredisc(GEN n);
PARILIB_API GEN     coredisc0(GEN n,int64_t flag);
PARILIB_API GEN     coredisc2(GEN n);
PARILIB_API int64_t    corediscs(int64_t D, ulong *f);
PARILIB_API GEN     digits(GEN N, GEN B);
PARILIB_API GEN     divisors(GEN n);
PARILIB_API GEN     divisors_factored(GEN N);
PARILIB_API GEN     divisors0(GEN N, int64_t flag);
PARILIB_API GEN     divisorsu(ulong n);
PARILIB_API GEN     divisorsu_moebius(GEN P);
PARILIB_API GEN     divisorsu_fact(GEN fa);
PARILIB_API GEN     divisorsu_fact_factored(GEN fa);
PARILIB_API GEN     factor_pn_1(GEN p, ulong n);
PARILIB_API GEN     factor_pn_1_limit(GEN p, int64_t n, ulong lim);
PARILIB_API GEN     factoru_pow(ulong n);
PARILIB_API GEN     fromdigits(GEN x, GEN B);
PARILIB_API GEN     fromdigitsu(GEN x, GEN B);
PARILIB_API GEN     fuse_Z_factor(GEN f, GEN B);
PARILIB_API GEN     gen_digits(GEN x, GEN B, int64_t n, void *E, struct bb_ring *r,
                        GEN (*div)(void *E, GEN x, GEN y, GEN *r));
PARILIB_API GEN     gen_fromdigits(GEN x, GEN B, void *E, struct bb_ring *r);
PARILIB_API int     is_Z_factor(GEN f);
PARILIB_API int     is_Z_factornon0(GEN f);
PARILIB_API int     is_Z_factorpos(GEN f);
PARILIB_API int     is_nf_factor(GEN F);
PARILIB_API int     is_nf_extfactor(GEN F);
PARILIB_API GEN     sumdigits(GEN n);
PARILIB_API GEN     sumdigits0(GEN n, GEN B);
PARILIB_API ulong   sumdigitsu(ulong n);
PARILIB_API GEN     usumdiv_fact(GEN f);
PARILIB_API GEN     usumdivk_fact(GEN f, ulong k);

/* base1.c */

PARILIB_API GEN     FpX_FpC_nfpoleval(GEN nf, GEN pol, GEN a, GEN p);
PARILIB_API GEN     embed_T2(GEN x, int64_t r1);
PARILIB_API GEN     embednorm_T2(GEN x, int64_t r1);
PARILIB_API GEN     embed_norm(GEN x, int64_t r1);
PARILIB_API void    check_ZKmodule(GEN x, const char *s);
PARILIB_API void    checkbid(GEN bid);
PARILIB_API GEN     checkbid_i(GEN bid);
PARILIB_API GEN     checkbnf(GEN bnf);
PARILIB_API GEN     checkbnf_i(GEN bnf);
PARILIB_API void    checkbnr(GEN bnr);
PARILIB_API GEN     checkbnr_i(GEN bnr);
PARILIB_API void    checkabgrp(GEN v);
PARILIB_API void    checksqmat(GEN x, int64_t N);
PARILIB_API GEN     checknf(GEN nf);
PARILIB_API GEN     checknf_i(GEN nf);
PARILIB_API GEN     checknfelt_mod(GEN nf, GEN x, const char *s);
PARILIB_API void    checkprid(GEN bid);
PARILIB_API int     checkprid_i(GEN x);
PARILIB_API void    checkrnf(GEN rnf);
PARILIB_API int     checkrnf_i(GEN rnf);
PARILIB_API GEN     factoredpolred(GEN x, GEN fa);
PARILIB_API GEN     factoredpolred2(GEN x, GEN fa);
PARILIB_API GEN     galoisapply(GEN nf, GEN aut, GEN x);
PARILIB_API GEN     get_bnf(GEN x, int64_t *t);
PARILIB_API GEN     get_bnfpol(GEN x, GEN *bnf, GEN *nf);
PARILIB_API GEN     get_nf(GEN x, int64_t *t);
PARILIB_API GEN     get_nfpol(GEN x, GEN *nf);
PARILIB_API GEN     get_prid(GEN x);
PARILIB_API GEN     idealfrobenius(GEN nf, GEN gal, GEN pr);
PARILIB_API GEN     idealfrobenius_aut(GEN nf, GEN gal, GEN pr, GEN aut);
PARILIB_API GEN     idealramfrobenius(GEN nf, GEN gal, GEN pr, GEN ram);
PARILIB_API GEN     idealramfrobenius_aut(GEN nf, GEN gal, GEN pr, GEN ram, GEN aut);
PARILIB_API GEN     idealramgroups(GEN nf, GEN gal, GEN pr);
PARILIB_API GEN     idealramgroups_aut(GEN nf, GEN gal, GEN pr, GEN aut);
PARILIB_API GEN     nf_get_allroots(GEN nf);
PARILIB_API int64_t    nf_get_prec(GEN x);
PARILIB_API GEN     nfmaxord_to_nf(nfmaxord_t *T, GEN ro, int64_t prec);
PARILIB_API GEN     nfcertify(GEN x);
PARILIB_API GEN     nfgaloismatrix(GEN nf, GEN s);
PARILIB_API GEN     nfgaloismatrixapply(GEN nf, GEN M, GEN x);
PARILIB_API GEN     nfgaloispermtobasis(GEN nf, GEN gal);
PARILIB_API void    nfinit_basic(nfmaxord_t *T, GEN x);
PARILIB_API GEN     nfinit_complete(nfmaxord_t *T, int64_t flag, int64_t prec);
PARILIB_API GEN     nfinit(GEN x, int64_t prec);
PARILIB_API GEN     nfinit0(GEN x, int64_t flag, int64_t prec);
PARILIB_API GEN     nfinitall(GEN x, int64_t flag, int64_t prec);
PARILIB_API GEN     nfinitred(GEN x, int64_t prec);
PARILIB_API GEN     nfinitred2(GEN x, int64_t prec);
PARILIB_API GEN     nfisincl(GEN a, GEN b);
PARILIB_API GEN     nfisincl0(GEN fa, GEN fb, int64_t flag);
PARILIB_API GEN     nfisisom(GEN a, GEN b);
PARILIB_API GEN     nfnewprec(GEN nf, int64_t prec);
PARILIB_API GEN     nfnewprec_shallow(GEN nf, int64_t prec);
PARILIB_API GEN     nfpoleval(GEN nf, GEN pol, GEN a);
PARILIB_API GEN     nfsplitting(GEN T, GEN D);
PARILIB_API int64_t    nftyp(GEN x);
PARILIB_API GEN     polredord(GEN x);
PARILIB_API GEN     polred(GEN x);
PARILIB_API GEN     polred0(GEN x, int64_t flag, GEN fa);
PARILIB_API GEN     polred2(GEN x);
PARILIB_API GEN     polredabs(GEN x);
PARILIB_API GEN     polredabs0(GEN x, int64_t flag);
PARILIB_API GEN     polredabs2(GEN x);
PARILIB_API GEN     polredabsall(GEN x, int64_t flun);
PARILIB_API GEN     polredbest(GEN x, int64_t flag);
PARILIB_API GEN     rnfpolredabs(GEN nf, GEN pol, int64_t flag);
PARILIB_API GEN     rnfpolredbest(GEN nf, GEN R, int64_t flag);
PARILIB_API GEN     smallpolred(GEN x);
PARILIB_API GEN     smallpolred2(GEN x);
PARILIB_API GEN     tschirnhaus(GEN x);
PARILIB_API GEN     ZX_Q_mul(GEN A, GEN z);
PARILIB_API GEN     ZX_Q_normalize(GEN pol, GEN *ptlc);
PARILIB_API GEN     ZX_Z_normalize(GEN pol, GEN *ptk);
PARILIB_API GEN     ZX_to_monic(GEN pol, GEN *lead);
PARILIB_API GEN     ZX_primitive_to_monic(GEN pol, GEN *lead);
PARILIB_API GEN     ZXX_Q_mul(GEN A, GEN z);

/* base2.c */

PARILIB_API GEN     Fq_to_nf(GEN x, GEN modpr);
PARILIB_API GEN     FqM_to_nfM(GEN z, GEN modpr);
PARILIB_API GEN     FqV_to_nfV(GEN z, GEN modpr);
PARILIB_API GEN     FqX_to_nfX(GEN x, GEN modpr);
PARILIB_API GEN     Rg_nffix(const char *f, GEN T, GEN c, int lift);
PARILIB_API GEN     RgV_nffix(const char *f, GEN T, GEN P, int lift);
PARILIB_API GEN     RgX_nffix(const char *s, GEN nf, GEN x, int lift);
PARILIB_API GEN     ZX_compositum_disjoint(GEN A, GEN B);
PARILIB_API GEN     ZX_compositum(GEN A, GEN B, int64_t *lambda);
PARILIB_API int64_t    ZpX_disc_val(GEN f, GEN p);
PARILIB_API GEN     ZpX_gcd(GEN f1,GEN f2,GEN p, GEN pm);
PARILIB_API GEN     ZpX_monic_factor(GEN f, GEN p, int64_t prec);
PARILIB_API GEN     ZpX_primedec(GEN T, GEN p);
PARILIB_API GEN     ZpX_reduced_resultant(GEN x, GEN y, GEN p, GEN pm);
PARILIB_API GEN     ZpX_reduced_resultant_fast(GEN f, GEN g, GEN p, int64_t M);
PARILIB_API int64_t    ZpX_resultant_val(GEN f, GEN g, GEN p, int64_t M);
PARILIB_API void    checkmodpr(GEN modpr);
PARILIB_API GEN     compositum(GEN P, GEN Q);
PARILIB_API GEN     compositum2(GEN P, GEN Q);
PARILIB_API GEN     nfdisc(GEN x);
PARILIB_API GEN     get_modpr(GEN x);
PARILIB_API GEN     indexpartial(GEN P, GEN DP);
PARILIB_API GEN     modpr_genFq(GEN modpr);
PARILIB_API GEN     nf_to_Fq_init(GEN nf, GEN *pr, GEN *T, GEN *p);
PARILIB_API GEN     nf_to_Fq(GEN nf, GEN x, GEN modpr);
PARILIB_API GEN     nfM_to_FqM(GEN z, GEN nf,GEN modpr);
PARILIB_API GEN     nfV_to_FqV(GEN z, GEN nf,GEN modpr);
PARILIB_API GEN     nfX_to_FqX(GEN x, GEN nf,GEN modpr);
PARILIB_API GEN     nfX_to_monic(GEN nf, GEN T, GEN *pL);
PARILIB_API GEN     nfbasis(GEN x, GEN *y);
PARILIB_API GEN     nfcompositum(GEN nf, GEN A, GEN B, int64_t flag);
PARILIB_API GEN     nfdiscfactors(GEN x);
PARILIB_API void    nfmaxord(nfmaxord_t *S, GEN T, int64_t flag);
PARILIB_API GEN     nfmodpr(GEN nf, GEN x, GEN pr);
PARILIB_API GEN     nfmodprinit(GEN nf, GEN pr);
PARILIB_API GEN     nfmodprinit0(GEN nf, GEN pr, int64_t v);
PARILIB_API GEN     nfmodprlift(GEN nf, GEN x, GEN pr);
PARILIB_API GEN     nfreducemodpr(GEN nf, GEN x, GEN modpr);
PARILIB_API GEN     polcompositum0(GEN P, GEN Q,int64_t flag);
PARILIB_API GEN     idealprimedec(GEN nf,GEN p);
PARILIB_API GEN     idealprimedec_galois(GEN nf, GEN p);
PARILIB_API GEN     idealprimedec_degrees(GEN nf, GEN p);
PARILIB_API GEN     idealprimedec_kummer(GEN nf,GEN pol,int64_t e,GEN p);
PARILIB_API GEN     idealprimedec_limit_f(GEN nf, GEN p, int64_t f);
PARILIB_API GEN     idealprimedec_limit_norm(GEN nf, GEN p, GEN B);
PARILIB_API GEN     poldiscfactors(GEN T, int64_t flag);
PARILIB_API GEN     rnfbasis(GEN bnf, GEN order);
PARILIB_API GEN     rnfdedekind(GEN nf, GEN T, GEN pr, int64_t flag);
PARILIB_API GEN     rnfdet(GEN nf, GEN order);
PARILIB_API GEN     rnfdisc_factored(GEN nf, GEN pol, GEN *pd);
PARILIB_API GEN     rnfdiscf(GEN nf, GEN pol);
PARILIB_API GEN     rnfequation(GEN nf, GEN pol);
PARILIB_API GEN     rnfequation0(GEN nf, GEN pol, int64_t flall);
PARILIB_API GEN     rnfequation2(GEN nf, GEN pol);
PARILIB_API GEN     nf_pV_to_prV(GEN nf, GEN P);
PARILIB_API GEN     nf_rnfeq(GEN nf, GEN R);
PARILIB_API GEN     nf_rnfeqsimple(GEN nf, GEN R);
PARILIB_API GEN     rnfequationall(GEN A, GEN B, int64_t *pk, GEN *pLPRS);
PARILIB_API GEN     rnfhnfbasis(GEN bnf, GEN order);
PARILIB_API int64_t    rnfisfree(GEN bnf, GEN order);
PARILIB_API GEN     rnflllgram(GEN nf, GEN pol, GEN order,int64_t prec);
PARILIB_API GEN     rnfpolred(GEN nf, GEN pol, int64_t prec);
PARILIB_API GEN     rnfpseudobasis(GEN nf, GEN pol);
PARILIB_API GEN     rnfsimplifybasis(GEN bnf, GEN order);
PARILIB_API GEN     rnfsteinitz(GEN nf, GEN order);
PARILIB_API int64_t    factorial_lval(ulong n, ulong p);
PARILIB_API GEN     zk_to_Fq_init(GEN nf, GEN *pr, GEN *T, GEN *p);
PARILIB_API GEN     zk_to_Fq(GEN x, GEN modpr);
PARILIB_API GEN     QXQV_to_FpM(GEN basis, GEN T, GEN p);
PARILIB_API GEN     zkmodprinit(GEN nf, GEN pr);

/* base3.c */

PARILIB_API GEN     Idealstar(GEN nf, GEN x,int64_t flun);
PARILIB_API GEN     Idealstarmod(GEN nf, GEN ideal, int64_t flag, GEN MOD);
PARILIB_API GEN     Idealstarprk(GEN nf, GEN pr, int64_t k, int64_t flag);
PARILIB_API GEN     RgC_to_nfC(GEN nf,GEN x);
PARILIB_API GEN     RgM_RgX_mul(GEN A, GEN x);
PARILIB_API GEN     RgM_to_nfM(GEN nf,GEN x);
PARILIB_API GEN     RgX_to_nfX(GEN nf,GEN pol);
PARILIB_API int64_t    ZC_nfval(GEN x, GEN P);
PARILIB_API int64_t    ZC_nfvalrem(GEN x, GEN P, GEN *t);
PARILIB_API int     ZC_prdvd(GEN x, GEN P);
PARILIB_API GEN     ZM_ZX_mul(GEN A, GEN x);
PARILIB_API GEN     ZV_snf_gcd(GEN x, GEN mod);
PARILIB_API GEN     algtobasis(GEN nf, GEN x);
PARILIB_API GEN     basistoalg(GEN nf, GEN x);
PARILIB_API GEN     ei_multable(GEN nf, int64_t i);
PARILIB_API const struct bb_field *get_nf_field(void **E, GEN nf);
PARILIB_API GEN     famat_nfvalrem(GEN nf, GEN x, GEN pr, GEN *py);
PARILIB_API GEN     gpnfvalrem(GEN nf, GEN x, GEN pr, GEN *py);
PARILIB_API GEN     ideallist(GEN nf,int64_t bound);
PARILIB_API GEN     ideallist0(GEN nf,int64_t bound, int64_t flag);
PARILIB_API GEN     ideallistarch(GEN nf, GEN list, GEN arch);
PARILIB_API GEN     ideallog(GEN nf,GEN x,GEN bid);
PARILIB_API GEN     ideallogmod(GEN nf,GEN x,GEN bid, GEN mod);
PARILIB_API GEN     ideallog_units(GEN bnf, GEN bid);
PARILIB_API GEN     ideallog_units0(GEN bnf, GEN bid, GEN MOD);
PARILIB_API GEN     idealprincipalunits(GEN nf, GEN pr, int64_t e);
PARILIB_API GEN     idealstar0(GEN nf, GEN x,int64_t flag);
PARILIB_API GEN     idealstarmod(GEN nf, GEN ideal, int64_t flag, GEN MOD);
PARILIB_API GEN     indices_to_vec01(GEN archp, int64_t r);
PARILIB_API GEN     matalgtobasis(GEN nf, GEN x);
PARILIB_API GEN     matbasistoalg(GEN nf, GEN x);
PARILIB_API GEN     multable(GEN nf, GEN x);
PARILIB_API GEN     nf_to_scalar_or_alg(GEN nf, GEN x);
PARILIB_API GEN     nf_to_scalar_or_basis(GEN nf, GEN x);
PARILIB_API GEN     nf_cxlog(GEN nf, GEN x, int64_t prec);
PARILIB_API GEN     nfV_cxlog(GEN nf, GEN x, int64_t prec);
PARILIB_API GEN     nfadd(GEN nf, GEN x, GEN y);
PARILIB_API int     nfchecksigns(GEN nf, GEN x, GEN pl);
PARILIB_API GEN     nfdiv(GEN nf, GEN x, GEN y);
PARILIB_API GEN     nfdiveuc(GEN nf, GEN a, GEN b);
PARILIB_API GEN     nfdivrem(GEN nf, GEN a, GEN b);
PARILIB_API GEN     nfembed(GEN nf, GEN x, int64_t k);
PARILIB_API GEN     nfeltembed(GEN nf, GEN x, GEN ind0, int64_t prec);
PARILIB_API GEN     nfeltsign(GEN nf, GEN x, GEN ind0);
PARILIB_API GEN     nfinv(GEN nf, GEN x);
PARILIB_API GEN     nfinvmodideal(GEN nf, GEN x, GEN ideal);
PARILIB_API GEN     nflogembed(GEN nf, GEN x, GEN *emb, int64_t prec);
PARILIB_API GEN     nfM_det(GEN nf, GEN M);
PARILIB_API GEN     nfM_inv(GEN nf, GEN M);
PARILIB_API GEN     nfM_mul(GEN nf, GEN A, GEN B);
PARILIB_API GEN     nfM_nfC_mul(GEN nf, GEN A, GEN B);
PARILIB_API GEN     nfmod(GEN nf, GEN a, GEN b);
PARILIB_API GEN     nfmul(GEN nf,GEN x,GEN y);
PARILIB_API GEN     nfmuli(GEN nf,GEN x,GEN y);
PARILIB_API GEN     nfnorm(GEN nf, GEN x);
PARILIB_API GEN     nfpolsturm(GEN nf, GEN f, GEN ind0);
PARILIB_API GEN     nfpow(GEN nf,GEN x,GEN k);
PARILIB_API GEN     nfpow_u(GEN nf, GEN z, ulong n);
PARILIB_API GEN     nfpowmodideal(GEN nf,GEN x,GEN k,GEN ideal);
PARILIB_API GEN     nfsign(GEN nf,GEN alpha);
PARILIB_API GEN     nfsign_arch(GEN nf,GEN alpha,GEN arch);
PARILIB_API GEN     nfsign_from_logarch(GEN Larch, GEN invpi, GEN archp);
PARILIB_API GEN     nfsqr(GEN nf,GEN x);
PARILIB_API GEN     nfsqri(GEN nf, GEN x);
PARILIB_API GEN     nfsub(GEN nf, GEN x, GEN y);
PARILIB_API GEN     nftrace(GEN nf, GEN x);
PARILIB_API int64_t    nfval(GEN nf, GEN x, GEN vp);
PARILIB_API int64_t    nfvalrem(GEN nf, GEN x, GEN pr, GEN *py);
PARILIB_API GEN     polmod_nffix(const char *f, GEN rnf, GEN x,int lift);
PARILIB_API GEN     polmod_nffix2(const char *f, GEN T, GEN R, GEN x, int lift);
PARILIB_API GEN     pr_basis_perm(GEN nf, GEN pr);
PARILIB_API int     pr_equal(GEN P, GEN Q);
PARILIB_API GEN     rnfalgtobasis(GEN rnf, GEN x);
PARILIB_API GEN     rnfbasistoalg(GEN rnf, GEN x);
PARILIB_API GEN     rnfeltnorm(GEN rnf, GEN x);
PARILIB_API GEN     rnfelttrace(GEN rnf, GEN x);
PARILIB_API GEN     set_sign_mod_divisor(GEN nf, GEN x, GEN y, GEN sarch);
PARILIB_API GEN     tablemul(GEN TAB, GEN x, GEN y);
PARILIB_API GEN     tablemul_ei(GEN M, GEN x, int64_t i);
PARILIB_API GEN     tablemul_ei_ej(GEN M, int64_t i, int64_t j);
PARILIB_API GEN     tablemulvec(GEN M, GEN x, GEN v);
PARILIB_API GEN     tablesqr(GEN tab, GEN x);
PARILIB_API GEN     vec01_to_indices(GEN arch);
PARILIB_API GEN     vecmodii(GEN a, GEN b);
PARILIB_API GEN     vecmoduu(GEN a, GEN b);
PARILIB_API GEN     vecsmall01_to_indices(GEN v);
PARILIB_API GEN     zk_inv(GEN nf, GEN x);
PARILIB_API GEN     zk_multable(GEN nf, GEN x);
PARILIB_API GEN     zk_scalar_or_multable(GEN, GEN x);
PARILIB_API GEN     zkchinese(GEN zkc, GEN x, GEN y);
PARILIB_API GEN     zkchinese1(GEN zkc, GEN x);
PARILIB_API GEN     zkchineseinit(GEN nf, GEN A, GEN B, GEN AB);
PARILIB_API GEN     zkmultable_capZ(GEN mx);
PARILIB_API GEN     zkmultable_inv(GEN mx);

/* base4.c */

PARILIB_API ulong   Fl_invgen(ulong x, ulong p, ulong *pg);
PARILIB_API GEN     Z_cba(GEN a, GEN b);
PARILIB_API GEN     Z_ppgle(GEN a, GEN b);
PARILIB_API GEN     Z_ppio(GEN a, GEN b);
PARILIB_API GEN     Z_ppo(GEN x, GEN f);
PARILIB_API GEN     ZV_cba_extend(GEN P, GEN b);
PARILIB_API GEN     ZV_cba(GEN v);
PARILIB_API GEN     RM_round_maxrank(GEN G);
PARILIB_API GEN     ZM_famat_limit(GEN fa, GEN limit);
PARILIB_API GEN     famat_Z_gcd(GEN M, GEN n);
PARILIB_API GEN     famat_div_shallow(GEN f, GEN g);
PARILIB_API GEN     famat_div(GEN f, GEN g);
PARILIB_API GEN     famat_idealfactor(GEN nf, GEN x);
PARILIB_API GEN     famat_inv(GEN f);
PARILIB_API GEN     famat_inv_shallow(GEN f);
PARILIB_API GEN     famat_makecoprime(GEN nf, GEN g, GEN e, GEN pr, GEN prk, GEN EX);
PARILIB_API GEN     famat_mul(GEN f, GEN g);
PARILIB_API GEN     famat_mul_shallow(GEN f, GEN g);
PARILIB_API GEN     famat_mulpow_shallow(GEN f, GEN g, GEN e);
PARILIB_API GEN     famat_mulpows_shallow(GEN f, GEN g, int64_t e);
PARILIB_API GEN     famat_pow(GEN f, GEN n);
PARILIB_API GEN     famat_pow_shallow(GEN f, GEN n);
PARILIB_API GEN     famat_pows_shallow(GEN f, int64_t n);
PARILIB_API GEN     famat_sqr(GEN f);
PARILIB_API GEN     famat_reduce(GEN fa);
PARILIB_API GEN     famat_remove_trivial(GEN fa);
PARILIB_API GEN     famat_to_nf(GEN nf, GEN f);
PARILIB_API GEN     famat_to_nf_modideal_coprime(GEN nf, GEN g, GEN e, GEN id, GEN EX);
PARILIB_API GEN     famat_to_nf_moddivisor(GEN nf, GEN g, GEN e, GEN bid);
PARILIB_API GEN     famatV_factorback(GEN v, GEN e);
PARILIB_API GEN     famatV_zv_factorback(GEN v, GEN e);
PARILIB_API GEN     famatsmall_reduce(GEN fa);
PARILIB_API GEN     gpidealval(GEN nf, GEN ix, GEN P);
PARILIB_API GEN     gpidealfactor(GEN nf, GEN x, GEN lim);
PARILIB_API GEN     idealHNF_Z_factor(GEN x, GEN *pvN, GEN *pvZ);
PARILIB_API GEN     idealHNF_Z_factor_i(GEN x, GEN f, GEN *pvN, GEN *pvZ);
PARILIB_API GEN     idealtwoelt(GEN nf, GEN ix);
PARILIB_API GEN     idealtwoelt0(GEN nf, GEN ix, GEN a);
PARILIB_API GEN     idealtwoelt2(GEN nf, GEN x, GEN a);
PARILIB_API GEN     idealadd(GEN nf, GEN x, GEN y);
PARILIB_API GEN     idealaddmultoone(GEN nf, GEN list);
PARILIB_API GEN     idealaddtoone(GEN nf, GEN x, GEN y);
PARILIB_API GEN     idealaddtoone_i(GEN nf, GEN x, GEN y);
PARILIB_API GEN     idealaddtoone_raw(GEN nf, GEN x, GEN y);
PARILIB_API GEN     idealaddtoone0(GEN nf, GEN x, GEN y);
PARILIB_API GEN     idealappr(GEN nf, GEN x);
PARILIB_API GEN     idealappr0(GEN nf, GEN x, int64_t fl);
PARILIB_API GEN     idealapprfact(GEN nf, GEN x);
PARILIB_API GEN     idealchinese(GEN nf, GEN x, GEN y);
PARILIB_API GEN     idealcoprime(GEN nf, GEN x, GEN y);
PARILIB_API GEN     idealcoprimefact(GEN nf, GEN x, GEN fy);
PARILIB_API GEN     idealdiv(GEN nf, GEN x, GEN y);
PARILIB_API GEN     idealdiv0(GEN nf, GEN x, GEN y,int64_t flag);
PARILIB_API GEN     idealdivexact(GEN nf, GEN x, GEN y);
PARILIB_API GEN     idealdivpowprime(GEN nf, GEN x, GEN vp, GEN n);
PARILIB_API GEN     idealdown(GEN nf, GEN x);
PARILIB_API GEN     idealismaximal(GEN nf, GEN x);
PARILIB_API GEN     idealmulpowprime(GEN nf, GEN x, GEN vp, GEN n);
PARILIB_API GEN     idealfactor(GEN nf, GEN x);
PARILIB_API GEN     idealfactor_limit(GEN nf, GEN x, ulong lim);
PARILIB_API GEN     idealfactor_partial(GEN nf, GEN x, GEN L);
PARILIB_API GEN     idealhnf(GEN nf, GEN x);
PARILIB_API GEN     idealhnf_principal(GEN nf, GEN x);
PARILIB_API GEN     idealhnf_shallow(GEN nf, GEN x);
PARILIB_API GEN     idealhnf_two(GEN nf, GEN vp);
PARILIB_API GEN     idealhnf0(GEN nf, GEN a, GEN b);
PARILIB_API GEN     idealintersect(GEN nf, GEN x, GEN y);
PARILIB_API GEN     idealinv(GEN nf, GEN ix);
PARILIB_API GEN     idealHNF_inv(GEN nf, GEN I);
PARILIB_API GEN     idealHNF_inv_Z(GEN nf, GEN I);
PARILIB_API int64_t    idealispower(GEN nf, GEN A, int64_t n, GEN *pB);
PARILIB_API GEN     idealred0(GEN nf, GEN I,GEN vdir);
PARILIB_API GEN     idealmul(GEN nf, GEN ix, GEN iy);
PARILIB_API GEN     idealmul0(GEN nf, GEN ix, GEN iy, int64_t flag);
PARILIB_API GEN     idealHNF_mul(GEN nf, GEN ix, GEN iy);
PARILIB_API GEN     idealmulred(GEN nf, GEN ix, GEN iy);
PARILIB_API GEN     idealnorm(GEN nf, GEN x);
PARILIB_API GEN     idealnumden(GEN nf, GEN x);
PARILIB_API GEN     idealpow(GEN nf, GEN ix, GEN n);
PARILIB_API GEN     idealpow0(GEN nf, GEN ix, GEN n, int64_t flag);
PARILIB_API GEN     idealpowred(GEN nf, GEN ix, GEN n);
PARILIB_API GEN     idealpows(GEN nf, GEN ideal, int64_t iexp);
PARILIB_API int64_t    idealprodval(GEN nf, GEN I, GEN pr);
PARILIB_API GEN     idealprodprime(GEN nf, GEN L);
PARILIB_API GEN     idealsqr(GEN nf, GEN x);
PARILIB_API int64_t    idealtyp(GEN *ideal, GEN *arch);
PARILIB_API int64_t    idealval(GEN nf,GEN ix,GEN vp);
PARILIB_API GEN     idealprod(GEN nf, GEN I);
PARILIB_API int64_t    isideal(GEN nf,GEN x);
PARILIB_API GEN     idealmin(GEN nf,GEN ix,GEN vdir);
PARILIB_API GEN     matreduce(GEN fa);
PARILIB_API GEN     nf_get_Gtwist(GEN nf, GEN vdir);
PARILIB_API GEN     nf_get_Gtwist1(GEN nf, int64_t i);
PARILIB_API GEN     nf_to_Fp_coprime(GEN nf, GEN x, GEN modpr);
PARILIB_API GEN     nfC_multable_mul(GEN v, GEN x);
PARILIB_API GEN     nfC_nf_mul(GEN nf, GEN v, GEN x);
PARILIB_API GEN     nfdetint(GEN nf,GEN pseudo);
PARILIB_API GEN     nfdivmodpr(GEN nf, GEN x, GEN y, GEN modpr);
PARILIB_API GEN     idealredmodpower(GEN nf, GEN x, ulong k, ulong B);
PARILIB_API GEN     nfhnf(GEN nf, GEN x);
PARILIB_API GEN     nfhnf0(GEN nf, GEN x, int64_t flag);
PARILIB_API GEN     nfhnfmod(GEN nf, GEN x, GEN d);
PARILIB_API GEN     nfkermodpr(GEN nf, GEN x, GEN modpr);
PARILIB_API GEN     nfmulmodpr(GEN nf, GEN x, GEN y, GEN modpr);
PARILIB_API GEN     nfpowmodpr(GEN nf, GEN x, GEN k, GEN modpr);
PARILIB_API GEN     nfreduce(GEN nf, GEN x, GEN ideal);
PARILIB_API GEN     nfsnf(GEN nf, GEN x);
PARILIB_API GEN     nfsnf0(GEN nf, GEN x, int64_t flag);
PARILIB_API GEN     nfsolvemodpr(GEN nf, GEN a, GEN b, GEN modpr);
PARILIB_API GEN     pr_hnf(GEN nf, GEN pr);
PARILIB_API GEN     pr_inv(GEN pr);
PARILIB_API GEN     pr_inv_p(GEN pr);
PARILIB_API GEN     pr_uniformizer(GEN pr, GEN F);
PARILIB_API GEN     prV_lcm_capZ(GEN L);
PARILIB_API GEN     sunits_makecoprime(GEN X, GEN pr, GEN prk);
PARILIB_API GEN     to_famat(GEN x, GEN y);
PARILIB_API GEN     to_famat_shallow(GEN x, GEN y);
PARILIB_API ulong   u_ppo(ulong x, ulong f);
PARILIB_API GEN     vecdiv(GEN x, GEN y);
PARILIB_API GEN     vecinv(GEN x);
PARILIB_API GEN     vecmul(GEN x, GEN y);
PARILIB_API GEN     vecpow(GEN x, GEN n);
PARILIB_API GEN     zkC_multable_mul(GEN v, GEN x);

/* base5.c */

PARILIB_API GEN     eltreltoabs(GEN rnfeq, GEN x);
PARILIB_API GEN     eltabstorel(GEN eq, GEN P);
PARILIB_API GEN     eltabstorel_lift(GEN rnfeq, GEN P);
PARILIB_API GEN     nf_nfzk(GEN nf, GEN rnfeq);
PARILIB_API GEN     rnf_build_nfabs(GEN rnf, int64_t prec);
PARILIB_API GEN     rnf_zkabs(GEN rnf);
PARILIB_API GEN     nfeltup(GEN nf, GEN x, GEN zknf);
PARILIB_API void    rnfcomplete(GEN rnf);
PARILIB_API GEN     rnfeltabstorel(GEN rnf, GEN x);
PARILIB_API GEN     rnfeltdown(GEN rnf, GEN x);
PARILIB_API GEN     rnfeltdown0(GEN rnf, GEN x, int64_t flag);
PARILIB_API GEN     rnfeltreltoabs(GEN rnf, GEN x);
PARILIB_API GEN     rnfeltup(GEN rnf, GEN x);
PARILIB_API GEN     rnfeltup0(GEN rnf, GEN x, int64_t flag);
PARILIB_API GEN     rnfidealabstorel(GEN rnf, GEN x);
PARILIB_API GEN     rnfidealdown(GEN rnf, GEN x);
PARILIB_API GEN     rnfidealfactor(GEN rnf, GEN x);
PARILIB_API GEN     rnfidealhnf(GEN rnf, GEN x);
PARILIB_API GEN     rnfidealmul(GEN rnf,GEN x,GEN y);
PARILIB_API GEN     rnfidealnormabs(GEN rnf, GEN x);
PARILIB_API GEN     rnfidealnormrel(GEN rnf, GEN x);
PARILIB_API GEN     rnfidealprimedec(GEN rnf, GEN pr);
PARILIB_API GEN     rnfidealreltoabs(GEN rnf, GEN x);
PARILIB_API GEN     rnfidealreltoabs0(GEN rnf, GEN x, int64_t flag);
PARILIB_API GEN     rnfidealtwoelement(GEN rnf,GEN x);
PARILIB_API GEN     rnfidealup(GEN rnf, GEN x);
PARILIB_API GEN     rnfidealup0(GEN rnf,GEN x, int64_t flag);
PARILIB_API GEN     rnfinit(GEN nf,GEN pol);
PARILIB_API GEN     rnfinit0(GEN nf,GEN pol,int64_t flag);

/* bb_group.c */

PARILIB_API GEN get_arith_ZZM(GEN o);
PARILIB_API GEN get_arith_Z(GEN o);
PARILIB_API GEN gen_PH_log(GEN a, GEN g, GEN ord, void *E, const struct bb_group *grp);
PARILIB_API GEN gen_Shanks_init(GEN g, int64_t n, void *E, const struct bb_group *grp);
PARILIB_API GEN gen_Shanks(GEN T, GEN x, ulong N, void *E, const struct bb_group *grp);
PARILIB_API GEN gen_Shanks_sqrtn(GEN a, GEN n, GEN q, GEN *zetan, void *E, const struct bb_group *grp);
PARILIB_API GEN gen_gener(GEN o, void *E, const struct bb_group *grp);
PARILIB_API GEN gen_ellgens(GEN d1, GEN d2, GEN m, void *E, const struct bb_group *grp,
                GEN pairorder(void *E, GEN P, GEN Q, GEN m, GEN F));
PARILIB_API GEN gen_ellgroup(GEN N, GEN F, GEN *pt_m, void *E, const struct bb_group *grp,
                 GEN pairorder(void *E, GEN P, GEN Q, GEN m, GEN F));
PARILIB_API GEN gen_factored_order(GEN a, GEN o, void *E, const struct bb_group *grp);
PARILIB_API GEN gen_order(GEN x, GEN o, void *E, const struct bb_group *grp);
PARILIB_API GEN gen_select_order(GEN o, void *E, const struct bb_group *grp);

PARILIB_API GEN gen_plog(GEN x,GEN g0,GEN q, void *E, const struct bb_group *grp);
PARILIB_API GEN gen_pow(GEN x, GEN n, void *E, GEN (*sqr)(void*,GEN), GEN (*mul)(void*,GEN,GEN));
PARILIB_API GEN gen_pow_fold(GEN x, GEN n, void *E, GEN (*sqr)(void*,GEN), GEN (*msqr)(void*,GEN));
PARILIB_API GEN gen_pow_fold_i(GEN x, GEN n, void *E, GEN (*sqr)(void*,GEN), GEN (*msqr)(void*,GEN));
PARILIB_API GEN gen_pow_i(GEN x, GEN n, void *E, GEN (*sqr)(void*,GEN), GEN (*mul)(void*,GEN,GEN));
PARILIB_API GEN gen_pow_init(GEN x, GEN n, int64_t k, void *E, GEN (*sqr)(void*,GEN), GEN (*mul)(void*,GEN,GEN));
PARILIB_API GEN gen_pow_table(GEN R, GEN n, void *E, GEN (*one)(void*), GEN (*mul)(void*,GEN,GEN));
PARILIB_API GEN gen_powers(GEN x, int64_t l, int use_sqr, void *E, GEN (*sqr)(void*,GEN), GEN (*mul)(void*,GEN,GEN), GEN (*one)(void*));
PARILIB_API GEN gen_powu(GEN x, ulong n, void *E, GEN (*sqr)(void*,GEN), GEN (*mul)(void*,GEN,GEN));
PARILIB_API GEN gen_powu_fold(GEN x, ulong n, void *E, GEN (*sqr)(void*,GEN), GEN (*msqr)(void*,GEN));
PARILIB_API GEN gen_powu_fold_i(GEN x, ulong n, void *E, GEN  (*sqr)(void*,GEN), GEN (*msqr)(void*,GEN));
PARILIB_API GEN gen_powu_i(GEN x, ulong n, void *E, GEN (*sqr)(void*,GEN), GEN (*mul)(void*,GEN,GEN));
PARILIB_API GEN gen_product(GEN x, void *data, GEN (*mul)(void*,GEN,GEN));

/* bb_hnf.c */

PARILIB_API GEN     matdetmod(GEN A, GEN d);
PARILIB_API GEN     matimagemod(GEN A, GEN d, GEN* U);
PARILIB_API GEN     matinvmod(GEN A, GEN d);
PARILIB_API GEN     matkermod(GEN A, GEN d, GEN* im);
PARILIB_API GEN     matsolvemod(GEN M, GEN D, GEN Y, int64_t flag);

/* bern.c */

PARILIB_API GEN     bernfrac(int64_t n);
PARILIB_API GEN     bernpol(int64_t k, int64_t v);
PARILIB_API GEN     bernreal(int64_t n, int64_t prec);
PARILIB_API GEN     bernvec(int64_t nomb);
PARILIB_API void    constbern(int64_t n);
PARILIB_API GEN     eulerpol(int64_t k, int64_t v);
PARILIB_API GEN     eulervec(int64_t n);

/* bibli1.c */

PARILIB_API int     QR_init(GEN x, GEN *pB, GEN *pQ, GEN *pL, int64_t prec);
PARILIB_API GEN     R_from_QR(GEN x, int64_t prec);
PARILIB_API GEN     RgM_Babai(GEN B, GEN t);
PARILIB_API int     RgM_QR_init(GEN x, GEN *pB, GEN *pQ, GEN *pL, int64_t prec);
PARILIB_API GEN     RgM_gram_schmidt(GEN e, GEN *ptB);
PARILIB_API GEN     lindep_Xadic(GEN x);
PARILIB_API GEN     algdep(GEN x, int64_t n);
PARILIB_API GEN     algdep0(GEN x, int64_t n, int64_t bit);
PARILIB_API void    forqfvec(void *E, int64_t (*fun)(void *, GEN, GEN, double), GEN a, GEN BORNE);
PARILIB_API void    forqfvec1(void *E, int64_t (*fun)(void *, GEN), GEN a, GEN BORNE);
PARILIB_API void    forqfvec0(GEN a, GEN BORNE, GEN code);
PARILIB_API GEN     bestapprnf(GEN x, GEN T, GEN rootsT, int64_t prec);
PARILIB_API GEN     gaussred_from_QR(GEN x, int64_t prec);
PARILIB_API GEN     lindep0(GEN x, int64_t flag);
PARILIB_API GEN     lindep(GEN x);
PARILIB_API GEN     lindep_bit(GEN x, int64_t bit);
PARILIB_API GEN     lindepfull_bit(GEN x, int64_t bit);
PARILIB_API GEN     lindep2(GEN x, int64_t bit);
PARILIB_API GEN     mathouseholder(GEN Q, GEN v);
PARILIB_API GEN     matqr(GEN x, int64_t flag, int64_t prec);
PARILIB_API GEN     minim(GEN a, GEN borne, GEN stockmax);
PARILIB_API GEN     minim_raw(GEN a, GEN borne, GEN stockmax);
PARILIB_API GEN     minim_zm(GEN a, GEN borne, GEN stockmax);
PARILIB_API GEN     minim2(GEN a, GEN borne, GEN stockmax);
PARILIB_API GEN     lindep_padic(GEN x);
PARILIB_API GEN     qfperfection(GEN a);
PARILIB_API GEN     qfrep0(GEN a, GEN borne, int64_t flag);
PARILIB_API GEN     qfminim0(GEN a, GEN borne, GEN stockmax,int64_t flag, int64_t prec);
PARILIB_API GEN     seralgdep(GEN s, int64_t p, int64_t r);
PARILIB_API GEN     zncoppersmith(GEN P0, GEN N, GEN X, GEN B) ;

/* bibli2.c */

PARILIB_API GEN     QXQ_reverse(GEN a, GEN T);
PARILIB_API GEN     vec_equiv(GEN F);
PARILIB_API GEN     RgV_polint(GEN X, GEN Y, int64_t v);
PARILIB_API GEN     vec_reduce(GEN v, GEN *pE);
PARILIB_API GEN     RgXQ_reverse(GEN a, GEN T);
PARILIB_API GEN     ZC_union_shallow(GEN x, GEN y);
PARILIB_API GEN     ZV_indexsort(GEN L);
PARILIB_API int64_t    ZV_search(GEN x, GEN y);
PARILIB_API GEN     ZV_sort(GEN L);
PARILIB_API void    ZV_sort_inplace(GEN L);
PARILIB_API GEN     ZV_sort_uniq(GEN L);
PARILIB_API GEN     ZV_union_shallow(GEN x, GEN y);
PARILIB_API GEN     binomial(GEN x, int64_t k);
PARILIB_API GEN     binomial0(GEN x, GEN k);
PARILIB_API GEN     binomialuu(ulong n, ulong k);
PARILIB_API int     cmp_Flx(GEN x, GEN y);
PARILIB_API int     cmp_RgX(GEN x, GEN y);
PARILIB_API int     cmp_nodata(void *data, GEN x, GEN y);
PARILIB_API int     cmp_prime_ideal(GEN x, GEN y);
PARILIB_API int     cmp_prime_over_p(GEN x, GEN y);
PARILIB_API int     cmp_universal(GEN x, GEN y);
PARILIB_API GEN     convol(GEN x, GEN y);
PARILIB_API int     gen_cmp_RgX(void *data, GEN x, GEN y);
PARILIB_API GEN     polcyclo(int64_t n, int64_t v);
PARILIB_API GEN     polcyclo_eval(int64_t n, GEN x);
PARILIB_API GEN     dirdiv(GEN x, GEN y);
PARILIB_API GEN     dirmul(GEN x, GEN y);
PARILIB_API GEN     eulerianpol(int64_t N, int64_t v);
PARILIB_API GEN     gprec_wensure(GEN x, int64_t pr);
PARILIB_API GEN     gen_indexsort(GEN x, void *E, int (*cmp)(void*,GEN,GEN));
PARILIB_API GEN     gen_indexsort_uniq(GEN x, void *E, int (*cmp)(void*,GEN,GEN));
PARILIB_API int64_t    gen_search(GEN x, GEN y, int64_t flag, void *data, int (*cmp)(void*,GEN,GEN));
PARILIB_API GEN     gen_setminus(GEN set1, GEN set2, int (*cmp)(GEN,GEN));
PARILIB_API GEN     gen_sort(GEN x, void *E, int (*cmp)(void*,GEN,GEN));
PARILIB_API void    gen_sort_inplace(GEN x, void *E, int (*cmp)(void*,GEN,GEN), GEN *perm);
PARILIB_API GEN     gen_sort_shallow(GEN x, void *E, int (*cmp)(void*,GEN,GEN));
PARILIB_API GEN     gen_sort_uniq(GEN x, void *E, int (*cmp)(void*,GEN,GEN));
PARILIB_API int64_t    getstack(void);
PARILIB_API int64_t    gettime(void);
PARILIB_API int64_t    getabstime(void);
PARILIB_API GEN     getwalltime(void);
PARILIB_API GEN     gprec(GEN x, int64_t l);
PARILIB_API GEN     gprec_wtrunc(GEN x, int64_t pr);
PARILIB_API GEN     gprec_w(GEN x, int64_t pr);
PARILIB_API GEN     gtoset(GEN x);
PARILIB_API GEN     indexlexsort(GEN x);
PARILIB_API GEN     indexsort(GEN x);
PARILIB_API GEN     indexvecsort(GEN x, GEN k);
PARILIB_API GEN     laplace(GEN x);
PARILIB_API GEN     lexsort(GEN x);
PARILIB_API GEN     mathilbert(int64_t n);
PARILIB_API GEN     matqpascal(int64_t n, GEN q);
PARILIB_API GEN     merge_factor(GEN fx, GEN fy, void *data, int (*cmp)(void *,GEN,GEN));
PARILIB_API GEN     merge_sort_uniq(GEN x, GEN y, void *data, int (*cmp)(void *,GEN,GEN));
PARILIB_API GEN     modreverse(GEN x);
PARILIB_API GEN     polhermite(int64_t n, int64_t v);
PARILIB_API GEN     polhermite_eval0(int64_t n, GEN x, int64_t flag);
PARILIB_API GEN     polhermite_eval(int64_t n, GEN x);
PARILIB_API GEN     pollaguerre(int64_t n, GEN a, int64_t v);
PARILIB_API GEN     pollaguerre_eval(int64_t n, GEN a, GEN x);
PARILIB_API GEN     pollaguerre_eval0(int64_t n, GEN a, GEN x, int64_t flag);
PARILIB_API GEN     pollegendre(int64_t n, int64_t v);
PARILIB_API GEN     pollegendre_reduced(int64_t n, int64_t v);
PARILIB_API GEN     pollegendre_eval(int64_t n, GEN x);
PARILIB_API GEN     pollegendre_eval0(int64_t n, GEN x, int64_t flag);
PARILIB_API GEN     polint(GEN xa, GEN ya, GEN x, GEN *pe);
PARILIB_API GEN     polint_i(GEN X, GEN Y, GEN t, int64_t *pe);
PARILIB_API GEN     polintspec(GEN xa, GEN ya, GEN x, int64_t n, int64_t *pe);
PARILIB_API GEN     polchebyshev(int64_t n, int64_t kind, int64_t v);
PARILIB_API GEN     polchebyshev_eval(int64_t n, int64_t kind, GEN x);
PARILIB_API GEN     polchebyshev1(int64_t n, int64_t v);
PARILIB_API GEN     polchebyshev2(int64_t n, int64_t v);
PARILIB_API GEN     polrecip(GEN x);
PARILIB_API GEN     setbinop(GEN f, GEN x, GEN y);
PARILIB_API GEN     setintersect(GEN x, GEN y);
PARILIB_API int64_t    setisset(GEN x);
PARILIB_API GEN     setminus(GEN x, GEN y);
PARILIB_API int64_t    setsearch(GEN x, GEN y, int64_t flag);
PARILIB_API GEN     setunion(GEN x, GEN y);
PARILIB_API GEN     setunion_i(GEN x, GEN y);
PARILIB_API GEN     sort(GEN x);
PARILIB_API GEN     sort_factor(GEN y, void *data, int (*cmp)(void*,GEN,GEN));
PARILIB_API GEN     stirling(int64_t n, int64_t m, int64_t flag);
PARILIB_API GEN     stirling1(ulong n, ulong m);
PARILIB_API GEN     stirling2(ulong n, ulong m);
PARILIB_API int64_t    tablesearch(GEN T, GEN x, int (*cmp)(GEN,GEN));
PARILIB_API GEN     vecbinomial(int64_t n);
PARILIB_API int64_t    vecsearch(GEN v, GEN x, GEN k);
PARILIB_API GEN     vecsort(GEN x, GEN k);
PARILIB_API GEN     vecsort0(GEN x, GEN k, int64_t flag);
PARILIB_API int64_t    zv_search(GEN x, int64_t y);

/* bit.c */

PARILIB_API GEN     bits_to_int(GEN x, int64_t l);
PARILIB_API ulong   bits_to_u(GEN v, int64_t l);
PARILIB_API GEN     binaire(GEN x);
PARILIB_API GEN     binary_2k(GEN x, int64_t k);
PARILIB_API GEN     binary_2k_nv(GEN x, int64_t k);
PARILIB_API GEN     binary_zv(GEN x);
PARILIB_API int64_t    bittest(GEN x, int64_t n);
PARILIB_API GEN     fromdigits_2k(GEN x, int64_t k);
PARILIB_API GEN     gbitand(GEN x, GEN y);
PARILIB_API GEN     gbitneg(GEN x, int64_t n);
PARILIB_API GEN     gbitnegimply(GEN x, GEN y);
PARILIB_API GEN     gbitor(GEN x, GEN y);
PARILIB_API GEN     gbittest(GEN x, int64_t n);
PARILIB_API GEN     gbitxor(GEN x, GEN y);
PARILIB_API int64_t    hammingl(ulong w);
PARILIB_API int64_t    hammingweight(GEN n);
PARILIB_API GEN     ibitand(GEN x, GEN y);
PARILIB_API GEN     ibitnegimply(GEN x, GEN y);
PARILIB_API GEN     ibitor(GEN x, GEN y);
PARILIB_API GEN     ibitxor(GEN x, GEN y);
PARILIB_API GEN     nv_fromdigits_2k(GEN x, int64_t k);

/* bnflog.c */
PARILIB_API GEN bnflogef(GEN bnf, GEN pr);
PARILIB_API GEN bnflog(GEN bnf, GEN l);
PARILIB_API GEN bnflogdegree(GEN bnf, GEN A, GEN ell);
PARILIB_API int64_t nfislocalpower(GEN nf, GEN pr, GEN a, GEN n);
PARILIB_API int64_t rnfislocalcyclo(GEN rnf);

/* bnfunits.c */
PARILIB_API GEN     bnfisunit(GEN bnf, GEN x);
PARILIB_API GEN     bnfissunit(GEN bnf,GEN suni,GEN x);
PARILIB_API GEN     bnfsunit(GEN bnf,GEN s,int64_t PREC);
PARILIB_API GEN     bnfunits(GEN bnf, GEN S);
PARILIB_API GEN     bnfisunit0(GEN bnf, GEN x, GEN U);
PARILIB_API GEN     sunits_mod_units(GEN bnf, GEN S);

/* buch1.c */

PARILIB_API GEN     Buchquad(GEN D, double c1, double c2, int64_t prec);
PARILIB_API GEN     quadclassunit0(GEN x, int64_t flag,GEN data, int64_t prec);
PARILIB_API GEN     quadhilbert(GEN D, int64_t prec);
PARILIB_API GEN     quadray(GEN bnf, GEN f, int64_t prec);

/* buch2.c */

PARILIB_API GEN     Buchall(GEN P, int64_t flag, int64_t prec);
PARILIB_API GEN     Buchall_param(GEN P, double bach, double bach2, int64_t nbrelpid, int64_t flun, int64_t prec);
PARILIB_API GEN     bnf_build_cheapfu(GEN bnf);
PARILIB_API GEN     bnf_build_cycgen(GEN bnf);
PARILIB_API GEN     bnf_build_matalpha(GEN bnf);
PARILIB_API GEN     bnf_build_units(GEN bnf);
PARILIB_API GEN     bnf_compactfu(GEN bnf);
PARILIB_API GEN     bnf_compactfu_mat(GEN bnf);
PARILIB_API GEN     bnf_has_fu(GEN bnf);
PARILIB_API GEN     bnfinit0(GEN P,int64_t flag,GEN data,int64_t prec);
PARILIB_API GEN     bnfisprincipal0(GEN bnf, GEN x,int64_t flall);
PARILIB_API GEN     bnfnewprec(GEN nf, int64_t prec);
PARILIB_API GEN     bnfnewprec_shallow(GEN nf, int64_t prec);
PARILIB_API void    bnftestprimes(GEN bnf, GEN bound);
PARILIB_API GEN     bnrnewprec(GEN bnr, int64_t prec);
PARILIB_API GEN     bnrnewprec_shallow(GEN bnr, int64_t prec);
PARILIB_API GEN     isprincipalfact(GEN bnf, GEN C, GEN L, GEN f, int64_t flag);
PARILIB_API GEN     isprincipalfact_or_fail(GEN bnf, GEN C, GEN P, GEN e);
PARILIB_API GEN     isprincipal(GEN bnf, GEN x);
PARILIB_API GEN     nf_cxlog_normalize(GEN nf, GEN x, int64_t prec);
PARILIB_API GEN     nfcyclotomicunits(GEN nf, GEN zu);
PARILIB_API GEN     nfsign_units(GEN bnf, GEN archp, int add_zu);
PARILIB_API GEN     nfsign_tu(GEN bnf, GEN archp);
PARILIB_API GEN     nfsign_fu(GEN bnf, GEN archp);
PARILIB_API GEN     signunits(GEN bnf);

/* buch3.c */

PARILIB_API void    bnr_subgroup_sanitize(GEN *pbnr, GEN *pH);
PARILIB_API void    bnr_char_sanitize(GEN *pbnr, GEN *pchi);
PARILIB_API GEN     ABC_to_bnr(GEN A, GEN B, GEN C, GEN *H, int gen);
PARILIB_API GEN     Buchray(GEN bnf, GEN module, int64_t flag);
PARILIB_API GEN     Buchraymod(GEN bnf, GEN f, int64_t flag, GEN MOD);
PARILIB_API GEN     bnrautmatrix(GEN bnr, GEN aut);
PARILIB_API GEN     bnr_subgroup_check(GEN bnr, GEN H, GEN *pdeg);
PARILIB_API GEN     bnrchar(GEN bnr, GEN g, GEN v);
PARILIB_API GEN     bnrchar_primitive(GEN bnr, GEN chi, GEN bnrc);
PARILIB_API GEN     bnrclassno(GEN bnf,GEN ideal);
PARILIB_API GEN     bnrclassno0(GEN A,GEN B,GEN C);
PARILIB_API GEN     bnrclassnolist(GEN bnf,GEN listes);
PARILIB_API GEN     bnrchar_primitive_raw(GEN bnr, GEN bnrc, GEN chi);
PARILIB_API GEN     bnrconductor_factored(GEN bnr, GEN H);
PARILIB_API GEN     bnrconductor_raw(GEN bnr, GEN H);
PARILIB_API GEN     bnrconductormod(GEN bnr, GEN H0, GEN MOD);
PARILIB_API GEN     bnrconductor0(GEN A, GEN B, GEN C, int64_t flag);
PARILIB_API GEN     bnrconductor(GEN bnr, GEN H0, int64_t flag);
PARILIB_API GEN     bnrconductor_i(GEN bnr, GEN H0, int64_t flag);
PARILIB_API GEN     bnrconductorofchar(GEN bnr,GEN chi);
PARILIB_API GEN     bnrdisc0(GEN A, GEN B, GEN C, int64_t flag);
PARILIB_API GEN     bnrdisc(GEN bnr, GEN H, int64_t flag);
PARILIB_API GEN     bnrdisclist0(GEN bnf,GEN borne, GEN arch);
PARILIB_API GEN     bnrgaloismatrix(GEN bnr, GEN aut);
PARILIB_API GEN     bnrgaloisapply(GEN bnr, GEN mat, GEN x);
PARILIB_API GEN     bnrinit0(GEN bnf,GEN ideal,int64_t flag);
PARILIB_API GEN     bnrinitmod(GEN bnf, GEN ideal, int64_t flag, GEN MOD);
PARILIB_API int64_t    bnrisconductor0(GEN A, GEN B, GEN C);
PARILIB_API int64_t    bnrisconductor(GEN bnr, GEN H);
PARILIB_API int64_t    bnrisgalois(GEN bnr, GEN M, GEN H);
PARILIB_API GEN     bnrisprincipalmod(GEN bnf, GEN x, GEN mod, int64_t flag);
PARILIB_API GEN     bnrisprincipal(GEN bnf, GEN x,int64_t flag);
PARILIB_API GEN     bnrmap(GEN A, GEN B);
PARILIB_API GEN     bnrsurjection(GEN bnr1, GEN bnr2);
PARILIB_API GEN     bnfnarrow(GEN bnf);
PARILIB_API int64_t    bnfcertify(GEN bnf);
PARILIB_API int64_t    bnfcertify0(GEN bnf, int64_t flag);
PARILIB_API GEN     decodemodule(GEN nf, GEN fa);
PARILIB_API GEN     discrayabslist(GEN bnf,GEN listes);
PARILIB_API GEN     discrayabslistarch(GEN bnf, GEN arch, ulong bound);
PARILIB_API GEN     idealmoddivisor(GEN bnr, GEN x);
PARILIB_API GEN     isprincipalray(GEN bnf, GEN x);
PARILIB_API GEN     isprincipalraygen(GEN bnf, GEN x);
PARILIB_API GEN     nf_deg1_prime(GEN nf);
PARILIB_API GEN     nfarchstar(GEN nf,GEN x,GEN arch);
PARILIB_API GEN     rnfconductor(GEN bnf, GEN polrel);
PARILIB_API GEN     rnfconductor0(GEN bnf, GEN T, int64_t flag);
PARILIB_API int64_t    rnfisabelian(GEN nf, GEN pol);
PARILIB_API GEN     rnfnormgroup(GEN bnr, GEN polrel);
PARILIB_API GEN     subgrouplist0(GEN bnr, GEN indexbound, int64_t all);

/* buch4.c */

PARILIB_API GEN     bnfisnorm(GEN bnf,GEN x,int64_t flag);
PARILIB_API GEN     rnfisnorm(GEN S, GEN x, int64_t flag);
PARILIB_API GEN     rnfisnorminit(GEN bnf, GEN R, int galois);
PARILIB_API int64_t    nfhilbert(GEN bnf,GEN a,GEN b);
PARILIB_API int64_t    nfhilbert0(GEN bnf,GEN a,GEN b,GEN p);
PARILIB_API int64_t    hyperell_locally_soluble(GEN pol,GEN p);
PARILIB_API int64_t    nf_hyperell_locally_soluble(GEN nf,GEN pol,GEN p);

/* char.c */

PARILIB_API GEN     coprimes_zv(ulong N);
PARILIB_API int     char_check(GEN cyc, GEN chi);
PARILIB_API GEN     charconj(GEN cyc, GEN chi);
PARILIB_API GEN     charconj0(GEN cyc, GEN chi);
PARILIB_API GEN     chardiv(GEN x, GEN a, GEN b);
PARILIB_API GEN     chardiv0(GEN x, GEN a, GEN b);
PARILIB_API GEN     chareval(GEN G, GEN chi, GEN n, GEN z);
PARILIB_API GEN     chargalois(GEN G, GEN ORD);
PARILIB_API GEN     charker(GEN cyc, GEN chi);
PARILIB_API GEN     charker0(GEN cyc, GEN chi);
PARILIB_API GEN     charmul(GEN x, GEN a, GEN b);
PARILIB_API GEN     charmul0(GEN x, GEN a, GEN b);
PARILIB_API GEN     charorder(GEN cyc, GEN x);
PARILIB_API GEN     charorder0(GEN x, GEN chi);
PARILIB_API GEN     charpow(GEN cyc, GEN a, GEN N);
PARILIB_API GEN     charpow0(GEN x, GEN a, GEN N);
PARILIB_API GEN     char_denormalize(GEN cyc, GEN D, GEN chic);
PARILIB_API GEN     char_normalize(GEN chi, GEN ncyc);
PARILIB_API GEN     char_simplify(GEN D, GEN C);
PARILIB_API int     checkznstar_i(GEN G);
PARILIB_API GEN     cyc_normalize(GEN c);
PARILIB_API GEN     ncharvecexpo(GEN G, GEN nchi);
PARILIB_API GEN     znchar(GEN D);
PARILIB_API GEN     znchar_quad(GEN G, GEN D);
PARILIB_API int     zncharcheck(GEN G, GEN chi);
PARILIB_API GEN     zncharconductor(GEN G, GEN chi);
PARILIB_API GEN     zncharconj(GEN G, GEN chi);
PARILIB_API GEN     znchardecompose(GEN G, GEN chi, GEN Q);
PARILIB_API GEN     znchardiv(GEN G, GEN a, GEN b);
PARILIB_API GEN     znchareval(GEN G, GEN chi, GEN n, GEN z);
PARILIB_API GEN     zncharinduce(GEN G, GEN chi, GEN N);
PARILIB_API int64_t    zncharisodd(GEN G, GEN chi);
PARILIB_API GEN     zncharker(GEN G, GEN chi);
PARILIB_API GEN     zncharmul(GEN G, GEN a, GEN b);
PARILIB_API GEN     zncharorder(GEN G,  GEN chi);
PARILIB_API GEN     zncharpow(GEN G, GEN a, GEN n);
PARILIB_API GEN     znchartokronecker(GEN G, GEN chi, int64_t flag);
PARILIB_API GEN     znchartoprimitive(GEN G, GEN chi);
PARILIB_API int     znconrey_check(GEN cyc, GEN chi);
PARILIB_API GEN     znconrey_normalized(GEN G, GEN chi);
PARILIB_API GEN     znconreychar(GEN bid, GEN m);
PARILIB_API GEN     znconreyfromchar_normalized(GEN bid, GEN chi);
PARILIB_API GEN     znconreyconductor(GEN bid, GEN co, GEN *pm);
PARILIB_API GEN     znconreyexp(GEN bid, GEN x);
PARILIB_API GEN     znconreyfromchar(GEN bid, GEN chi);
PARILIB_API GEN     znconreylog(GEN bid, GEN x);
PARILIB_API GEN     znconreylog_normalize(GEN G, GEN m);
PARILIB_API GEN     znlog0(GEN h, GEN g, GEN o);
PARILIB_API int64_t    zv_cyc_minimal(GEN cyc, GEN g, GEN coprime);
PARILIB_API int64_t    zv_cyc_minimize(GEN cyc, GEN g, GEN coprime);

/* compile.c */

PARILIB_API GEN     closure_deriv(GEN G);
PARILIB_API GEN     closure_derivn(GEN G, int64_t k);
PARILIB_API int64_t    localvars_find(GEN pack, entree *ep);
PARILIB_API GEN     localvars_read_str(const char *str, GEN pack);
PARILIB_API GEN     snm_closure(entree *ep, GEN data);
PARILIB_API GEN     strtoclosure(const char *s, int64_t n, ...);
PARILIB_API GEN     strtofunction(const char *s);

/* concat.c */

PARILIB_API GEN     gconcat(GEN x, GEN y);
PARILIB_API GEN     gconcat1(GEN x);
PARILIB_API GEN     matconcat(GEN v);
PARILIB_API GEN     shallowconcat(GEN x, GEN y);
PARILIB_API GEN     shallowconcat1(GEN x);
PARILIB_API GEN     shallowmatconcat(GEN v);
PARILIB_API GEN     vconcat(GEN A, GEN B);

/* default.c */
enum { d_SILENT = 0, d_ACKNOWLEDGE, d_INITRC, d_RETURN };

PARILIB_API GEN default0(const char *a, const char *b);
PARILIB_API int64_t getrealprecision(void);
PARILIB_API entree *pari_is_default(const char *s);
PARILIB_API GEN sd_TeXstyle(const char *v, int64_t flag);
PARILIB_API GEN sd_colors(const char *v, int64_t flag);
PARILIB_API GEN sd_compatible(const char *v, int64_t flag);
PARILIB_API GEN sd_datadir(const char *v, int64_t flag);
PARILIB_API GEN sd_debug(const char *v, int64_t flag);
PARILIB_API GEN sd_debugfiles(const char *v, int64_t flag);
PARILIB_API GEN sd_debugmem(const char *v, int64_t flag);
PARILIB_API GEN sd_factor_add_primes(const char *v, int64_t flag);
PARILIB_API GEN sd_factor_proven(const char *v, int64_t flag);
PARILIB_API GEN sd_format(const char *v, int64_t flag);
PARILIB_API GEN sd_histsize(const char *v, int64_t flag);
PARILIB_API GEN sd_log(const char *v, int64_t flag);
PARILIB_API GEN sd_logfile(const char *v, int64_t flag);
PARILIB_API GEN sd_nbthreads(const char *v, int64_t flag);
PARILIB_API GEN sd_new_galois_format(const char *v, int64_t flag);
PARILIB_API GEN sd_output(const char *v, int64_t flag);
PARILIB_API GEN sd_parisize(const char *v, int64_t flag);
PARILIB_API GEN sd_parisizemax(const char *v, int64_t flag);
PARILIB_API GEN sd_path(const char *v, int64_t flag);
#ifdef _WIN32
PARILIB_API GEN sd_docpath(const char* v, int64_t flag);
PARILIB_API GEN sd_acrobatpath(const char* v, int64_t flag);
#endif

PARILIB_API GEN sd_prettyprinter(const char *v, int64_t flag);
PARILIB_API GEN sd_primelimit(const char *v, int64_t flag);
PARILIB_API GEN sd_realbitprecision(const char *v, int64_t flag);
PARILIB_API GEN sd_realprecision(const char *v, int64_t flag);
PARILIB_API GEN sd_secure(const char *v, int64_t flag);
PARILIB_API GEN sd_seriesprecision(const char *v, int64_t flag);
PARILIB_API GEN sd_simplify(const char *v, int64_t flag);
PARILIB_API GEN sd_sopath(char *v, int flag);
PARILIB_API GEN sd_strictargs(const char *v, int64_t flag);
PARILIB_API GEN sd_strictmatch(const char *v, int64_t flag);
PARILIB_API GEN sd_string(const char *v, int64_t flag, const char *s, char **f);
PARILIB_API GEN sd_threadsize(const char *v, int64_t flag);
PARILIB_API GEN sd_threadsizemax(const char *v, int64_t flag);
PARILIB_API GEN sd_intarray(const char *v, int64_t flag, GEN *pz, const char *s);
PARILIB_API GEN sd_toggle(const char *v, int64_t flag, const char *s, int *ptn);
PARILIB_API GEN sd_ulong(const char *v, int64_t flag, const char *s, ulong *ptn, ulong Min, ulong Max, const char **msg);
PARILIB_API GEN setdefault(const char *s, const char *v, int64_t flag);
PARILIB_API int64_t setrealprecision(int64_t n, int64_t *prec);

/* ecpp.c */
PARILIB_API GEN     ecpp(GEN N);
PARILIB_API GEN     ecppexport(GEN cert, int64_t flag);
PARILIB_API int64_t    ecppisvalid(GEN cert);
PARILIB_API int64_t    isprimeECPP(GEN N);



/* dirichlet.c */

PARILIB_API GEN     direuler(void *E, GEN (*eval)(void *, GEN), GEN a, GEN b, GEN c);
PARILIB_API GEN     dirpowers(int64_t n, GEN x, int64_t prec);
PARILIB_API GEN     dirpowerssum0(GEN N, GEN s, int64_t prec);
PARILIB_API GEN     dirpowerssum(ulong N, GEN s, int64_t prec);
PARILIB_API GEN     vecpowuu(int64_t N, ulong B);
PARILIB_API GEN     vecpowug(int64_t N, GEN B, int64_t prec);

/* ellanal.c */

PARILIB_API GEN     ellanalyticrank(GEN e, GEN eps, int64_t prec);
PARILIB_API GEN     ellanalyticrank_bitprec(GEN e, GEN eps, int64_t bitprec);
PARILIB_API GEN     ellanal_globalred_all(GEN e, GEN *N, GEN *cb, GEN *tam);
PARILIB_API GEN     ellheegner(GEN e);
PARILIB_API GEN     ellL1(GEN E, int64_t r, int64_t prec);
PARILIB_API GEN     ellL1_bitprec(GEN E, int64_t r, int64_t bitprec);

/* elldata.c */

PARILIB_API GEN     ellconvertname(GEN s);
PARILIB_API GEN     elldatagenerators(GEN E);
PARILIB_API GEN     ellidentify(GEN E);
PARILIB_API GEN     ellsearch(GEN A);
PARILIB_API GEN     ellsearchcurve(GEN name);
PARILIB_API void    forell(void *E, int64_t call(void*, GEN), int64_t a, int64_t b, int64_t flag);

/* ellfromeqn.c */

PARILIB_API GEN     ellfromeqn(GEN s);

/* elliptic.c */
enum { t_ELL_Rg = 0, t_ELL_Q, t_ELL_Qp, t_ELL_Fp, t_ELL_Fq, t_ELL_NF };
PARILIB_API int64_t    ellQ_get_CM(GEN e);
PARILIB_API int     ell_is_integral(GEN E);
PARILIB_API GEN     ellbasechar(GEN E);
PARILIB_API GEN     akell(GEN e, GEN n);
PARILIB_API GEN     ellan(GEN e, int64_t n);
PARILIB_API GEN     ellanQ_zv(GEN e, int64_t n);
PARILIB_API GEN     bilhell(GEN e, GEN z1, GEN z2, int64_t prec);
PARILIB_API void    checkell(GEN e);
PARILIB_API void    checkell_Fq(GEN e);
PARILIB_API void    checkell_Q(GEN e);
PARILIB_API void    checkell_Qp(GEN e);
PARILIB_API void    checkellisog(GEN v);
PARILIB_API void    checkellpt(GEN z);
PARILIB_API void    checkell5(GEN e);
PARILIB_API GEN     cxredsl2(GEN t, GEN *U);
PARILIB_API GEN     cxredsl2_i(GEN z, GEN *pU, GEN *czd);
PARILIB_API GEN     ec_bmodel(GEN e);
PARILIB_API GEN     ec_f_evalx(GEN E, GEN x);
PARILIB_API GEN     ec_h_evalx(GEN e, GEN x);
PARILIB_API GEN     ec_dFdx_evalQ(GEN E, GEN Q);
PARILIB_API GEN     ec_dFdy_evalQ(GEN E, GEN Q);
PARILIB_API GEN     ec_dmFdy_evalQ(GEN e, GEN Q);
PARILIB_API GEN     ec_2divpol_evalx(GEN E, GEN x);
PARILIB_API GEN     ec_3divpol_evalx(GEN E, GEN x);
PARILIB_API GEN     ec_half_deriv_2divpol_evalx(GEN E, GEN x);
PARILIB_API GEN     ellanal_globalred(GEN e, GEN *gr);
PARILIB_API GEN     ellQ_get_N(GEN e);
PARILIB_API void    ellQ_get_Nfa(GEN e, GEN *N, GEN *faN);
PARILIB_API GEN     ellQp_Tate_uniformization(GEN E, int64_t prec);
PARILIB_API GEN     ellQp_AGM(GEN E, int64_t prec);
PARILIB_API GEN     ellQp_u(GEN E, int64_t prec);
PARILIB_API GEN     ellQp_u2(GEN E, int64_t prec);
PARILIB_API GEN     ellQp_q(GEN E, int64_t prec);
PARILIB_API GEN     ellQp_ab(GEN E, int64_t prec);
PARILIB_API GEN     ellQp_L(GEN E, int64_t prec);
PARILIB_API GEN     ellQp_root(GEN E, int64_t prec);
PARILIB_API GEN     ellQtwist_bsdperiod(GEN E, int64_t s);
PARILIB_API GEN     ellR_area(GEN E, int64_t prec);
PARILIB_API GEN     ellR_ab(GEN E, int64_t prec);
PARILIB_API GEN     ellR_eta(GEN E, int64_t prec);
PARILIB_API GEN     ellR_omega(GEN x, int64_t prec);
PARILIB_API GEN     ellR_roots(GEN E, int64_t prec);
PARILIB_API GEN     elladd(GEN e, GEN z1, GEN z2);
PARILIB_API GEN     ellap(GEN e, GEN p);
PARILIB_API int64_t    ellap_CM_fast(GEN E, ulong p, int64_t CM);
PARILIB_API GEN     ellbsd(GEN e, int64_t prec);
PARILIB_API GEN     ellcard(GEN E, GEN p);
PARILIB_API GEN     ellchangecurve(GEN e, GEN ch);
PARILIB_API GEN     ellchangeinvert(GEN w);
PARILIB_API GEN     ellchangepoint(GEN x, GEN ch);
PARILIB_API GEN     ellchangepointinv(GEN x, GEN ch);
PARILIB_API GEN     elldivpol(GEN e, int64_t n, int64_t v);
PARILIB_API GEN     elleisnum(GEN om, int64_t k, int64_t flag, int64_t prec);
PARILIB_API GEN     elleta(GEN om, int64_t prec);
PARILIB_API GEN     ellff_get_card(GEN E);
PARILIB_API GEN     ellff_get_gens(GEN E);
PARILIB_API GEN     ellff_get_group(GEN E);
PARILIB_API GEN     ellff_get_o(GEN x);
PARILIB_API GEN     ellff_get_p(GEN E);
PARILIB_API GEN     ellff_get_m(GEN E);
PARILIB_API GEN     ellff_get_D(GEN E);
PARILIB_API GEN     ellfromj(GEN j);
PARILIB_API GEN     ellgenerators(GEN E);
PARILIB_API GEN     ellglobalred(GEN e1);
PARILIB_API GEN     ellgroup(GEN E, GEN p);
PARILIB_API GEN     ellgroup0(GEN E, GEN p, int64_t flag);
PARILIB_API GEN     ellheight0(GEN e, GEN a, GEN b, int64_t prec);
PARILIB_API GEN     ellheight(GEN e, GEN a, int64_t prec);
PARILIB_API GEN     ellheightmatrix(GEN E, GEN x, int64_t n);
PARILIB_API GEN     ellheightoo(GEN e, GEN z, int64_t prec);
PARILIB_API GEN     ellinit(GEN x, GEN p, int64_t prec);
PARILIB_API GEN     ellintegralmodel(GEN e, GEN *pv);
PARILIB_API GEN     ellintegralmodel_i(GEN e, GEN *pv);
PARILIB_API GEN     ellisoncurve(GEN e, GEN z);
PARILIB_API GEN     ellisotree(GEN e);
PARILIB_API int     ellissupersingular(GEN x, GEN p);
PARILIB_API int     elljissupersingular(GEN x);
PARILIB_API GEN     elllseries(GEN e, GEN s, GEN A, int64_t prec);
PARILIB_API GEN     elllocalred(GEN e, GEN p1);
PARILIB_API GEN     elllog(GEN e, GEN a, GEN g, GEN o);
PARILIB_API GEN     ellminimaldisc(GEN E);
PARILIB_API GEN     ellminimalmodel(GEN E, GEN *ptv);
PARILIB_API GEN     ellminimaltwist(GEN e);
PARILIB_API GEN     ellminimaltwist0(GEN e, int64_t fl);
PARILIB_API GEN     ellminimaltwistcond(GEN e);
PARILIB_API GEN     ellmul(GEN e, GEN z, GEN n);
PARILIB_API GEN     ellnf_vecarea(GEN E, int64_t prec);
PARILIB_API GEN     ellnf_veceta(GEN E, int64_t prec);
PARILIB_API GEN     ellnf_vecomega(GEN E, int64_t prec);
PARILIB_API GEN     ellneg(GEN e, GEN z);
PARILIB_API GEN     ellorder(GEN e, GEN p, GEN o);
PARILIB_API int64_t    ellorder_Q(GEN E, GEN P);
PARILIB_API GEN     ellordinate(GEN e, GEN x, int64_t prec);
PARILIB_API GEN     ellpadicheight0(GEN e, GEN p, int64_t n, GEN P, GEN Q);
PARILIB_API GEN     ellpadicheightmatrix(GEN e, GEN p, int64_t n, GEN P);
PARILIB_API GEN     ellperiods(GEN w, int64_t flag, int64_t prec);
PARILIB_API GEN     elltwist(GEN E, GEN D);
PARILIB_API GEN     ellrandom(GEN e);
PARILIB_API int64_t    ellrootno(GEN e, GEN p);
PARILIB_API int64_t    ellrootno_global(GEN e);
PARILIB_API GEN     ellsea(GEN E, int64_t smallfact);
PARILIB_API GEN     ellsigma(GEN om, GEN z, int64_t flag, int64_t prec);
PARILIB_API GEN     ellsub(GEN e, GEN z1, GEN z2);
PARILIB_API GEN     elltamagawa(GEN e);
PARILIB_API GEN     elltaniyama(GEN e, int64_t prec);
PARILIB_API GEN     elltatepairing(GEN E, GEN t, GEN s, GEN m);
PARILIB_API GEN     elltors(GEN e);
PARILIB_API GEN     elltors0(GEN e, int64_t flag);
PARILIB_API GEN     ellweilpairing(GEN E, GEN t, GEN s, GEN m);
PARILIB_API GEN     ellwp(GEN w, GEN z, int64_t prec);
PARILIB_API GEN     ellwp0(GEN w, GEN z, int64_t flag, int64_t prec);
PARILIB_API GEN     ellwpseries(GEN e, int64_t v, int64_t PRECDL);
PARILIB_API GEN     ellxn(GEN e, int64_t n, int64_t v);
PARILIB_API GEN     ellzeta(GEN om, GEN z, int64_t prec);
PARILIB_API int     oncurve(GEN e, GEN z);
PARILIB_API GEN     orderell(GEN e, GEN p);
PARILIB_API GEN     pointell(GEN e, GEN z, int64_t prec);
PARILIB_API GEN     point_to_a4a6(GEN E, GEN P, GEN p, GEN *pa4);
PARILIB_API GEN     point_to_a4a6_Fl(GEN E, GEN P, ulong p, ulong *pa4);
PARILIB_API GEN     zell(GEN e, GEN z, int64_t prec);

/* ellpadic.c */
PARILIB_API GEN     Qp_agm2_sequence(GEN a1, GEN b1);
PARILIB_API void    Qp_ascending_Landen(GEN AB, GEN *ptx, GEN *pty);
PARILIB_API void    Qp_descending_Landen(GEN AB, GEN *ptx, GEN *pty);
PARILIB_API GEN     ellformaldifferential(GEN e, int64_t n, int64_t v);
PARILIB_API GEN     ellformalexp(GEN e, int64_t n, int64_t v);
PARILIB_API GEN     ellformallog(GEN e, int64_t n, int64_t v);
PARILIB_API GEN     ellformalpoint(GEN e, int64_t n, int64_t v);
PARILIB_API GEN     ellformalw(GEN e, int64_t n, int64_t v);
PARILIB_API GEN     ellnonsingularmultiple(GEN e, GEN P);
PARILIB_API GEN     ellpadicL(GEN E, GEN p, int64_t n, GEN s, int64_t r, GEN D);
PARILIB_API GEN     ellpadicbsd(GEN E, GEN p, int64_t n, GEN D);
PARILIB_API GEN     ellpadicfrobenius(GEN E, ulong p, int64_t n);
PARILIB_API GEN     ellpadicheight(GEN e, GEN p, int64_t n, GEN P);
PARILIB_API GEN     ellpadiclog(GEN E, GEN p, int64_t n, GEN P);
PARILIB_API GEN     ellpadicregulator(GEN E, GEN p, int64_t n, GEN S);
PARILIB_API GEN     ellpadics2(GEN E, GEN p, int64_t n);

/* elltors.c */
PARILIB_API int64_t    ellisdivisible(GEN E, GEN P, GEN n, GEN *Q);

/* ellisog.c */

PARILIB_API GEN     ellisogenyapply(GEN f, GEN P);
PARILIB_API GEN     ellisogeny(GEN e, GEN G, int64_t only_image, int64_t vx, int64_t vy);
PARILIB_API GEN     ellisomat(GEN E, int64_t p, int64_t flag);
PARILIB_API GEN     ellweilcurve(GEN E, GEN *pm);

/* ellsea.c */

PARILIB_API GEN     Fp_ellcard_SEA(GEN a4, GEN a6, GEN p, int64_t smallfact);
PARILIB_API GEN     Fq_ellcard_SEA(GEN a4, GEN a6, GEN q, GEN T, GEN p, int64_t smallfact);
PARILIB_API GEN     ellmodulareqn(int64_t l, int64_t vx, int64_t vy);

/* es.c */

PARILIB_API GEN     externstr(const char *cmd);
PARILIB_API char    *gp_filter(const char *s);
PARILIB_API GEN     gpextern(const char *cmd);
PARILIB_API void    gpsystem(const char *s);
PARILIB_API GEN     readstr(const char *s);
PARILIB_API GEN     GENtoGENstr_nospace(GEN x);
PARILIB_API GEN     GENtoGENstr(GEN x);
PARILIB_API char*   GENtoTeXstr(GEN x);
PARILIB_API char*   GENtostr(GEN x);
PARILIB_API char*   GENtostr_raw(GEN x);
PARILIB_API char*   GENtostr_unquoted(GEN x);
PARILIB_API GEN     Str(GEN g);
PARILIB_API GEN     strexpand(GEN g);
PARILIB_API GEN     strtex(GEN g);
PARILIB_API void    brute(GEN g, char format, int64_t dec);
PARILIB_API void    dbgGEN(GEN x, int64_t nb);
PARILIB_API void    error0(GEN g);
PARILIB_API void    dbg_pari_heap(void);
PARILIB_API int     file_is_binary(FILE *f);
PARILIB_API void    err_flush(void);
PARILIB_API void    err_printf(const char* pat, ...);
PARILIB_API GEN     gp_getenv(const char *s);
PARILIB_API void    gp_fileclose(int64_t n);
PARILIB_API int64_t    gp_fileextern(char *s);
PARILIB_API void    gp_fileflush(int64_t n);
PARILIB_API void    gp_fileflush0(GEN n);
PARILIB_API int64_t    gp_fileopen(char *s, char *mode);
PARILIB_API GEN     gp_fileread(int64_t n);
PARILIB_API GEN     gp_filereadstr(int64_t n);
PARILIB_API void    gp_filewrite(int64_t n, const char *s);
PARILIB_API void    gp_filewrite1(int64_t n, const char *s);
PARILIB_API GEN     gp_read_file(const char *s);
PARILIB_API GEN     gp_read_str_multiline(const char *s, char *last);
PARILIB_API GEN     gp_read_stream(FILE *f);
PARILIB_API GEN     gp_readvec_file(char *s);
PARILIB_API GEN     gp_readvec_stream(FILE *f);
PARILIB_API void    gpinstall(const char *s, const char *code,
                 const char *gpname, const char *lib);
PARILIB_API GEN     gsprintf(const char *fmt, ...);
PARILIB_API GEN     gvsprintf(const char *fmt, va_list ap);
PARILIB_API char*   itostr(GEN x);
PARILIB_API void    matbrute(GEN g, char format, int64_t dec);
PARILIB_API char*   os_getenv(const char *s);
PARILIB_API char*   uordinal(ulong i);
PARILIB_API void    outmat(GEN x);
PARILIB_API void    output(GEN x);
PARILIB_API char*   RgV_to_str(GEN g, int64_t flag);
PARILIB_API void    pari_add_hist(GEN z, int64_t t, int64_t r);
PARILIB_API void    pari_ask_confirm(const char *s);
PARILIB_API void    pari_fclose(pariFILE *f);
PARILIB_API void    pari_flush(void);
PARILIB_API pariFILE* pari_fopen(const char *s, const char *mode);
PARILIB_API pariFILE* pari_fopen_or_fail(const char *s, const char *mode);
PARILIB_API pariFILE* pari_fopengz(const char *s);
PARILIB_API void    pari_fprintf(FILE *file, const char *fmt, ...);
PARILIB_API void    pari_fread_chars(void *b, size_t n, FILE *f);
PARILIB_API GEN     pari_get_hist(int64_t p);
PARILIB_API int64_t    pari_get_histrtime(int64_t p);
PARILIB_API int64_t    pari_get_histtime(int64_t p);
PARILIB_API char*   pari_get_homedir(const char *user);
PARILIB_API GEN     pari_histtime(int64_t p);
PARILIB_API int     pari_is_dir(const char *name);
PARILIB_API int     pari_is_file(const char *name);
PARILIB_API int     pari_last_was_newline(void);
PARILIB_API void    pari_set_last_newline(int last);
PARILIB_API ulong   pari_nb_hist(void);
PARILIB_API void    pari_printf(const char *fmt, ...);
PARILIB_API void    pari_putc(char c);
PARILIB_API void    pari_puts(const char *s);
PARILIB_API pariFILE* pari_safefopen(const char *s, const char *mode);
PARILIB_API char*   pari_sprintf(const char *fmt, ...);
PARILIB_API int     pari_stdin_isatty(void);
PARILIB_API char*   pari_unique_dir(const char *s);
PARILIB_API char*   pari_unique_filename(const char *s);
PARILIB_API char*   pari_unique_filename_suffix(const char *s, const char *suf);
PARILIB_API void    pari_unlink(const char *s);
PARILIB_API void    pari_vfprintf(FILE *file, const char *fmt, va_list ap);
PARILIB_API void    pari_vprintf(const char *fmt, va_list ap);
PARILIB_API char*   pari_vsprintf(const char *fmt, va_list ap);
PARILIB_API char*   path_expand(const char *s);
PARILIB_API void    out_print0(PariOUT *out, const char *sep, GEN g, int64_t flag);
PARILIB_API void    out_printf(PariOUT *out, const char *fmt, ...);
PARILIB_API void    out_putc(PariOUT *out, char c);
PARILIB_API void    out_puts(PariOUT *out, const char *s);
PARILIB_API void    out_term_color(PariOUT *out, int64_t c);
PARILIB_API void    out_vprintf(PariOUT *out, const char *fmt, va_list ap);
PARILIB_API char*   pari_sprint0(const char *msg, GEN g, int64_t flag);
PARILIB_API void    print(GEN g);
PARILIB_API void    printp(GEN g);
enum { f_RAW = 0, f_PRETTYMAT = 1, f_PRETTY = 3, f_TEX = 4 };
PARILIB_API void    print0(GEN g, int64_t flag);
PARILIB_API void    print1(GEN g);
PARILIB_API void    printf0(const char *fmt, GEN args);
PARILIB_API void    printsep(const char *s, GEN g);
PARILIB_API void    printsep1(const char *s, GEN g);
PARILIB_API void    printtex(GEN g);
PARILIB_API char*   stack_sprintf(const char *fmt, ...);
PARILIB_API void    str_init(pari_str *S, int use_stack);
PARILIB_API void    str_printf(pari_str *S, const char *fmt, ...);
PARILIB_API void    str_putc(pari_str *S, char c);
PARILIB_API void    str_puts(pari_str *S, const char *s);
PARILIB_API void    strftime_expand(const char *s, char *buf, int64_t max);
PARILIB_API GEN     strprintf(const char *fmt, GEN args);
PARILIB_API FILE*   switchin(const char *name);
PARILIB_API void    switchout(const char *name);
PARILIB_API void    term_color(int64_t c);
PARILIB_API char*   term_get_color(char *s, int64_t c);
PARILIB_API void    texe(GEN g, char format, int64_t dec);
PARILIB_API void    warning0(GEN g);
PARILIB_API void    write0(const char *s, GEN g);
PARILIB_API void    write1(const char *s, GEN g);
PARILIB_API void    writebin(const char *name, GEN x);
PARILIB_API void    writetex(const char *s, GEN g);

/* eval.c */

enum { br_NONE = 0, br_BREAK, br_NEXT, br_MULTINEXT, br_RETURN };
PARILIB_API void    bincopy_relink(GEN C, GEN vi);
PARILIB_API GEN     bitprecision0(GEN x,int64_t n);
PARILIB_API GEN     bitprecision00(GEN x,GEN n);
PARILIB_API GEN     break0(int64_t n);
PARILIB_API GEN     call0(GEN fun, GEN args);
PARILIB_API GEN     closure_callgen0prec(GEN C, int64_t prec);
PARILIB_API GEN     closure_callgen1(GEN C, GEN x);
PARILIB_API GEN     closure_callgen1prec(GEN C, GEN x, int64_t prec);
PARILIB_API GEN     closure_callgen2(GEN C, GEN x, GEN y);
PARILIB_API GEN     closure_callgenall(GEN C, int64_t n, ...);
PARILIB_API GEN     closure_callgenvec(GEN C, GEN args);
PARILIB_API GEN     closure_callgenvecdef(GEN C, GEN args, GEN def);
PARILIB_API GEN     closure_callgenvecdefprec(GEN C, GEN args, GEN def, int64_t prec);
PARILIB_API GEN     closure_callgenvecprec(GEN C, GEN args, int64_t prec);
PARILIB_API void    closure_callvoid1(GEN C, GEN x);
PARILIB_API int64_t    closure_context(int64_t start, int64_t level);
PARILIB_API void    closure_disassemble(GEN n);
PARILIB_API void    closure_err(int64_t level);
PARILIB_API GEN     closure_evalbrk(GEN C, int64_t *status);
PARILIB_API GEN     closure_evalgen(GEN C);
PARILIB_API GEN     closure_evalnobrk(GEN C);
PARILIB_API GEN     closure_evalres(GEN C);
PARILIB_API void    closure_evalvoid(GEN C);
PARILIB_API const char * closure_func_err(void);
PARILIB_API GEN     closure_trapgen(GEN C, int64_t numerr);
PARILIB_API GEN     copybin_unlink(GEN C);
PARILIB_API int64_t    getlocalprec(int64_t prec);
PARILIB_API int64_t    getlocalbitprec(int64_t bit);
PARILIB_API GEN     get_lex(int64_t vn);
PARILIB_API int64_t    get_localprec(void);
PARILIB_API int64_t    get_localbitprec(void);
PARILIB_API GEN     gp_call(void *E, GEN x);
PARILIB_API GEN     gp_callprec(void *E, GEN x, int64_t prec);
PARILIB_API GEN     gp_call2(void *E, GEN x, GEN y);
PARILIB_API int64_t    gp_callbool(void *E, GEN x);
PARILIB_API int64_t    gp_callvoid(void *E, GEN x);
PARILIB_API GEN     gp_eval(void *E, GEN x);
PARILIB_API int64_t    gp_evalbool(void *E, GEN x);
PARILIB_API GEN     gp_evalprec(void *E, GEN x, int64_t prec);
PARILIB_API GEN     gp_evalupto(void *E, GEN x);
PARILIB_API int64_t    gp_evalvoid(void *E, GEN x);
PARILIB_API void    localprec(GEN p);
PARILIB_API void    localbitprec(GEN p);
PARILIB_API int64_t    loop_break(void);
PARILIB_API GEN     next0(int64_t n);
PARILIB_API GEN     pareval(GEN C);
PARILIB_API GEN     pari_self(void);
PARILIB_API GEN     parsum(GEN a, GEN b, GEN code);
PARILIB_API GEN     parvector(int64_t n, GEN code);
PARILIB_API void    pop_lex(int64_t n);
PARILIB_API void    pop_localprec(void);
PARILIB_API GEN     precision0(GEN x,int64_t n);
PARILIB_API GEN     precision00(GEN x, GEN n);
PARILIB_API void    push_lex(GEN a, GEN C);
PARILIB_API void    push_localbitprec(int64_t p);
PARILIB_API void    push_localprec(int64_t p);
PARILIB_API GEN     return0(GEN x);
PARILIB_API void    set_lex(int64_t vn, GEN x);

/* forprime.c */

PARILIB_API int     forcomposite_init(forcomposite_t *C, GEN a, GEN b);
PARILIB_API GEN     forcomposite_next(forcomposite_t *C);
PARILIB_API GEN     forprime_next(forprime_t *T);
PARILIB_API int     forprime_init(forprime_t *T, GEN a, GEN b);
PARILIB_API int     forprimestep_init(forprime_t *T, GEN a, GEN b, GEN q);
PARILIB_API byteptr initprimes(ulong maxnum, int64_t *lenp, ulong *lastp);
PARILIB_API void    initprimetable(ulong maxnum);
PARILIB_API ulong   init_primepointer_geq(ulong a, byteptr *pd);
PARILIB_API ulong   init_primepointer_gt(ulong a, byteptr *pd);
PARILIB_API ulong   init_primepointer_leq(ulong a, byteptr *pd);
PARILIB_API ulong   init_primepointer_lt(ulong a, byteptr *pd);
PARILIB_API ulong   maxprime(void);
PARILIB_API ulong   maxprimeN(void);
PARILIB_API void    maxprime_check(ulong c);
PARILIB_API void    pari_init_primes(ulong maxprime);
PARILIB_API ulong   u_forprime_next(forprime_t *T);
PARILIB_API int     u_forprime_init(forprime_t *T, ulong a, ulong b);
PARILIB_API void    u_forprime_restrict(forprime_t *T, ulong c);
PARILIB_API int     u_forprime_arith_init(forprime_t *T, ulong a, ulong b, ulong c, ulong q);

/* FF.c */

PARILIB_API GEN     FF_1(GEN a);
PARILIB_API GEN     FF_Frobenius(GEN x, int64_t e);
PARILIB_API GEN     FF_Z_Z_muldiv(GEN x, GEN y, GEN z);
PARILIB_API GEN     FF_Q_add(GEN x, GEN y);
PARILIB_API GEN     FF_Z_add(GEN a, GEN b);
PARILIB_API GEN     FF_Z_mul(GEN a, GEN b);
PARILIB_API GEN     FF_add(GEN a, GEN b);
PARILIB_API GEN     FF_charpoly(GEN x);
PARILIB_API GEN     FF_conjvec(GEN x);
PARILIB_API GEN     FF_div(GEN a, GEN b);
PARILIB_API GEN     FF_ellcard(GEN E);
PARILIB_API GEN     FF_ellcard_SEA(GEN E, int64_t smallfact);
PARILIB_API GEN     FF_ellgens(GEN E);
PARILIB_API GEN     FF_ellgroup(GEN E, GEN *m);
PARILIB_API GEN     FF_elllog(GEN E, GEN P, GEN Q, GEN o);
PARILIB_API GEN     FF_ellmul(GEN E, GEN P, GEN n);
PARILIB_API GEN     FF_ellorder(GEN E, GEN P, GEN o);
PARILIB_API GEN     FF_elltwist(GEN E);
PARILIB_API GEN     FF_ellrandom(GEN E);
PARILIB_API GEN     FF_elltatepairing(GEN E, GEN P, GEN Q, GEN m);
PARILIB_API GEN     FF_ellweilpairing(GEN E, GEN P, GEN Q, GEN m);
PARILIB_API int     FF_equal(GEN a, GEN b);
PARILIB_API int     FF_equal0(GEN x);
PARILIB_API int     FF_equal1(GEN x);
PARILIB_API int     FF_equalm1(GEN x);
PARILIB_API int64_t    FF_f(GEN x);
PARILIB_API GEN     FF_gen(GEN x);
PARILIB_API GEN     FF_inv(GEN a);
PARILIB_API int64_t    FF_issquare(GEN x);
PARILIB_API int64_t    FF_issquareall(GEN x, GEN *pt);
PARILIB_API int64_t    FF_ispower(GEN x, GEN K, GEN *pt);
PARILIB_API GEN     FF_log(GEN a, GEN b, GEN o);
PARILIB_API GEN     FF_map(GEN m, GEN x);
PARILIB_API GEN     FF_minpoly(GEN x);
PARILIB_API GEN     FF_mod(GEN x);
PARILIB_API GEN     FF_mul(GEN a, GEN b);
PARILIB_API GEN     FF_mul2n(GEN a, int64_t n);
PARILIB_API GEN     FF_neg(GEN a);
PARILIB_API GEN     FF_neg_i(GEN a);
PARILIB_API GEN     FF_norm(GEN x);
PARILIB_API GEN     FF_order(GEN x, GEN o);
PARILIB_API GEN     FF_p(GEN x);
PARILIB_API GEN     FF_p_i(GEN x);
PARILIB_API GEN     FF_pow(GEN x, GEN n);
PARILIB_API GEN     FF_primroot(GEN x, GEN *o);
PARILIB_API GEN     FF_q(GEN x);
PARILIB_API int     FF_samefield(GEN x, GEN y);
PARILIB_API GEN     FF_sqr(GEN a);
PARILIB_API GEN     FF_sqrt(GEN a);
PARILIB_API GEN     FF_sqrtn(GEN x, GEN n, GEN *zetan);
PARILIB_API GEN     FF_sub(GEN x, GEN y);
PARILIB_API GEN     FF_to_F2xq(GEN x);
PARILIB_API GEN     FF_to_F2xq_i(GEN x);
PARILIB_API GEN     FF_to_Flxq(GEN x);
PARILIB_API GEN     FF_to_Flxq_i(GEN x);
PARILIB_API GEN     FF_to_FpXQ(GEN x);
PARILIB_API GEN     FF_to_FpXQ_i(GEN x);
PARILIB_API GEN     FF_trace(GEN x);
PARILIB_API int64_t    FF_var(GEN x);
PARILIB_API GEN     FF_zero(GEN a);
PARILIB_API GEN     FFM_FFC_invimage(GEN M, GEN C, GEN ff);
PARILIB_API GEN     FFM_FFC_gauss(GEN M, GEN C, GEN ff);
PARILIB_API GEN     FFM_FFC_mul(GEN M, GEN C, GEN ff);
PARILIB_API GEN     FFM_deplin(GEN M, GEN ff);
PARILIB_API GEN     FFM_det(GEN M, GEN ff);
PARILIB_API GEN     FFM_gauss(GEN M, GEN N, GEN ff);
PARILIB_API GEN     FFM_image(GEN M, GEN ff);
PARILIB_API GEN     FFM_indexrank(GEN M, GEN ff);
PARILIB_API GEN     FFM_inv(GEN M, GEN ff);
PARILIB_API GEN     FFM_invimage(GEN M, GEN N, GEN ff);
PARILIB_API GEN     FFM_ker(GEN M, GEN ff);
PARILIB_API GEN     FFM_mul(GEN M, GEN N, GEN ff);
PARILIB_API int64_t    FFM_rank(GEN M, GEN ff);
PARILIB_API GEN     FFM_suppl(GEN M, GEN ff);
PARILIB_API GEN     FFX_add(GEN Pf, GEN Qf, GEN ff);
PARILIB_API GEN     FFX_ddf(GEN f, GEN x);
PARILIB_API GEN     FFX_degfact(GEN Pf, GEN ff);
PARILIB_API GEN     FFX_disc(GEN Pf, GEN ff);
PARILIB_API GEN     FFX_extgcd(GEN Pf, GEN Qf, GEN ff, GEN *pt_Uf, GEN *pt_Vf);
PARILIB_API GEN     FFX_factor(GEN f, GEN x);
PARILIB_API GEN     FFX_factor_squarefree(GEN f, GEN x);
PARILIB_API GEN     FFX_gcd(GEN Pf, GEN Qf, GEN ff);
PARILIB_API GEN     FFX_halfgcd(GEN Pf, GEN Qf, GEN ff);
PARILIB_API int64_t    FFX_ispower(GEN Pf, int64_t k, GEN ff, GEN *pt_r);
PARILIB_API GEN     FFX_mul(GEN Pf, GEN Qf, GEN ff);
PARILIB_API GEN     FFX_preimage(GEN x, GEN F, GEN y);
PARILIB_API GEN     FFX_preimagerel(GEN x, GEN F, GEN y);
PARILIB_API GEN     FFX_rem(GEN Pf, GEN Qf, GEN ff);
PARILIB_API GEN     FFX_resultant(GEN Pf, GEN Qf, GEN ff);
PARILIB_API GEN     FFX_roots(GEN f, GEN x);
PARILIB_API GEN     FFX_sqr(GEN Pf, GEN ff);
PARILIB_API GEN     FFXQ_inv(GEN Pf, GEN Qf, GEN ff);
PARILIB_API GEN     FFXQ_minpoly(GEN Pf, GEN Qf, GEN ff);
PARILIB_API GEN     FFXQ_mul(GEN Pf, GEN Qf, GEN Sf, GEN ff);
PARILIB_API GEN     FFXQ_sqr(GEN Pf, GEN Qf, GEN ff);
PARILIB_API GEN     FqX_to_FFX(GEN x, GEN ff);
PARILIB_API GEN     Fq_to_FF(GEN x, GEN ff);
PARILIB_API GEN     Z_FF_div(GEN a, GEN b);
PARILIB_API GEN     ffembed(GEN a, GEN b);
PARILIB_API GEN     ffextend(GEN a, GEN P, int64_t v);
PARILIB_API GEN     fffrobenius(GEN m, int64_t n);
PARILIB_API GEN     ffgen(GEN T, int64_t v);
PARILIB_API GEN     ffinvmap(GEN m);
PARILIB_API GEN     fflog(GEN x, GEN g, GEN o);
PARILIB_API GEN     ffmap(GEN m, GEN x);
PARILIB_API GEN     ffmaprel(GEN m, GEN x);
PARILIB_API GEN     ffcompomap(GEN m, GEN n);
PARILIB_API GEN     fforder(GEN x, GEN o);
PARILIB_API GEN     ffprimroot(GEN x, GEN *o);
PARILIB_API GEN     ffrandom(GEN ff);
PARILIB_API int     Rg_is_FF(GEN c, GEN *ff);
PARILIB_API int     RgC_is_FFC(GEN x, GEN *ff);
PARILIB_API int     RgM_is_FFM(GEN x, GEN *ff);
PARILIB_API GEN     p_to_FF(GEN p, int64_t v);
PARILIB_API GEN     Tp_to_FF(GEN T, GEN p);

/* galconj.c */

PARILIB_API GEN     checkgal(GEN gal);
PARILIB_API GEN     checkgroup(GEN g, GEN *S);
PARILIB_API GEN     checkgroupelts(GEN gal);
PARILIB_API GEN     embed_disc(GEN r, int64_t r1, int64_t prec);
PARILIB_API GEN     embed_roots(GEN r, int64_t r1);
PARILIB_API GEN     galois_group(GEN gal);
PARILIB_API GEN     galoisconj(GEN nf, GEN d);
PARILIB_API GEN     galoisconj0(GEN nf, int64_t flag, GEN d, int64_t prec);
PARILIB_API GEN     galoisconjclasses(GEN gal);
PARILIB_API GEN     galoisexport(GEN gal, int64_t format);
PARILIB_API GEN     galoisfixedfield(GEN gal, GEN v, int64_t flag, int64_t y);
PARILIB_API GEN     galoisidentify(GEN gal);
PARILIB_API GEN     galoisinit(GEN nf, GEN den);
PARILIB_API GEN     galoisisabelian(GEN gal, int64_t flag);
PARILIB_API int64_t    galoisisnormal(GEN gal, GEN sub);
PARILIB_API GEN     galoispermtopol(GEN gal, GEN perm);
PARILIB_API GEN     galoissubgroups(GEN G);
PARILIB_API GEN     galoissubfields(GEN G, int64_t flag, int64_t v);
PARILIB_API int64_t    numberofconjugates(GEN T, int64_t pdepart);
PARILIB_API GEN     vandermondeinverse(GEN L, GEN T, GEN den, GEN prep);

/* galois.c */

PARILIB_API GEN     polgalois(GEN x, int64_t prec);

/* galpol.c */

PARILIB_API GEN     galoisnbpol(int64_t a);
PARILIB_API GEN     galoisgetgroup(int64_t a, int64_t b);
PARILIB_API GEN     galoisgetname(int64_t a, int64_t b);
PARILIB_API GEN     galoisgetpol(int64_t a, int64_t b, int64_t s);

/* gen1.c */
PARILIB_API GEN     conj_i(GEN x);
PARILIB_API GEN     conjvec(GEN x,int64_t prec);
PARILIB_API GEN     gadd(GEN x, GEN y);
PARILIB_API GEN     gaddsg(int64_t x, GEN y);
PARILIB_API GEN     gconj(GEN x);
PARILIB_API GEN     gdiv(GEN x, GEN y);
PARILIB_API GEN     gdivgs(GEN x, int64_t s);
PARILIB_API GEN     ginv(GEN x);
PARILIB_API GEN     gmul(GEN x, GEN y);
PARILIB_API GEN     gmul2n(GEN x, int64_t n);
PARILIB_API GEN     gmulsg(int64_t s, GEN y);
PARILIB_API GEN     gsqr(GEN x);
PARILIB_API GEN     gsub(GEN x, GEN y);
PARILIB_API GEN     gsubsg(int64_t x, GEN y);
PARILIB_API GEN     mulcxI(GEN x);
PARILIB_API GEN     mulcxmI(GEN x);
PARILIB_API GEN     mulcxpowIs(GEN x, int64_t k);
PARILIB_API GEN     Qdivii(GEN x1, GEN x2);
PARILIB_API GEN     Qdiviu(GEN x, ulong y);
PARILIB_API GEN     Qdivis(GEN x, int64_t y);
PARILIB_API GEN     ser_normalize(GEN x);

/* gen2.c */

PARILIB_API GEN     gassoc_proto(GEN f(GEN,GEN),GEN,GEN);
PARILIB_API GEN     map_proto_G(GEN f(GEN), GEN x);
PARILIB_API GEN     map_proto_lG(int64_t f(GEN), GEN x);
PARILIB_API GEN     map_proto_lGL(int64_t f(GEN,int64_t), GEN x, int64_t y);

PARILIB_API int64_t    Q_lval(GEN x, ulong p);
PARILIB_API int64_t    Q_lvalrem(GEN x, ulong p, GEN *y);
PARILIB_API int64_t    Q_pval(GEN x, GEN p);
PARILIB_API int64_t    Q_pvalrem(GEN x, GEN p, GEN *y);
PARILIB_API int64_t    RgX_val(GEN x);
PARILIB_API int64_t    RgX_valrem(GEN x, GEN *z);
PARILIB_API int64_t    RgX_valrem_inexact(GEN x, GEN *Z);
PARILIB_API int64_t    RgXV_maxdegree(GEN x);
PARILIB_API int     ZV_Z_dvd(GEN v, GEN p);
PARILIB_API int64_t    ZV_pval(GEN x, GEN p);
PARILIB_API int64_t    ZV_pvalrem(GEN x, GEN p, GEN *px);
PARILIB_API int64_t    ZV_lval(GEN x, ulong p);
PARILIB_API int64_t    ZV_lvalrem(GEN x, ulong p, GEN *px);
PARILIB_API int64_t    ZX_lvalrem(GEN x, ulong p, GEN *px);
PARILIB_API int64_t    ZX_lval(GEN x, ulong p);
PARILIB_API int64_t    ZX_pval(GEN x, GEN p);
PARILIB_API int64_t    ZX_pvalrem(GEN x, GEN p, GEN *px);
PARILIB_API int64_t    Z_lval(GEN n, ulong p);
PARILIB_API int64_t    Z_lvalrem(GEN n, ulong p, GEN *py);
PARILIB_API int64_t    Z_lvalrem_stop(GEN *n, ulong p, int *stop);
PARILIB_API int64_t    Z_pval(GEN n, GEN p);
PARILIB_API int64_t    Z_pvalrem(GEN x, GEN p, GEN *py);
PARILIB_API GEN     cgetp(GEN x);
PARILIB_API GEN     cvstop2(int64_t s, GEN y);
PARILIB_API GEN     cvtop(GEN x, GEN p, int64_t l);
PARILIB_API GEN     cvtop2(GEN x, GEN y);
PARILIB_API int     cx_approx_equal(GEN a, GEN b);
PARILIB_API GEN     gabs(GEN x, int64_t prec);
PARILIB_API void    gaffect(GEN x, GEN y);
PARILIB_API void    gaffsg(int64_t s, GEN x);
PARILIB_API int     gcmp(GEN x, GEN y);
PARILIB_API int     gequal0(GEN x);
PARILIB_API int     gequal1(GEN x);
PARILIB_API int     gequalX(GEN x);
PARILIB_API int     gequalm1(GEN x);
PARILIB_API int     gcmpsg(int64_t x, GEN y);
PARILIB_API GEN     gcvtop(GEN x, GEN p, int64_t r);
PARILIB_API int     gequal(GEN x, GEN y);
PARILIB_API int     gequalsg(int64_t s, GEN x);
PARILIB_API int64_t    gexpo(GEN x);
PARILIB_API int64_t    gexpo_safe(GEN x);
PARILIB_API GEN     gpexponent(GEN x);
PARILIB_API GEN     gpvaluation(GEN x, GEN p);
PARILIB_API int64_t    gvaluation(GEN x, GEN p);
PARILIB_API int     gidentical(GEN x, GEN y);
PARILIB_API int64_t    glength(GEN x);
PARILIB_API GEN     gmax(GEN x, GEN y);
PARILIB_API GEN     gmaxgs(GEN x, int64_t y);
PARILIB_API GEN     gmin(GEN x, GEN y);
PARILIB_API GEN     gmings(GEN x, int64_t y);
PARILIB_API GEN     gneg(GEN x);
PARILIB_API GEN     gneg_i(GEN x);
PARILIB_API int     gsigne(GEN x);
PARILIB_API GEN     gtolist(GEN x);
PARILIB_API int64_t    gtolong(GEN x);
PARILIB_API int     lexcmp(GEN x, GEN y);
PARILIB_API GEN     listinsert(GEN list, GEN object, int64_t index);
PARILIB_API void    listpop(GEN L, int64_t index);
PARILIB_API void    listpop0(GEN L, int64_t index);
PARILIB_API GEN     listput(GEN list, GEN object, int64_t index);
PARILIB_API GEN     listput0(GEN list, GEN object, int64_t index);
PARILIB_API void    listsort(GEN list, int64_t flag);
PARILIB_API GEN     matsize(GEN x);
PARILIB_API GEN     mklist(void);
PARILIB_API GEN     mklist_typ(int64_t t);
PARILIB_API GEN     mklistcopy(GEN x);
PARILIB_API GEN     mkmap(void);
PARILIB_API GEN     normalize(GEN x);
PARILIB_API GEN     normalizepol(GEN x);
PARILIB_API GEN     normalizepol_approx(GEN x, int64_t lx);
PARILIB_API GEN     normalizepol_lg(GEN x, int64_t lx);
PARILIB_API ulong   padic_to_Fl(GEN x, ulong p);
PARILIB_API GEN     padic_to_Fp(GEN x, GEN Y);
PARILIB_API GEN     quadtofp(GEN x, int64_t l);
PARILIB_API int64_t    sizedigit(GEN x);
PARILIB_API int64_t    u_lval(ulong x, ulong p);
PARILIB_API int64_t    u_lvalrem(ulong x, ulong p, ulong *py);
PARILIB_API int64_t    u_lvalrem_stop(ulong *n, ulong p, int *stop);
PARILIB_API int64_t    u_pval(ulong x, GEN p);
PARILIB_API int64_t    u_pvalrem(ulong x, GEN p, ulong *py);
PARILIB_API int64_t    vecindexmax(GEN x);
PARILIB_API int64_t    vecindexmin(GEN x);
PARILIB_API GEN     vecmax0(GEN x, GEN *pv);
PARILIB_API GEN     vecmax(GEN x);
PARILIB_API GEN     vecmin0(GEN x, GEN *pv);
PARILIB_API GEN     vecmin(GEN x);
PARILIB_API int64_t    z_lval(int64_t s, ulong p);
PARILIB_API int64_t    z_lvalrem(int64_t s, ulong p, int64_t *py);
PARILIB_API int64_t    z_pval(int64_t n, GEN p);
PARILIB_API int64_t    z_pvalrem(int64_t n, GEN p, int64_t *py);
PARILIB_API int64_t    zx_lval(GEN f, int64_t p);

/* Ser.c */

PARILIB_API GEN     RgX_to_ser(GEN x, int64_t l);
PARILIB_API GEN     RgX_to_ser_inexact(GEN x, int64_t l);
PARILIB_API GEN     gtoser(GEN x, int64_t v, int64_t d);
PARILIB_API GEN     gtoser_prec(GEN x, int64_t v, int64_t d);
PARILIB_API GEN     rfrac_to_ser(GEN x, int64_t l);
PARILIB_API GEN     rfracrecip_to_ser_absolute(GEN R, int64_t l);
PARILIB_API int64_t    rfracrecip(GEN *pn, GEN *pd);
PARILIB_API GEN     scalarser(GEN x, int64_t v, int64_t prec);
PARILIB_API GEN     sertoser(GEN x, int64_t prec);
PARILIB_API GEN     toser_i(GEN x);
PARILIB_API GEN     RgV_to_ser(GEN x, int64_t v, int64_t l);
PARILIB_API GEN     Ser0(GEN x, int64_t v, GEN d, int64_t prec);

/* gen3.c */

PARILIB_API GEN     padic_to_Q(GEN x);
PARILIB_API GEN     padic_to_Q_shallow(GEN x);
PARILIB_API GEN     QpV_to_QV(GEN v);
PARILIB_API GEN     RgM_mulreal(GEN x, GEN y);
PARILIB_API GEN     RgX_cxeval(GEN T, GEN u, GEN ui);
PARILIB_API GEN     RgX_deflate_max(GEN x0, int64_t *m);
PARILIB_API int64_t    RgX_deflate_order(GEN x);
PARILIB_API int64_t    ZX_deflate_order(GEN x);
PARILIB_API GEN     ZX_deflate_max(GEN x, int64_t *m);
PARILIB_API int64_t    RgX_degree(GEN x,int64_t v);
PARILIB_API GEN     RgX_integ(GEN x);
PARILIB_API GEN     ceil_safe(GEN x);
PARILIB_API GEN     ceilr(GEN x);
PARILIB_API GEN     centerlift(GEN x);
PARILIB_API GEN     centerlift0(GEN x,int64_t v);
PARILIB_API GEN     compo(GEN x, int64_t n);
PARILIB_API GEN     deg1pol(GEN x1, GEN x0,int64_t v);
PARILIB_API GEN     deg1pol_shallow(GEN x1, GEN x0,int64_t v);
PARILIB_API GEN     deg2pol_shallow(GEN x2, GEN x1, GEN x0,int64_t v);
PARILIB_API int64_t    degree(GEN x);
PARILIB_API GEN     denom(GEN x);
PARILIB_API GEN     denom_i(GEN x);
PARILIB_API GEN     denominator(GEN x, GEN D);
PARILIB_API GEN     deriv(GEN x, int64_t v);
PARILIB_API GEN     derivn(GEN x, int64_t n, int64_t v);
PARILIB_API GEN     derivser(GEN x);
PARILIB_API GEN     diffop(GEN x, GEN v, GEN dv);
PARILIB_API GEN     diffop0(GEN x, GEN v, GEN dv, int64_t n);
PARILIB_API GEN     diviiround(GEN x, GEN y);
PARILIB_API GEN     divrem(GEN x, GEN y, int64_t v);
PARILIB_API GEN     floor_safe(GEN x);
PARILIB_API GEN     gceil(GEN x);
PARILIB_API GEN     gcvtoi(GEN x, int64_t *e);
PARILIB_API GEN     gdeflate(GEN x, int64_t v, int64_t d);
PARILIB_API GEN     gdivent(GEN x, GEN y);
PARILIB_API GEN     gdiventgs(GEN x, int64_t y);
PARILIB_API GEN     gdiventsg(int64_t x, GEN y);
PARILIB_API GEN     gdiventres(GEN x, GEN y);
PARILIB_API GEN     gdivmod(GEN x, GEN y, GEN *pr);
PARILIB_API GEN     gdivround(GEN x, GEN y);
PARILIB_API int     gdvd(GEN x, GEN y);
PARILIB_API GEN     geq(GEN x, GEN y);
PARILIB_API GEN     geval(GEN x);
PARILIB_API GEN     gfloor(GEN x);
PARILIB_API GEN     gtrunc2n(GEN x, int64_t s);
PARILIB_API GEN     gfrac(GEN x);
PARILIB_API GEN     gge(GEN x, GEN y);
PARILIB_API GEN     ggrando(GEN x, int64_t n);
PARILIB_API GEN     ggt(GEN x, GEN y);
PARILIB_API GEN     gimag(GEN x);
PARILIB_API GEN     gisexactzero(GEN g);
PARILIB_API GEN     gle(GEN x, GEN y);
PARILIB_API GEN     glt(GEN x, GEN y);
PARILIB_API GEN     gmod(GEN x, GEN y);
PARILIB_API GEN     gmodgs(GEN x, int64_t y);
PARILIB_API GEN     gmodsg(int64_t x, GEN y);
PARILIB_API GEN     gmodulo(GEN x,GEN y);
PARILIB_API GEN     gmodulsg(int64_t x, GEN y);
PARILIB_API GEN     gmodulss(int64_t x, int64_t y);
PARILIB_API GEN     gne(GEN x, GEN y);
PARILIB_API GEN     gnot(GEN x);
PARILIB_API GEN     gpolvar(GEN y);
PARILIB_API GEN     gppadicprec(GEN x, GEN p);
PARILIB_API GEN     gppoldegree(GEN x, int64_t v);
PARILIB_API int64_t    gprecision(GEN x);
PARILIB_API GEN     gpserprec(GEN x, int64_t v);
PARILIB_API GEN     greal(GEN x);
PARILIB_API GEN     grndtoi(GEN x, int64_t *e);
PARILIB_API GEN     ground(GEN x);
PARILIB_API GEN     gshift(GEN x, int64_t n);
PARILIB_API GEN     gsubst(GEN x, int64_t v, GEN y);
PARILIB_API GEN     gsubstpol(GEN x, GEN v, GEN y);
PARILIB_API GEN     gsubstvec(GEN x, GEN v, GEN y);
PARILIB_API GEN     gtocol(GEN x);
PARILIB_API GEN     gtocol0(GEN x, int64_t n);
PARILIB_API GEN     gtocolrev(GEN x);
PARILIB_API GEN     gtocolrev0(GEN x, int64_t n);
PARILIB_API GEN     gtopoly(GEN x, int64_t v);
PARILIB_API GEN     gtopolyrev(GEN x, int64_t v);
PARILIB_API GEN     gtovec(GEN x);
PARILIB_API GEN     gtovec0(GEN x, int64_t n);
PARILIB_API GEN     gtovecrev(GEN x);
PARILIB_API GEN     gtovecrev0(GEN x, int64_t n);
PARILIB_API GEN     gtovecsmall(GEN x);
PARILIB_API GEN     gtovecsmall0(GEN x, int64_t n);
PARILIB_API GEN     gtrunc(GEN x);
PARILIB_API int64_t    gvar(GEN x);
PARILIB_API int64_t    gvar2(GEN x);
PARILIB_API GEN     hqfeval(GEN q, GEN x);
PARILIB_API GEN     imag_i(GEN x);
PARILIB_API GEN     integ(GEN x, int64_t v);
PARILIB_API GEN     integser(GEN x);
PARILIB_API GEN     ser_inv(GEN b);
PARILIB_API int     iscomplex(GEN x);
PARILIB_API int     isexactzero(GEN g);
PARILIB_API int     isrationalzeroscalar(GEN g);
PARILIB_API int     isinexact(GEN x);
PARILIB_API int     isinexactreal(GEN x);
PARILIB_API int     isint(GEN n, GEN *ptk);
PARILIB_API int     isrationalzero(GEN g);
PARILIB_API int     issmall(GEN n, int64_t *ptk);
PARILIB_API GEN     lift(GEN x);
PARILIB_API GEN     lift_shallow(GEN x);
PARILIB_API GEN     lift0(GEN x,int64_t v);
PARILIB_API GEN     liftall(GEN x);
PARILIB_API GEN     liftall_shallow(GEN x);
PARILIB_API GEN     liftint(GEN x);
PARILIB_API GEN     liftint_shallow(GEN x);
PARILIB_API GEN     liftpol(GEN x);
PARILIB_API GEN     liftpol_shallow(GEN x);
PARILIB_API GEN     mkcoln(int64_t n, ...);
PARILIB_API GEN     mkintn(int64_t n, ...);
PARILIB_API GEN     mkpoln(int64_t n, ...);
PARILIB_API GEN     mkvecn(int64_t n, ...);
PARILIB_API GEN     mkvecsmalln(int64_t n, ...);
PARILIB_API GEN     modRr_safe(GEN x, GEN y);
PARILIB_API GEN     mulreal(GEN x, GEN y);
PARILIB_API GEN     numer(GEN x);
PARILIB_API GEN     numer_i(GEN x);
PARILIB_API GEN     numerator(GEN x, GEN D);
PARILIB_API int64_t    padicprec(GEN x, GEN p);
PARILIB_API int64_t    padicprec_relative(GEN x);
PARILIB_API GEN     polcoef(GEN x, int64_t n, int64_t v);
PARILIB_API GEN     polcoef_i(GEN x, int64_t n, int64_t v);
PARILIB_API int64_t    poldegree(GEN x,int64_t v);
PARILIB_API GEN     poleval(GEN x, GEN y);
PARILIB_API GEN     pollead(GEN x,int64_t v);
PARILIB_API int64_t    precision(GEN x);
PARILIB_API GEN     qf_apply_RgM(GEN q, GEN M);
PARILIB_API GEN     qf_apply_ZM(GEN q, GEN M);
PARILIB_API GEN     qfb_apply_ZM(GEN q, GEN M);
PARILIB_API GEN     qfbil(GEN x, GEN y, GEN q);
PARILIB_API GEN     qfeval(GEN q, GEN x);
PARILIB_API GEN     qfeval0(GEN q, GEN x, GEN y);
PARILIB_API GEN     qfevalb(GEN q, GEN x, GEN y);
PARILIB_API GEN     qfnorm(GEN x, GEN q);
PARILIB_API GEN     real_i(GEN x);
PARILIB_API GEN     round0(GEN x, GEN *pte);
PARILIB_API GEN     roundr(GEN x);
PARILIB_API GEN     roundr_safe(GEN x);
PARILIB_API GEN     scalarpol(GEN x, int64_t v);
PARILIB_API GEN     scalarpol_shallow(GEN x, int64_t v);
PARILIB_API GEN     ser_unscale(GEN P, GEN h);
PARILIB_API int64_t    serprec(GEN x, int64_t v);
PARILIB_API GEN     serreverse(GEN x);
PARILIB_API GEN     simplify(GEN x);
PARILIB_API GEN     simplify_shallow(GEN x);
PARILIB_API GEN     tayl(GEN x, int64_t v, int64_t precdl);
PARILIB_API GEN     trunc0(GEN x, GEN *pte);
PARILIB_API GEN     uu32toi(ulong a, ulong b);
PARILIB_API GEN     uu32toineg(ulong a, ulong b);
PARILIB_API GEN     vars_sort_inplace(GEN z);
PARILIB_API GEN     vars_to_RgXV(GEN h);
PARILIB_API GEN     variables_vecsmall(GEN x);
PARILIB_API GEN     variables_vec(GEN x);

/* genus2red.c */

PARILIB_API GEN     genus2red(GEN PQ, GEN p);

/* groupid.c */

PARILIB_API int64_t    group_ident(GEN G, GEN S);
PARILIB_API int64_t    group_ident_trans(GEN G, GEN S);

/* hash.c */

PARILIB_API hashtable *hash_create_ulong(ulong s, int64_t stack);
PARILIB_API hashtable *hash_create_str(ulong s, int64_t stack);
PARILIB_API hashtable *hash_create(ulong minsize, ulong (*hash)(void*), int (*eq)(void*,void*), int use_stack);
PARILIB_API void    hash_dbg(hashtable *h);
PARILIB_API GEN     hash_haskey_GEN(hashtable *h, void *k);
PARILIB_API int     hash_haskey_long(hashtable *h, void *k, int64_t *v);
PARILIB_API void    hash_init(hashtable *h, ulong minsize, ulong (*hash)(void*),
                                int (*eq)(void*,void*), int use_stack);
PARILIB_API void    hash_init_GEN(hashtable *h, ulong minsize, int (*eq)(GEN,GEN), int use_stack);
PARILIB_API void    hash_init_ulong(hashtable *h, ulong minsize, int use_stack);
PARILIB_API void    hash_insert(hashtable *h, void *k, void *v);
PARILIB_API void    hash_insert_long(hashtable *h, void *k, int64_t v);
PARILIB_API void    hash_insert2(hashtable *h, void *k, void *v, ulong hash);
PARILIB_API GEN     hash_keys(hashtable *h);
PARILIB_API GEN     hash_values(hashtable *h);
PARILIB_API hashentry *hash_search(hashtable *h, void *k);
PARILIB_API hashentry *hash_search2(hashtable *h, void *k, ulong hash);
PARILIB_API hashentry *hash_select(hashtable *h, void *k, void *E,int(*select)(void *,hashentry *));
PARILIB_API hashentry *hash_remove(hashtable *h, void *k);
PARILIB_API hashentry *hash_remove_select(hashtable *h, void *k, void *E, int (*select)(void*,hashentry*));
PARILIB_API void    hash_destroy(hashtable *h);
PARILIB_API ulong   hash_GEN(GEN x);
PARILIB_API ulong   hash_zv(GEN x);

/* hyperell.c */

PARILIB_API GEN     hyperellpadicfrobenius0(GEN x, GEN p, int64_t e);
PARILIB_API GEN     hyperellpadicfrobenius(GEN x, ulong p, int64_t e);
PARILIB_API GEN     hyperellcharpoly(GEN x);
PARILIB_API GEN     nfhyperellpadicfrobenius(GEN H, GEN T, ulong p, int64_t n);

/* hypergeom.c */
PARILIB_API GEN     hypergeom(GEN vnum, GEN vden, GEN z, int64_t prec);
PARILIB_API GEN     airy(GEN z, int64_t prec);

/* hnf_snf.c */

PARILIB_API GEN     RgM_hnfall(GEN A, GEN *pB, int64_t remove);
PARILIB_API GEN     ZM_hnf(GEN x);
PARILIB_API GEN     ZM_hnf_knapsack(GEN x);
PARILIB_API GEN     ZM_hnfall(GEN A, GEN *ptB, int64_t remove);
PARILIB_API GEN     ZM_hnfall_i(GEN A, GEN *ptB, int64_t remove);
PARILIB_API GEN     ZM_hnfcenter(GEN M);
PARILIB_API GEN     ZM_hnflll(GEN A, GEN *ptB, int remove);
PARILIB_API GEN     ZV_extgcd(GEN A);
PARILIB_API GEN     ZV_snfall(GEN D, GEN *pU, GEN *pV);
PARILIB_API GEN     ZV_snf_group(GEN d, GEN *newU, GEN *newUi);
PARILIB_API void    ZV_snf_trunc(GEN D);
PARILIB_API GEN     ZM_hnfmod(GEN x, GEN d);
PARILIB_API GEN     ZM_hnfmodall(GEN x, GEN dm, int64_t flag);
PARILIB_API GEN     ZM_hnfmodall_i(GEN x, GEN dm, int64_t flag);
PARILIB_API GEN     ZM_hnfmodid(GEN x, GEN d);
PARILIB_API GEN     ZM_hnfmodprime(GEN x, GEN p);
PARILIB_API GEN     ZM_hnfperm(GEN A, GEN *ptU, GEN *ptperm);
PARILIB_API void    ZM_snfclean(GEN d, GEN u, GEN v);
PARILIB_API GEN     ZM_snf(GEN x);
PARILIB_API GEN     ZM_snf_group(GEN H, GEN *newU, GEN *newUi);
PARILIB_API GEN     ZM_snfall(GEN x, GEN *ptU, GEN *ptV);
PARILIB_API GEN     ZM_snfall_i(GEN x, GEN *ptU, GEN *ptV, int64_t flag);
PARILIB_API GEN     zlm_echelon(GEN x, int64_t early_abort, ulong p, ulong pm);
PARILIB_API GEN     ZpM_echelon(GEN x, int64_t early_abort, GEN p, GEN pm);
PARILIB_API GEN     gsmith(GEN x);
PARILIB_API GEN     gsmithall(GEN x);
PARILIB_API GEN     hnf(GEN x);
PARILIB_API GEN     hnf_divscale(GEN A, GEN B,GEN t);
PARILIB_API GEN     hnf_invscale(GEN A, GEN t);
PARILIB_API GEN     hnf_solve(GEN A, GEN B);
PARILIB_API GEN     hnf_invimage(GEN A, GEN b);
PARILIB_API GEN     hnfall(GEN x);
PARILIB_API int     hnfdivide(GEN A, GEN B);
PARILIB_API GEN     hnflll(GEN x);
PARILIB_API GEN     hnfmerge_get_1(GEN A, GEN B);
PARILIB_API GEN     hnfmod(GEN x, GEN d);
PARILIB_API GEN     hnfmodid(GEN x,GEN p);
PARILIB_API GEN     hnfperm(GEN x);
PARILIB_API GEN     matfrobenius(GEN M, int64_t flag, int64_t v);
PARILIB_API GEN     mathnf0(GEN x, int64_t flag);
PARILIB_API GEN     matsnf0(GEN x, int64_t flag);
PARILIB_API GEN     smith(GEN x);
PARILIB_API GEN     smithall(GEN x);
PARILIB_API GEN     smithclean(GEN z);

/* ifactor1.c */

PARILIB_API GEN     Z_ECM(GEN N, int64_t rounds, int64_t seed, ulong B1);
PARILIB_API GEN     Z_factor(GEN n);
PARILIB_API GEN     Z_factor_limit(GEN n, ulong all);
PARILIB_API GEN     Z_factor_until(GEN n, GEN limit);
PARILIB_API int64_t    Z_issmooth(GEN m, ulong lim);
PARILIB_API GEN     Z_issmooth_fact(GEN m, ulong lim);
PARILIB_API int64_t    Z_issquarefree(GEN x);
PARILIB_API GEN     Z_pollardbrent(GEN n, int64_t rounds, int64_t seed);
PARILIB_API GEN     absZ_factor(GEN n);
PARILIB_API GEN     absZ_factor_limit(GEN n, ulong all);
PARILIB_API GEN     absZ_factor_limit_strict(GEN n, ulong all, GEN *pU);
PARILIB_API int64_t    bigomega(GEN n);
PARILIB_API int64_t    bigomegau(ulong n);
PARILIB_API GEN     core(GEN n);
PARILIB_API ulong   coreu(ulong n);
PARILIB_API ulong   coreu_fact(GEN f);
PARILIB_API GEN     eulerphi(GEN n);
PARILIB_API ulong   eulerphiu(ulong n);
PARILIB_API ulong   eulerphiu_fact(GEN f);
PARILIB_API GEN     factorint(GEN n, int64_t flag);
PARILIB_API GEN     factoru(ulong n);
PARILIB_API int     ifac_isprime(GEN x);
PARILIB_API int     ifac_next(GEN *part, GEN *p, int64_t *e);
PARILIB_API int     ifac_read(GEN part, GEN *p, int64_t *e);
PARILIB_API void    ifac_skip(GEN part);
PARILIB_API GEN     ifac_start(GEN n, int moebius);
PARILIB_API int     is_357_power(GEN x, GEN *pt, ulong *mask);
PARILIB_API int     is_pth_power(GEN x, GEN *pt, forprime_t *T, ulong cutoffbits);
PARILIB_API int64_t    ispowerful(GEN n);
PARILIB_API int64_t    issquarefree(GEN x);
PARILIB_API int64_t    istotient(GEN n, GEN *px);
PARILIB_API int64_t    moebius(GEN n);
PARILIB_API int64_t    moebiusu(ulong n);
PARILIB_API int64_t    moebiusu_fact(GEN f);
PARILIB_API GEN     nextprime(GEN n);
PARILIB_API GEN     numdiv(GEN n);
PARILIB_API int64_t    numdivu(int64_t N);
PARILIB_API int64_t    numdivu_fact(GEN fa);
PARILIB_API int64_t    omega(GEN n);
PARILIB_API int64_t    omegau(ulong n);
PARILIB_API GEN     precprime(GEN n);
PARILIB_API ulong   radicalu(ulong n);
PARILIB_API GEN     sumdiv(GEN n);
PARILIB_API GEN     sumdivk(GEN n,int64_t k);
PARILIB_API ulong   tridiv_bound(GEN n);
PARILIB_API int     uis_357_power(ulong x, ulong *pt, ulong *mask);
PARILIB_API int     uis_357_powermod(ulong x, ulong *mask);
PARILIB_API int64_t    uissquarefree(ulong n);
PARILIB_API int64_t    uissquarefree_fact(GEN f);
PARILIB_API ulong   unextprime(ulong n);
PARILIB_API ulong   uprecprime(ulong n);
PARILIB_API GEN     vecfactorsquarefreeu(ulong a, ulong b);
PARILIB_API GEN     vecfactorsquarefreeu_coprime(ulong a, ulong b, GEN P);
PARILIB_API GEN     vecfactoru_i(ulong a, ulong b);
PARILIB_API GEN     vecfactoru(ulong a, ulong b);
PARILIB_API GEN     vecfactoroddu_i(ulong a, ulong b);
PARILIB_API GEN     vecfactoroddu(ulong a, ulong b);
PARILIB_API GEN     vecsquarefreeu(ulong a, ulong b);

/* init.c */

PARILIB_API int     chk_gerepileupto(GEN x);
PARILIB_API GENbin* copy_bin(GEN x);
PARILIB_API GENbin* copy_bin_canon(GEN x);
PARILIB_API void    dbg_gerepile(pari_sp av);
PARILIB_API void    dbg_gerepileupto(GEN q);
PARILIB_API GEN     errname(GEN err);
PARILIB_API GEN     gclone(GEN x);
PARILIB_API GEN     gcloneref(GEN x);
PARILIB_API void    gclone_refc(GEN x);
PARILIB_API GEN     gcopy(GEN x);
PARILIB_API GEN     gcopy_avma(GEN x, pari_sp *AVMA);
PARILIB_API GEN     gcopy_lg(GEN x, int64_t lx);
PARILIB_API GEN     gerepile(pari_sp ltop, pari_sp lbot, GEN q);
PARILIB_API void    gerepileallsp(pari_sp av, pari_sp tetpil, int n, ...);
PARILIB_API void    gerepilecoeffssp(pari_sp av, pari_sp tetpil, int64_t *g, int n);
PARILIB_API void    gerepilemanysp(pari_sp av, pari_sp tetpil, GEN* g[], int n);
PARILIB_API GEN     getheap(void);
PARILIB_API void    gp_context_save(struct gp_context* rec);
PARILIB_API void    gp_context_restore(struct gp_context* rec);
PARILIB_API int64_t    gsizeword(GEN x);
PARILIB_API int64_t    gsizebyte(GEN x);
PARILIB_API void    gunclone(GEN x);
PARILIB_API void    gunclone_deep(GEN x);
PARILIB_API GEN     listcopy(GEN x);
PARILIB_API GEN     listinit(GEN x);
PARILIB_API void    msgtimer(const char *format, ...);
PARILIB_API int64_t    name_numerr(const char *s);
PARILIB_API void    new_chunk_resize(size_t x);
PARILIB_API GEN     newblock(size_t n);
PARILIB_API const char * numerr_name(int64_t errnum);
PARILIB_API GEN     obj_check(GEN S, int64_t K);
PARILIB_API GEN     obj_checkbuild(GEN S, int64_t tag, GEN (*build)(GEN));
PARILIB_API GEN     obj_checkbuild_padicprec(GEN S, int64_t tag, GEN (*build)(GEN,int64_t), int64_t prec);
PARILIB_API GEN     obj_checkbuild_realprec(GEN S, int64_t tag, GEN (*build)(GEN,int64_t), int64_t prec);
PARILIB_API GEN     obj_checkbuild_prec(GEN S, int64_t tag, GEN (*build)(GEN,int64_t), int64_t (*pr)(GEN), int64_t prec);
PARILIB_API void    obj_free(GEN S);
PARILIB_API GEN     obj_init(int64_t d, int64_t n);
PARILIB_API GEN     obj_insert(GEN S, int64_t K, GEN O);
PARILIB_API GEN     obj_insert_shallow(GEN S, int64_t K, GEN O);
PARILIB_API GEN     obj_reinit(GEN S);
PARILIB_API void    (*os_signal(int sig, void (*f)(int)))(int);
PARILIB_API void    pari_add_function(entree *ep);
PARILIB_API void    pari_add_module(entree *ep);
PARILIB_API void    pari_add_defaults_module(entree *ep);
PARILIB_API void    pari_close(void);
PARILIB_API void    pari_close_opts(ulong init_opts);
PARILIB_API GEN     pari_compile_str(const char *lex);
PARILIB_API int     pari_daemon(void);
PARILIB_API void    pari_err(int numerr, ...);
PARILIB_API GEN     pari_err_last(void);
PARILIB_API char *  pari_err2str(GEN err);
PARILIB_API void    pari_init_opts(size_t parisize, ulong maxprime, ulong init_opts);
PARILIB_API void    pari_init(size_t parisize, ulong maxprime);
PARILIB_API void    pari_stackcheck_init(void *pari_stack_base);
PARILIB_API void    pari_sighandler(int sig);
PARILIB_API void    pari_sig_init(void (*f)(int));
PARILIB_API void    pari_thread_alloc(struct pari_thread *t, size_t s, GEN arg);
PARILIB_API void    pari_thread_close(void);
PARILIB_API void    pari_thread_free(struct pari_thread *t);
PARILIB_API void    pari_thread_init(void);
PARILIB_API GEN     pari_thread_start(struct pari_thread *t);
PARILIB_API void    pari_thread_valloc(struct pari_thread *t, size_t s, size_t v, GEN arg);
PARILIB_API GEN     pari_version(void);
PARILIB_API void    pari_warn(int numerr, ...);
PARILIB_API void    paristack_newrsize(ulong newsize);
PARILIB_API void    paristack_resize(ulong newsize);
PARILIB_API void    paristack_setsize(size_t rsize, size_t vsize);
PARILIB_API void    parivstack_resize(ulong newsize);
PARILIB_API void    parivstack_reset(void);
PARILIB_API void    shiftaddress(GEN x, int64_t dec);
PARILIB_API void    shiftaddress_canon(GEN x, int64_t dec);
PARILIB_API int64_t    timer(void);
PARILIB_API int64_t    timer_delay(pari_timer *T);
PARILIB_API int64_t    timer_get(pari_timer *T);
PARILIB_API void    timer_printf(pari_timer *T, const char *format, ...);
PARILIB_API void    timer_start(pari_timer *T);
PARILIB_API int64_t    timer2(void);
PARILIB_API GEN     trap0(const char *e, GEN f, GEN r);
PARILIB_API void    traverseheap( void(*f)(GEN, void *), void *data );
PARILIB_API void    walltimer_start(pari_timer *ti);
PARILIB_API int64_t    walltimer_delay(pari_timer *ti);
PARILIB_API int64_t    walltimer_get(pari_timer *ti);

/* intnum.c */

PARILIB_API GEN     contfraceval(GEN CF, GEN t, int64_t nlim);
PARILIB_API GEN     contfracinit(GEN M, int64_t lim);
PARILIB_API GEN     intcirc(void *E, GEN (*eval) (void *, GEN), GEN a, GEN R, GEN tab, int64_t prec);
PARILIB_API GEN     intfuncinit(void *E, GEN (*eval) (void *, GEN), GEN a, GEN b, int64_t m, int64_t prec);
PARILIB_API GEN     intnum(void *E, GEN (*eval) (void *, GEN), GEN a, GEN b, GEN tab, int64_t prec);
PARILIB_API GEN     intnumgauss(void *E, GEN (*eval)(void*, GEN), GEN a, GEN b, GEN tab, int64_t prec);
PARILIB_API GEN     intnumgaussinit(int64_t n, int64_t prec);
PARILIB_API GEN     intnuminit(GEN a, GEN b, int64_t m, int64_t prec);
PARILIB_API GEN     intnumromb(void *E, GEN (*eval)(void *, GEN), GEN a, GEN b, int64_t flag, int64_t prec);
PARILIB_API GEN     intnumromb_bitprec(void *E, GEN (*eval)(void *, GEN), GEN a, GEN b, int64_t flag, int64_t bit);
PARILIB_API GEN     prodeulerrat(GEN F, GEN s, int64_t a, int64_t prec);
PARILIB_API GEN     prodnumrat(GEN F, int64_t a, int64_t prec);
PARILIB_API GEN     quodif(GEN M, int64_t n);
PARILIB_API GEN     sumeulerrat(GEN F, GEN s, int64_t a, int64_t prec);
PARILIB_API GEN     sumnum(void *E, GEN (*eval)(void*, GEN), GEN a, GEN tab, int64_t prec);
PARILIB_API GEN     sumnumap(void *E, GEN (*eval)(void*,GEN), GEN a, GEN tab, int64_t prec);
PARILIB_API GEN     sumnumapinit(GEN fast, int64_t prec);
PARILIB_API GEN     sumnuminit(GEN fast, int64_t prec);
PARILIB_API GEN     sumnumlagrangeinit(GEN al, GEN c1, int64_t prec);
PARILIB_API GEN     sumnumlagrange(void *E, GEN (*eval)(void*,GEN,int64_t), GEN a, GEN tab, int64_t prec);
PARILIB_API GEN     sumnummonien(void *E, GEN (*eval)(void*, GEN), GEN a, GEN tab, int64_t prec);
PARILIB_API GEN     sumnummonieninit(GEN asymp, GEN w, GEN n0, int64_t prec);
PARILIB_API GEN     sumnumrat(GEN F, GEN a, int64_t prec);

/* krasner.c */

PARILIB_API GEN     padicfields0(GEN p, GEN n, int64_t flag);
PARILIB_API GEN     padicfields(GEN p, int64_t m, int64_t d, int64_t flag);

/* kummer.c */

PARILIB_API GEN     bnrclassfield(GEN bnr, GEN subgroup, int64_t flag, int64_t prec);
PARILIB_API GEN     rnfkummer(GEN bnr, GEN subgroup, int64_t prec);

/* lfun.c */

PARILIB_API int64_t    is_linit(GEN data);
PARILIB_API GEN     ldata_get_an(GEN ldata);
PARILIB_API GEN     ldata_get_dual(GEN ldata);
PARILIB_API GEN     ldata_get_gammavec(GEN ldata);
PARILIB_API int64_t    ldata_get_degree(GEN ldata);
PARILIB_API GEN     ldata_get_k(GEN ldata);
PARILIB_API GEN     ldata_get_k1(GEN ldata);
PARILIB_API GEN     ldata_get_conductor(GEN ldata);
PARILIB_API GEN     ldata_get_rootno(GEN ldata);
PARILIB_API GEN     ldata_get_residue(GEN ldata);
PARILIB_API int64_t    ldata_get_type(GEN ldata);
PARILIB_API int64_t    ldata_isreal(GEN ldata);
PARILIB_API int64_t    linit_get_type(GEN linit);
PARILIB_API GEN     linit_get_ldata(GEN linit);
PARILIB_API GEN     linit_get_tech(GEN linit);
PARILIB_API GEN     lfun_get_domain(GEN tech);
PARILIB_API GEN     lfun_get_dom(GEN tech);
PARILIB_API int64_t    lfun_get_bitprec(GEN tech);
PARILIB_API GEN     lfun_get_factgammavec(GEN tech);
PARILIB_API GEN     lfun_get_step(GEN tech);
PARILIB_API GEN     lfun_get_pol(GEN tech);
PARILIB_API GEN     lfun_get_Residue(GEN tech);
PARILIB_API GEN     lfun_get_k2(GEN tech);
PARILIB_API GEN     lfun_get_w2(GEN tech);
PARILIB_API GEN     lfun_get_expot(GEN tech);
PARILIB_API int64_t    lfun_get_bitprec(GEN tech);
PARILIB_API GEN     lfun(GEN ldata, GEN s, int64_t bitprec);
PARILIB_API GEN     lfun0(GEN ldata, GEN s, int64_t der, int64_t bitprec);
PARILIB_API GEN     lfunan(GEN ldata, int64_t L, int64_t prec);
PARILIB_API int64_t    lfuncheckfeq(GEN data, GEN t0, int64_t bitprec);
PARILIB_API GEN     lfunconductor(GEN data, GEN maxcond, int64_t flag, int64_t bitprec);
PARILIB_API GEN     lfuncost(GEN lmisc, GEN dom, int64_t der, int64_t bitprec);
PARILIB_API GEN     lfuncost0(GEN L, GEN dom, int64_t der, int64_t bitprec);
PARILIB_API GEN     lfuncreate(GEN obj);
PARILIB_API GEN     lfundual(GEN L, int64_t bitprec);
PARILIB_API GEN     lfunhardy(GEN ldata, GEN t, int64_t bitprec);
PARILIB_API GEN     lfuninit(GEN ldata, GEN dom, int64_t der, int64_t bitprec);
PARILIB_API GEN     lfuninit0(GEN ldata, GEN dom, int64_t der, int64_t bitprec);
PARILIB_API GEN     lfuninit_make(int64_t t, GEN ldata, GEN tech, GEN domain);
PARILIB_API GEN     lfunlambda(GEN ldata, GEN s, int64_t bitprec);
PARILIB_API GEN     lfunlambda0(GEN ldata, GEN s, int64_t der, int64_t bitprec);
PARILIB_API GEN     lfunmisc_to_ldata(GEN ldata);
PARILIB_API GEN     lfunmisc_to_ldata_shallow(GEN ldata);
PARILIB_API GEN     lfunmisc_to_ldata_shallow_i(GEN ldata);
PARILIB_API int64_t    lfunorderzero(GEN ldata, int64_t m, int64_t bitprec);
PARILIB_API GEN     lfunprod_get_fact(GEN tech);
PARILIB_API GEN     lfunrootno(GEN data, int64_t bitprec);
PARILIB_API GEN     lfunrootres(GEN data, int64_t bitprec);
PARILIB_API GEN     lfunrtopoles(GEN r);
PARILIB_API GEN     lfunshift(GEN ldata, GEN s, int64_t flag, int64_t bitprec);
PARILIB_API GEN     lfuntwist(GEN ldata1, GEN ldata2, int64_t bitprec);
PARILIB_API GEN     lfuntheta(GEN data, GEN t, int64_t m, int64_t bitprec);
PARILIB_API int64_t    lfunthetacost0(GEN L, GEN tdom, int64_t m, int64_t bitprec);
PARILIB_API int64_t    lfunthetacost(GEN ldata, GEN tdom, int64_t m, int64_t bitprec);
PARILIB_API GEN     lfunthetainit(GEN ldata, GEN tdom, int64_t m, int64_t bitprec);
PARILIB_API GEN     lfunthetacheckinit(GEN data, GEN tinf, int64_t m, int64_t bitprec);
PARILIB_API GEN     lfunzeros(GEN ldata, GEN lim, int64_t divz, int64_t bitprec);
PARILIB_API int     sdomain_isincl(double k, GEN dom, GEN dom0);
PARILIB_API GEN     theta_get_an(GEN tdata);
PARILIB_API GEN     theta_get_K(GEN tdata);
PARILIB_API GEN     theta_get_R(GEN tdata);
PARILIB_API int64_t    theta_get_bitprec(GEN tdata);
PARILIB_API int64_t    theta_get_m(GEN tdata);
PARILIB_API GEN     theta_get_tdom(GEN tdata);
PARILIB_API GEN     theta_get_isqrtN(GEN tdata);
PARILIB_API int     Vgaeasytheta(GEN Vga);
PARILIB_API GEN     znchargauss(GEN G, GEN chi, GEN a, int64_t bitprec);

/* lfunutils.c */

PARILIB_API GEN     dirzetak(GEN nf, GEN b);
PARILIB_API GEN     ellmoddegree(GEN e);
PARILIB_API GEN     eta_ZXn(int64_t v, int64_t L);
PARILIB_API GEN     eta_product_ZXn(GEN eta, int64_t L);
PARILIB_API int64_t    etaquotype(GEN *eta, GEN *pN, GEN *pk, GEN *CHI, int64_t *pv, int64_t *sd, int64_t *cusp);
PARILIB_API GEN     galois_get_conj(GEN G); /* TODO move somewhere else? */
PARILIB_API GEN     ldata_vecan(GEN ldata, int64_t L, int64_t prec);
PARILIB_API GEN     ldata_newprec(GEN ldata, int64_t prec);
PARILIB_API GEN     lfunabelianrelinit(GEN bnfabs, GEN bnf, GEN polrel, GEN dom, int64_t der, int64_t bitprec);
PARILIB_API GEN     lfunartin(GEN N, GEN G, GEN M, int64_t o, int64_t bitprec);
PARILIB_API GEN     lfundiv(GEN ldata1, GEN ldata2, int64_t bitprec);
PARILIB_API GEN     lfunellmfpeters(GEN E, int64_t bitprec);
PARILIB_API GEN     lfunetaquo(GEN eta);
PARILIB_API GEN     lfungenus2(GEN PS);
PARILIB_API GEN     lfunmfspec(GEN lmisc, int64_t bitprec);
PARILIB_API GEN     lfunmul(GEN ldata1, GEN ldata2, int64_t bitprec);
PARILIB_API GEN     lfunqf(GEN ldata, int64_t prec);
PARILIB_API GEN     lfunsympow(GEN E, ulong m);
PARILIB_API GEN     lfunzetakinit(GEN pol, GEN dom, int64_t der, int64_t flag, int64_t bitprec);
PARILIB_API int64_t    qfiseven(GEN M);

/* lfunquad */

PARILIB_API GEN lfunquadneg(int64_t D, int64_t k);
PARILIB_API GEN eulerfrac(int64_t k);

/* lll.c */

PARILIB_API GEN     ZM_lll_norms(GEN x, double D, int64_t flag, GEN *B);
PARILIB_API GEN     kerint(GEN x);
PARILIB_API GEN     lll(GEN x);
PARILIB_API GEN     lllfp(GEN x, double D, int64_t flag);
PARILIB_API GEN     lllgen(GEN x);
PARILIB_API GEN     lllgram(GEN x);
PARILIB_API GEN     lllgramgen(GEN x);
PARILIB_API GEN     lllgramint(GEN x);
PARILIB_API GEN     lllgramkerim(GEN x);
PARILIB_API GEN     lllgramkerimgen(GEN x);
PARILIB_API GEN     lllint(GEN x);
PARILIB_API GEN     lllintpartial(GEN mat);
PARILIB_API GEN     lllintpartial_inplace(GEN mat);
PARILIB_API GEN     lllkerim(GEN x);
PARILIB_API GEN     lllkerimgen(GEN x);
PARILIB_API GEN     matkerint0(GEN x,int64_t flag);
PARILIB_API GEN     qflll0(GEN x, int64_t flag);
PARILIB_API GEN     qflllgram0(GEN x, int64_t flag);

/* map.c */

PARILIB_API GEN     gtomap(GEN M);
PARILIB_API void    mapdelete(GEN T, GEN a);
PARILIB_API GEN     mapdomain(GEN T);
PARILIB_API GEN     mapdomain_shallow(GEN T);
PARILIB_API GEN     mapget(GEN T, GEN a);
PARILIB_API int     mapisdefined(GEN T, GEN a, GEN *pt_z);
PARILIB_API void    mapput(GEN T, GEN a, GEN b);
PARILIB_API GEN     maptomat(GEN T);
PARILIB_API GEN     maptomat_shallow(GEN T);

/* matperm.c */
PARILIB_API GEN     matpermanent(GEN M);
PARILIB_API GEN     zm_permanent(GEN M);
PARILIB_API GEN     ZM_permanent(GEN M);

/* mellininv.c */

PARILIB_API double  dbllambertW0(double a);
PARILIB_API double  dbllambertW_1(double a);
PARILIB_API double  dbllemma526(double a, double b, double c, double B);
PARILIB_API double  dblcoro526(double a, double c, double B);
PARILIB_API GEN     gammamellininv(GEN Vga, GEN s, int64_t m, int64_t bitprec);
PARILIB_API GEN     gammamellininvasymp(GEN Vga, int64_t nlimmax, int64_t m);
PARILIB_API GEN     gammamellininvinit(GEN Vga, int64_t m, int64_t bitprec);
PARILIB_API GEN     gammamellininvrt(GEN K, GEN s, int64_t bitprec);

/* members.c */

PARILIB_API GEN     member_a1(GEN x);
PARILIB_API GEN     member_a2(GEN x);
PARILIB_API GEN     member_a3(GEN x);
PARILIB_API GEN     member_a4(GEN x);
PARILIB_API GEN     member_a6(GEN x);
PARILIB_API GEN     member_area(GEN x);
PARILIB_API GEN     member_b2(GEN x);
PARILIB_API GEN     member_b4(GEN x);
PARILIB_API GEN     member_b6(GEN x);
PARILIB_API GEN     member_b8(GEN x);
PARILIB_API GEN     member_bid(GEN x);
PARILIB_API GEN     member_bnf(GEN x);
PARILIB_API GEN     member_c4(GEN x);
PARILIB_API GEN     member_c6(GEN x);
PARILIB_API GEN     member_clgp(GEN x);
PARILIB_API GEN     member_codiff(GEN x);
PARILIB_API GEN     member_cyc(GEN clg);
PARILIB_API GEN     member_diff(GEN x);
PARILIB_API GEN     member_disc(GEN x);
PARILIB_API GEN     member_e(GEN x);
PARILIB_API GEN     member_eta(GEN x);
PARILIB_API GEN     member_f(GEN x);
PARILIB_API GEN     member_fu(GEN x);
PARILIB_API GEN     member_gen(GEN x);
PARILIB_API GEN     member_group(GEN x);
PARILIB_API GEN     member_index(GEN x);
PARILIB_API GEN     member_j(GEN x);
PARILIB_API GEN     member_mod(GEN x);
PARILIB_API GEN     member_nf(GEN x);
PARILIB_API GEN     member_no(GEN clg);
PARILIB_API GEN     member_omega(GEN x);
PARILIB_API GEN     member_orders(GEN x);
PARILIB_API GEN     member_p(GEN x);
PARILIB_API GEN     member_pol(GEN x);
PARILIB_API GEN     member_polabs(GEN x);
PARILIB_API GEN     member_reg(GEN x);
PARILIB_API GEN     member_r1(GEN x);
PARILIB_API GEN     member_r2(GEN x);
PARILIB_API GEN     member_roots(GEN x);
PARILIB_API GEN     member_sign(GEN x);
PARILIB_API GEN     member_t2(GEN x);
PARILIB_API GEN     member_tate(GEN x);
PARILIB_API GEN     member_tu(GEN x);
PARILIB_API GEN     member_zk(GEN x);
PARILIB_API GEN     member_zkst(GEN bid);

/* mftrace.c */
enum { mf_NEW = 0, mf_CUSP, mf_OLD, mf_EISEN, mf_FULL };
enum {
/*leaves*/
  t_MF_CONST, t_MF_EISEN, t_MF_Ek, t_MF_DELTA, t_MF_ETAQUO, t_MF_ELL,
  t_MF_DIHEDRAL, t_MF_THETA, t_MF_TRACE, t_MF_NEWTRACE,
/**/
  t_MF_MUL, t_MF_POW, t_MF_DIV, t_MF_BRACKET, t_MF_LINEAR, t_MF_LINEAR_BHN,
  t_MF_SHIFT, t_MF_DERIV, t_MF_DERIVE2, t_MF_TWIST, t_MF_HECKE,
  t_MF_BD,
};

PARILIB_API GEN   MF_get_CHI(GEN mf);
PARILIB_API GEN   MF_get_M(GEN mf);
PARILIB_API GEN   MF_get_Mindex(GEN mf);
PARILIB_API GEN   MF_get_Minv(GEN mf);
PARILIB_API int64_t  MF_get_N(GEN mf);
PARILIB_API GEN   MF_get_basis(GEN mf);
PARILIB_API int64_t  MF_get_dim(GEN mf);
PARILIB_API GEN   MF_get_E(GEN mf);
PARILIB_API GEN   MF_get_fields(GEN mf);
PARILIB_API GEN   MF_get_gN(GEN mf);
PARILIB_API GEN   MF_get_gk(GEN mf);
PARILIB_API int64_t  MF_get_k(GEN mf);
PARILIB_API GEN   MF_get_newforms(GEN mf);
PARILIB_API int64_t  MF_get_r(GEN mf);
PARILIB_API int64_t  MF_get_space(GEN mf);
PARILIB_API GEN   MF_get_S(GEN mf);
PARILIB_API GEN   MFcusp_get_vMjd(GEN mf);
PARILIB_API GEN   MFnew_get_vj(GEN mf);
PARILIB_API GEN   Qab_tracerel(GEN v, int64_t t, GEN a);
PARILIB_API GEN   QabM_tracerel(GEN v, int64_t t, GEN x);
PARILIB_API GEN   QabV_tracerel(GEN v, int64_t t, GEN x);
PARILIB_API GEN   Qab_trace_init(int64_t n, int64_t m, GEN Pn, GEN Pm);
PARILIB_API GEN   checkMF(GEN mf);
PARILIB_API GEN   checkMF_i(GEN mf);
PARILIB_API int   checkmf_i(GEN mf);
PARILIB_API GEN   getcache(void);
PARILIB_API ulong hclassno6u(ulong d);
PARILIB_API GEN   lfunmf(GEN mf, GEN F, int64_t bitprec);
PARILIB_API GEN   mfDelta(void);
PARILIB_API GEN   mfEH(GEN gk);
PARILIB_API GEN   mfEk(int64_t k);
PARILIB_API GEN   mfTheta(GEN psi);
PARILIB_API GEN   mf_get_CHI(GEN F);
PARILIB_API int64_t  mf_get_N(GEN F);
PARILIB_API GEN   mf_get_NK(GEN F);
PARILIB_API GEN   mf_get_field(GEN F);
PARILIB_API GEN   mf_get_gN(GEN F);
PARILIB_API GEN   mf_get_gk(GEN F);
PARILIB_API int64_t  mf_get_k(GEN F);
PARILIB_API int64_t  mf_get_r(GEN F);
PARILIB_API int64_t  mf_get_type(GEN F);
PARILIB_API GEN   mfatkin(GEN mfa, GEN F);
PARILIB_API GEN   mfatkineigenvalues(GEN mf, int64_t Q, int64_t prec);
PARILIB_API GEN   mfatkininit(GEN mf, int64_t Q, int64_t prec);
PARILIB_API GEN   mfbasis(GEN mf, int64_t space);
PARILIB_API GEN   mfbd(GEN F, int64_t d);
PARILIB_API GEN   mfbracket(GEN F, GEN G, int64_t m);
PARILIB_API int64_t  mfcharorder(GEN CHI);
PARILIB_API int64_t  mfcharmodulus(GEN CHI);
PARILIB_API GEN   mfcharpol(GEN CHI);
PARILIB_API GEN   mfcoef(GEN F, int64_t n);
PARILIB_API GEN   mfcoefs(GEN F, int64_t n, int64_t d);
PARILIB_API int64_t  mfconductor(GEN mf, GEN F);
PARILIB_API GEN   mfcosets(GEN N);
PARILIB_API int64_t  mfcuspdim(int64_t N, int64_t k, GEN CHI);
PARILIB_API int64_t  mfcuspisregular(GEN NK, GEN cusp);
PARILIB_API GEN   mfcusps(GEN gN);
PARILIB_API GEN   mfcuspval(GEN mf, GEN F, GEN cusp, int64_t bitprec);
PARILIB_API int64_t  mfcuspwidth(GEN gN, GEN cusp);
PARILIB_API GEN   mfderiv(GEN F, int64_t m);
PARILIB_API GEN   mfderivE2(GEN F, int64_t k);
PARILIB_API GEN   mfdescribe(GEN F, GEN *PTU);
PARILIB_API GEN   mfdim(GEN NK, int64_t codespace);
PARILIB_API GEN   mfdiv(GEN F, GEN G);
PARILIB_API GEN   mfdiv_val(GEN F, GEN G, int64_t vG);
PARILIB_API GEN   mfeigenbasis(GEN mf);
PARILIB_API GEN   mfeigensearch(GEN nklim, GEN vmod);
PARILIB_API GEN   mfeisenstein(int64_t k, GEN CHI1, GEN CHI2);
PARILIB_API int64_t  mfeisensteindim(int64_t N, int64_t k, GEN CHI);
PARILIB_API GEN   mfembed(GEN E, GEN f);
PARILIB_API GEN   mfembed0(GEN E, GEN v, int64_t prec);
PARILIB_API GEN   mfeval(GEN mf, GEN F, GEN vtau, int64_t bitprec);
PARILIB_API GEN   mffields(GEN mf);
PARILIB_API GEN   mffromell(GEN E);
PARILIB_API GEN   mffrometaquo(GEN eta, int64_t flag);
PARILIB_API GEN   mffromlfun(GEN L, int64_t prec);
PARILIB_API GEN   mffromqf(GEN Q, GEN P);
PARILIB_API int64_t  mffulldim(int64_t N, int64_t k, GEN CHI);
PARILIB_API GEN   mfgaloisprojrep(GEN mf, GEN F, int64_t prec);
PARILIB_API GEN   mfgaloistype(GEN NK, GEN F);
PARILIB_API GEN   mfhecke(GEN mf, GEN F, int64_t n);
PARILIB_API GEN   mfheckemat(GEN mf, GEN vecn);
PARILIB_API GEN   mfinit(GEN NK, int64_t space);
PARILIB_API GEN   mfisCM(GEN F);
PARILIB_API int64_t  mfiscuspidal(GEN mf, GEN F);
PARILIB_API int64_t  mfisequal(GEN F, GEN G, int64_t lim);
PARILIB_API GEN   mfisetaquo(GEN F, int64_t flag);
PARILIB_API GEN   mfkohnenbasis(GEN mf);
PARILIB_API GEN   mfkohnenbijection(GEN mf);
PARILIB_API GEN   mfkohneneigenbasis(GEN mf, GEN bij);
PARILIB_API GEN   mflinear(GEN vF, GEN vla);
PARILIB_API GEN   mfmanin(GEN F, int64_t bitprec);
PARILIB_API GEN   mfmatembed(GEN E, GEN f);
PARILIB_API GEN   mfmul(GEN F, GEN G);
PARILIB_API int64_t  mfnewdim(int64_t N, int64_t k, GEN CHI);
PARILIB_API int64_t  mfolddim(int64_t N, int64_t k, GEN CHI);
PARILIB_API GEN   mfparams(GEN F);
PARILIB_API GEN   mfperiodpol(GEN mf, GEN F, int64_t flag, int64_t prec);
PARILIB_API GEN   mfperiodpolbasis(int64_t k, int64_t flag);
PARILIB_API GEN   mfpetersson(GEN FS, GEN GS);
PARILIB_API GEN   mfpow(GEN F, int64_t n);
PARILIB_API GEN   mfsearch(GEN nklim, GEN V, int64_t space);
PARILIB_API GEN   mfshift(GEN F, int64_t sh);
PARILIB_API GEN   mfshimura(GEN mf, GEN F, int64_t t);
PARILIB_API GEN   mfslashexpansion(GEN mf, GEN F, GEN gamma, int64_t n, int64_t flrat, GEN *param, int64_t prec);
PARILIB_API int64_t  mfspace(GEN mf, GEN f);
PARILIB_API GEN   mfsplit(GEN mf, int64_t dimlim, int64_t flag);
PARILIB_API int64_t  mfsturm(GEN A);
PARILIB_API int64_t  mfsturmNgk(int64_t N, GEN k);
PARILIB_API int64_t  mfsturmNk(int64_t N, int64_t k);
PARILIB_API int64_t  mfsturm_mf(GEN mf);
PARILIB_API GEN   mfsymboleval(GEN F, GEN path, GEN ga, int64_t bitprec);
PARILIB_API GEN   mfsymbol(GEN mf, GEN F, int64_t bitprec);
PARILIB_API GEN   mftaylor(GEN F, int64_t n, int64_t flreal, int64_t prec);
PARILIB_API GEN   mftobasis(GEN mf, GEN F, int64_t flag);
PARILIB_API GEN   mftobasisES(GEN mf, GEN F);
PARILIB_API GEN   mftocol(GEN F, int64_t lim, int64_t d);
PARILIB_API GEN   mftocoset(ulong N, GEN M, GEN listcosets);
PARILIB_API GEN   mftonew(GEN mf, GEN F);
PARILIB_API GEN   mftraceform(GEN NK, int64_t coderat);
PARILIB_API GEN   mftwist(GEN F, GEN D);
PARILIB_API GEN   mfvecembed(GEN E, GEN v);
PARILIB_API GEN   mfvectomat(GEN vF, int64_t lim, int64_t d);

/* mp.c */

PARILIB_API ulong   Fl_inv(ulong x, ulong p);
PARILIB_API ulong   Fl_invsafe(ulong x, ulong p);
PARILIB_API int     Fp_ratlift(GEN x, GEN m, GEN amax, GEN bmax, GEN *a, GEN *b);
PARILIB_API int     abscmpii(GEN x, GEN y);
PARILIB_API int     abscmprr(GEN x, GEN y);
PARILIB_API int     absequalii(GEN x, GEN y);
PARILIB_API GEN     addii_sign(GEN x, int64_t sx, GEN y, int64_t sy);
PARILIB_API GEN     addir_sign(GEN x, int64_t sx, GEN y, int64_t sy);
PARILIB_API GEN     addmulii(GEN x, GEN y, GEN z);
PARILIB_API GEN     addmulii_inplace(GEN x, GEN y, GEN z);
PARILIB_API GEN     addrr_sign(GEN x, int64_t sx, GEN y, int64_t sy);
PARILIB_API GEN     addsi_sign(int64_t x, GEN y, int64_t sy);
PARILIB_API GEN     addsr(int64_t x, GEN y);
PARILIB_API GEN     addui_sign(ulong x, GEN y, int64_t sy);
PARILIB_API GEN     addumului(ulong a, ulong b, GEN Y);
PARILIB_API void    roundr_up_ip(GEN x, int64_t l);
PARILIB_API void    affir(GEN x, GEN y);
PARILIB_API void    affrr(GEN x, GEN y);
PARILIB_API GEN     bezout(GEN a, GEN b, GEN *u, GEN *v);
PARILIB_API int64_t    cbezout(int64_t a,int64_t b,int64_t *uu,int64_t *vv);
PARILIB_API int64_t    cgcd(int64_t a,int64_t b);
PARILIB_API int64_t    clcm(int64_t a,int64_t b);
PARILIB_API int     cmpii(GEN x, GEN y);
PARILIB_API int     cmprr(GEN x, GEN y);
PARILIB_API int64_t    dblexpo(double x);
PARILIB_API ulong   dblmantissa(double x);
PARILIB_API GEN     dbltor(double x);
PARILIB_API GEN     diviiexact(GEN x, GEN y);
PARILIB_API GEN     divir(GEN x, GEN y);
PARILIB_API GEN     divis(GEN y, int64_t x);
PARILIB_API GEN     divis_rem(GEN x, int64_t y, int64_t *rem);
PARILIB_API GEN     absdiviu_rem(GEN y, ulong x, ulong *rem);
PARILIB_API GEN     diviuuexact(GEN x, ulong y, ulong z);
PARILIB_API GEN     diviuexact(GEN x, ulong y);
PARILIB_API GEN     divri(GEN x, GEN y);
PARILIB_API GEN     divrr(GEN x, GEN y);
PARILIB_API GEN     divrs(GEN x, int64_t y);
PARILIB_API GEN     divru(GEN x, ulong y);
PARILIB_API GEN     divsi(int64_t x, GEN y);
PARILIB_API GEN     divsr(int64_t x, GEN y);
PARILIB_API GEN     divur(ulong x, GEN y);
PARILIB_API GEN     dvmdii(GEN x, GEN y, GEN *z);
PARILIB_API int     equalii(GEN x, GEN y);
PARILIB_API int     equaliispec(GEN x, GEN y, int64_t lx, int64_t ly);
PARILIB_API int     equalrr(GEN x, GEN y);
PARILIB_API GEN     floorr(GEN x);
PARILIB_API GEN     gcdii(GEN x, GEN y);
PARILIB_API GEN     halfgcdii(GEN x, GEN y);
PARILIB_API GEN     int2n(int64_t n);
PARILIB_API GEN     int2u(ulong n);
PARILIB_API GEN     int2um1(ulong n);
PARILIB_API GEN     int_normalize(GEN x, int64_t known_zero_words);
PARILIB_API int     invmod(GEN a, GEN b, GEN *res);
PARILIB_API ulong   invmod2BIL(ulong b);
PARILIB_API GEN     invr(GEN b);
PARILIB_API GEN     mantissa_real(GEN x, int64_t *e);
PARILIB_API GEN     modii(GEN x, GEN y);
PARILIB_API void    modiiz(GEN x, GEN y, GEN z);
PARILIB_API GEN     mulii(GEN x, GEN y);
PARILIB_API GEN     mulir(GEN x, GEN y);
PARILIB_API GEN     mulrr(GEN x, GEN y);
PARILIB_API GEN     mulsi(int64_t x, GEN y);
PARILIB_API GEN     mulsr(int64_t x, GEN y);
PARILIB_API GEN     mulss(int64_t x, int64_t y);
PARILIB_API GEN     mului(ulong x, GEN y);
PARILIB_API GEN     muluispec(ulong x, GEN y, int64_t ny);
PARILIB_API GEN     mulur(ulong x, GEN y);
PARILIB_API GEN     muluu(ulong x, ulong y);
PARILIB_API GEN     muluui(ulong x, ulong y, GEN z);
PARILIB_API void    pari_kernel_close(void);
PARILIB_API void    pari_kernel_init(void);
PARILIB_API const char * pari_kernel_version(void);
PARILIB_API GEN     remi2n(GEN x, int64_t n);
PARILIB_API GEN     muliispec_mirror(GEN x, GEN y, int64_t nx, int64_t ny);
PARILIB_API double  rtodbl(GEN x);
PARILIB_API GEN     shifti(GEN x, int64_t n);
PARILIB_API GEN     sqri(GEN x);
PARILIB_API GEN     sqrispec_mirror(GEN x, int64_t nx);
PARILIB_API GEN     sqrr(GEN x);
PARILIB_API GEN     sqrs(int64_t x);
PARILIB_API GEN     sqrtr_abs(GEN x);
PARILIB_API GEN     sqrtremi(GEN S, GEN *R);
PARILIB_API GEN     sqru(ulong x);
PARILIB_API GEN     subsr(int64_t x, GEN y);
PARILIB_API GEN     truedvmdii(GEN x, GEN y, GEN *z);
PARILIB_API GEN     truedvmdis(GEN x, int64_t y, GEN *z);
PARILIB_API GEN     truedvmdsi(int64_t x, GEN y, GEN *z);
PARILIB_API GEN     trunc2nr(GEN x, int64_t n);
PARILIB_API GEN     shiftispec(GEN x, int64_t nx, int64_t n);
PARILIB_API GEN     mantissa2nr(GEN x, int64_t n);
PARILIB_API GEN     truncr(GEN x);
PARILIB_API ulong   ugcd(ulong a,ulong b);
PARILIB_API ulong   ulcm(ulong a, ulong b);
PARILIB_API ulong   umodiu(GEN y, ulong x);
PARILIB_API int64_t    vals(ulong x);
PARILIB_API GEN adduispec(ulong s, GEN x, int64_t nx);
/* assume x >= y */
PARILIB_API GEN subiuspec(GEN x, ulong s, int64_t nx);
/* assume x > y */
PARILIB_API GEN subiispec(GEN x, GEN y, int64_t nx, int64_t ny);
PARILIB_API GEN addiispec(GEN x, GEN y, int64_t nx, int64_t ny);
PARILIB_API int cmpiispec(GEN x, GEN y, int64_t lx, int64_t ly);


/* nffactor.c */

PARILIB_API GEN     FpC_ratlift(GEN P, GEN mod, GEN amax, GEN bmax, GEN denom);
PARILIB_API GEN     FpM_ratlift(GEN M, GEN mod, GEN amax, GEN bmax, GEN denom);
PARILIB_API GEN     FpX_ratlift(GEN P, GEN mod, GEN amax, GEN bmax, GEN denom);
PARILIB_API GEN     QXQX_gcd(GEN P, GEN Q, GEN T);
PARILIB_API GEN     ZXQX_gcd(GEN P, GEN Q, GEN T);
PARILIB_API GEN     nffactor(GEN nf,GEN x);
PARILIB_API GEN     nffactormod(GEN nf,GEN pol,GEN pr);
PARILIB_API GEN     nfgcd(GEN P, GEN Q, GEN nf, GEN den);
PARILIB_API GEN     nfgcd_all(GEN P, GEN Q, GEN T, GEN den, GEN *Pnew);
PARILIB_API int     nfissquarefree(GEN nf, GEN x);
PARILIB_API GEN     nfroots(GEN nf,GEN pol);
PARILIB_API GEN     nfroots_if_split(GEN *pnf, GEN pol);
PARILIB_API GEN     polfnf(GEN a, GEN t);
PARILIB_API GEN     nfrootsof1(GEN x);

/* paricfg.c */

extern const char *paricfg_datadir;
extern const char *paricfg_version;
extern const char *paricfg_buildinfo;
extern const int64_t  paricfg_version_code;
extern const char *paricfg_vcsversion;
extern const char *paricfg_compiledate;
extern const char *paricfg_mt_engine;
extern const char *paricfg_gphelp;

/* part.c */

PARILIB_API void    forpart(void *E, int64_t call(void*,GEN), int64_t k, GEN nbound, GEN abound);
PARILIB_API void    forpart_init(forpart_t *T, int64_t k, GEN abound, GEN nbound);
PARILIB_API GEN     forpart_next(forpart_t *T);
PARILIB_API GEN     forpart_prev(forpart_t *T);
PARILIB_API GEN     numbpart(GEN x);
PARILIB_API GEN     partitions(int64_t k, GEN nbound, GEN abound);

/* forperm.c */

PARILIB_API void    forperm(void *E, int64_t call(void *, GEN), GEN k);
PARILIB_API void    forperm_init(forperm_t *T, GEN k);
PARILIB_API GEN     forperm_next(forperm_t *T);

/* forsubset.c */

PARILIB_API void forallsubset_init(forsubset_t *T, int64_t n);
PARILIB_API void forksubset_init(forsubset_t *T, int64_t n, int64_t k);
PARILIB_API GEN forsubset_next(forsubset_t *T);
PARILIB_API void forsubset_init(forsubset_t *T, GEN nk);

/* perm.c */

PARILIB_API GEN     Z_to_perm(int64_t n, GEN x);
PARILIB_API GEN     abelian_group(GEN G);
PARILIB_API GEN     conjclasses_repr(GEN conj, int64_t nb);
PARILIB_API GEN     cyc_pow(GEN cyc, int64_t exp);
PARILIB_API GEN     cyc_pow_perm(GEN cyc, int64_t exp);
PARILIB_API GEN     cyclicgroup(GEN g, int64_t s);
PARILIB_API GEN     dicyclicgroup(GEN g1, GEN g2, int64_t s1, int64_t s2);
PARILIB_API GEN     group_abelianHNF(GEN G, GEN L);
PARILIB_API GEN     group_abelianSNF(GEN G, GEN L);
PARILIB_API int64_t    group_domain(GEN G);
PARILIB_API GEN     group_elts(GEN G, int64_t n);
PARILIB_API GEN     group_export(GEN G, int64_t format);
PARILIB_API GEN     group_export_GAP(GEN G);
PARILIB_API GEN     group_export_MAGMA(GEN G);
PARILIB_API int64_t    group_isA4S4(GEN G);
PARILIB_API int64_t    group_isabelian(GEN G);
PARILIB_API GEN     group_leftcoset(GEN G, GEN g);
PARILIB_API int64_t    group_order(GEN G);
PARILIB_API int64_t    group_perm_normalize(GEN N, GEN g);
PARILIB_API GEN     group_quotient(GEN G, GEN H);
PARILIB_API GEN     group_rightcoset(GEN G, GEN g);
PARILIB_API GEN     group_set(GEN G, int64_t n);
PARILIB_API int     group_subgroup_is_faithful(GEN G, GEN H);
PARILIB_API int64_t    group_subgroup_isnormal(GEN G, GEN H);
PARILIB_API GEN     group_subgroups(GEN G);
PARILIB_API GEN     group_to_cc(GEN G);
PARILIB_API GEN     groupelts_abelian_group(GEN S);
PARILIB_API GEN     groupelts_center(GEN S);
PARILIB_API GEN     groupelts_conj_set(GEN elts, GEN p);
PARILIB_API GEN     groupelts_conjclasses(GEN elts, int64_t *nbcl);
PARILIB_API int64_t    groupelts_exponent(GEN G);
PARILIB_API GEN     groupelts_quotient(GEN G, GEN H);
PARILIB_API GEN     groupelts_set(GEN G, int64_t n);
PARILIB_API GEN     groupelts_to_group(GEN G);
PARILIB_API GEN     numtoperm(int64_t n, GEN x);
PARILIB_API int     perm_commute(GEN p, GEN q);
PARILIB_API GEN     perm_cycles(GEN v);
PARILIB_API GEN     perm_order(GEN perm);
PARILIB_API ulong   perm_orderu(GEN perm);
PARILIB_API GEN     perm_pow(GEN perm, GEN exp);
PARILIB_API GEN     perm_powu(GEN perm, ulong exp);
PARILIB_API int64_t    perm_sign(GEN perm);
PARILIB_API GEN     perm_to_GAP(GEN v);
PARILIB_API GEN     perm_to_Z(GEN v);
PARILIB_API GEN     permcycles(GEN perm);
PARILIB_API GEN     permorder(GEN perm);
PARILIB_API int64_t    permsign(GEN perm);
PARILIB_API GEN     permtonum(GEN x);
PARILIB_API GEN     quotient_group(GEN C, GEN G);
PARILIB_API GEN     quotient_groupelts(GEN C);
PARILIB_API GEN     quotient_perm(GEN C, GEN p);
PARILIB_API GEN     quotient_subgroup_lift(GEN C, GEN H, GEN S);
PARILIB_API GEN     subgroups_tableset(GEN S, int64_t n);
PARILIB_API int64_t    tableset_find_index(GEN tbl, GEN set);
PARILIB_API GEN     trivialgroup(void);
PARILIB_API GEN     vec_insert(GEN v, int64_t n, GEN x);
PARILIB_API int     vec_is1to1(GEN v);
PARILIB_API int     vec_isconst(GEN v);
PARILIB_API GEN     vecperm_orbits(GEN v, int64_t n);
PARILIB_API int64_t    vecsmall_duplicate(GEN x);
PARILIB_API int64_t    vecsmall_duplicate_sorted(GEN x);
PARILIB_API GEN     vecsmall_indexsort(GEN V);
PARILIB_API int     vecsmall_is1to1(GEN v);
PARILIB_API int     vecsmall_isconst(GEN v);
PARILIB_API void    vecsmall_sort(GEN V);
PARILIB_API GEN     vecsmall_uniq(GEN V);
PARILIB_API GEN     vecsmall_uniq_sorted(GEN V);
PARILIB_API GEN     vecvecsmall_indexsort(GEN x);
PARILIB_API int64_t    vecvecsmall_max(GEN x);
PARILIB_API int64_t    vecvecsmall_search(GEN x, GEN y, int64_t flag);
PARILIB_API GEN     vecvecsmall_sort(GEN x);
PARILIB_API void    vecvecsmall_sort_inplace(GEN x, GEN *perm);
PARILIB_API GEN     vecvecsmall_sort_shallow(GEN x);
PARILIB_API GEN     vecvecsmall_sort_uniq(GEN x);

/* mt.c */

PARILIB_API void    mt_broadcast(GEN code);
PARILIB_API int64_t    mt_nbthreads(void);
PARILIB_API void    mt_queue_end(struct pari_mt *pt);
PARILIB_API GEN     mt_queue_get(struct pari_mt *pt, int64_t *jobid, int64_t *pending);
PARILIB_API void    mt_queue_start(struct pari_mt *pt, GEN worker);
PARILIB_API void    mt_queue_start_lim(struct pari_mt *pt, GEN worker, int64_t lim);
PARILIB_API void    mt_queue_submit(struct pari_mt *pt, int64_t jobid, GEN work);
PARILIB_API void    mt_sigint_block(void);
PARILIB_API void    mt_sigint_unblock(void);
PARILIB_API void    pari_mt_init(void);
PARILIB_API void    pari_mt_close(void);

/* plotport.c */

PARILIB_API void    color_to_rgb(GEN c, int *r, int *g, int *b);
PARILIB_API void    colorname_to_rgb(const char *s, int *r, int *g, int *b);
PARILIB_API void    long_to_rgb(int64_t c, int *r, int *g, int *b);
PARILIB_API void    pari_plot_by_file(const char *env, const char *suf, const char *img);
PARILIB_API void    pari_set_plot_engine(void (*plot)(PARI_plot *));
PARILIB_API void    pari_kill_plot_engine(void);
PARILIB_API GEN     parploth(GEN a, GEN b, GEN code, int64_t flags,int64_t n, int64_t prec);
PARILIB_API GEN     parplothexport(GEN fmt, GEN a, GEN b, GEN code, int64_t flags, int64_t n, int64_t prec);
PARILIB_API void    plotbox(int64_t ne, GEN gx2, GEN gy2, int64_t fl);
PARILIB_API void    plotclip(int64_t rect);
PARILIB_API GEN     plotcolor(int64_t ne, GEN c);
PARILIB_API void    plotcopy(int64_t source, int64_t dest, GEN xoff, GEN yoff, int64_t flag);
PARILIB_API GEN     plotcursor(int64_t ne);
PARILIB_API void    plotdraw(GEN list, int64_t flag);
PARILIB_API GEN     plotexport(GEN fmt, GEN wxy, int64_t flag);
PARILIB_API GEN     ploth(void *E, GEN(*f)(void*,GEN), GEN a, GEN b, int64_t flags,int64_t n, int64_t prec);
PARILIB_API GEN     plothexport(GEN fmt, void *E, GEN(*f)(void*,GEN), GEN a,GEN b, int64_t flags, int64_t n, int64_t prec);
PARILIB_API GEN     plothraw(GEN listx, GEN listy, int64_t flag);
PARILIB_API GEN     plothrawexport(GEN fmt, GEN X, GEN Y, int64_t flags);
PARILIB_API GEN     plothsizes(int64_t flag);
PARILIB_API void    plotinit(int64_t ne, GEN x, GEN y, int64_t flag);
PARILIB_API void    plotkill(int64_t ne);
PARILIB_API void    plotline(int64_t ne, GEN gx2, GEN gy2);
PARILIB_API void    plotlines(int64_t ne, GEN listx, GEN listy, int64_t flag);
PARILIB_API void    plotlinetype(int64_t ne, int64_t t);
PARILIB_API void    plotmove(int64_t ne, GEN x, GEN y);
PARILIB_API void    plotpoints(int64_t ne, GEN listx, GEN listy);
PARILIB_API void    plotpointsize(int64_t ne, GEN size);
PARILIB_API void    plotpointtype(int64_t ne, int64_t t);
PARILIB_API void    plotrbox(int64_t ne, GEN x2, GEN y2, int64_t fl);
PARILIB_API GEN     plotrecth(void *E, GEN(*f)(void*,GEN), int64_t ne, GEN a,GEN b, ulong flags,int64_t n, int64_t prec);
PARILIB_API GEN     plotrecthraw(int64_t ne, GEN data, int64_t flags);
PARILIB_API void    plotrline(int64_t ne, GEN x2, GEN y2);
PARILIB_API void    plotrmove(int64_t ne, GEN x, GEN y);
PARILIB_API void    plotrpoint(int64_t ne, GEN x, GEN y);
PARILIB_API void    plotscale(int64_t ne, GEN x1, GEN x2, GEN y1, GEN y2);
PARILIB_API void    plotstring(int64_t ne, char *x, int64_t dir);
PARILIB_API void    psdraw(GEN list, int64_t flag);
PARILIB_API GEN     psploth(void *E, GEN(*f)(void*,GEN), GEN a, GEN b, int64_t flags, int64_t n, int64_t prec);
PARILIB_API GEN     psplothraw(GEN listx, GEN listy, int64_t flag);
PARILIB_API char*   rect2ps(GEN w, GEN x, GEN y, PARI_plot *T);
PARILIB_API char*   rect2ps_i(GEN w, GEN x, GEN y, PARI_plot *T, int plotps);
PARILIB_API char*   rect2svg(GEN w, GEN x, GEN y, PARI_plot *T);

/* plottty.c */

PARILIB_API void    pariplot(void* E, GEN (*fun)(void *E, GEN x), GEN a, GEN b, GEN ysmlu,GEN ybigu, int64_t prec);

/* polarit1.c */

PARILIB_API GEN     ZX_Zp_root(GEN f, GEN a, GEN p, int64_t prec);
PARILIB_API GEN     Zp_appr(GEN f, GEN a);
PARILIB_API int     cmp_padic(GEN x, GEN y);
PARILIB_API GEN     factorpadic(GEN x, GEN p, int64_t r);
PARILIB_API GEN     gdeuc(GEN x, GEN y);
PARILIB_API GEN     grem(GEN x, GEN y);
PARILIB_API GEN     padicappr(GEN f, GEN a);
PARILIB_API GEN     poldivrem(GEN x, GEN y, GEN *pr);
PARILIB_API GEN     polrootspadic(GEN f, GEN p, int64_t r);

/* polarit2.c */

PARILIB_API ulong   Flv_factorback(GEN L, GEN e, ulong p);
PARILIB_API GEN     FlxqV_factorback(GEN L, GEN e, GEN Tp, ulong p);
PARILIB_API GEN     FpV_factorback(GEN L, GEN e, GEN p);
PARILIB_API GEN     FqV_factorback(GEN L, GEN e, GEN Tp, GEN p);
PARILIB_API GEN     Q_content(GEN x);
PARILIB_API GEN     Q_content_safe(GEN x);
PARILIB_API GEN     Q_denom(GEN x);
PARILIB_API GEN     Q_denom_safe(GEN x);
PARILIB_API GEN     Q_div_to_int(GEN x, GEN c);
PARILIB_API GEN     Q_gcd(GEN x, GEN y);
PARILIB_API GEN     Q_mul_to_int(GEN x, GEN c);
PARILIB_API GEN     Q_muli_to_int(GEN x, GEN d);
PARILIB_API GEN     Q_primitive_part(GEN x, GEN *ptc);
PARILIB_API GEN     Q_primpart(GEN x);
PARILIB_API GEN     Q_remove_denom(GEN x, GEN *ptd);
PARILIB_API GEN     Q_factor(GEN x);
PARILIB_API GEN     Q_factor_limit(GEN x, ulong lim);
PARILIB_API int64_t    Rg_type(GEN x, GEN *ptp, GEN *ptpol, int64_t *ptpa);
PARILIB_API int64_t    RgM_RgC_type(GEN x, GEN y, GEN *p, GEN *pol, int64_t *pa);
PARILIB_API GEN     RgM_rescale_to_int(GEN x);
PARILIB_API int64_t    RgM_type(GEN x, GEN *p, GEN *pol, int64_t *pa);
PARILIB_API int64_t    RgM_type2(GEN x, GEN y, GEN *p, GEN *pol, int64_t *pa);
PARILIB_API int64_t    RgV_type(GEN x, GEN *p, GEN *pol, int64_t *pa);
PARILIB_API int64_t    RgV_type2(GEN x, GEN y, GEN *p, GEN *pol, int64_t *pa);
PARILIB_API int64_t    RgX_Rg_type(GEN x, GEN y, GEN *p, GEN *pol, int64_t *pa);
PARILIB_API GEN     RgX_rescale_to_int(GEN x);
PARILIB_API GEN     RgX_disc(GEN x);
PARILIB_API GEN     RgX_extgcd(GEN x, GEN y, GEN *U, GEN *V);
PARILIB_API GEN     RgX_extgcd_simple(GEN a, GEN b, GEN *pu, GEN *pv);
PARILIB_API GEN     RgX_gcd(GEN x, GEN y);
PARILIB_API GEN     RgX_gcd_simple(GEN x, GEN y);
PARILIB_API GEN     RgX_halfgcd(GEN x, GEN y);
PARILIB_API GEN     RgX_resultant_all(GEN P, GEN Q, GEN *sol);
PARILIB_API int64_t    RgX_sturmpart(GEN x, GEN ab);
PARILIB_API GEN     RgX_sylvestermatrix(GEN x, GEN y);
PARILIB_API int64_t    RgX_type(GEN x, GEN *ptp, GEN *ptpol, int64_t *ptpa);
PARILIB_API int64_t    RgX_type2(GEN x, GEN y, GEN *ptp, GEN *ptpol, int64_t *ptpa);
PARILIB_API int64_t    RgX_type3(GEN x, GEN y, GEN z, GEN *ptp, GEN *ptpol, int64_t *ptpa);
PARILIB_API void    RgX_type_decode(int64_t x, int64_t *t1, int64_t *t2);
PARILIB_API int     RgX_type_is_composite(int64_t t);
PARILIB_API GEN     RgXQ_charpoly(GEN x, GEN T, int64_t v);
PARILIB_API GEN     RgXQ_inv(GEN x, GEN y);
PARILIB_API GEN     RgXQ_mul(GEN x, GEN y, GEN T);
PARILIB_API int     RgXQ_ratlift(GEN y, GEN x, int64_t amax, int64_t bmax, GEN *P, GEN *Q);
PARILIB_API GEN     RgXQ_sqr(GEN x, GEN y);
PARILIB_API GEN     Z_content(GEN x);
PARILIB_API GEN     ZX_content(GEN x);
PARILIB_API GEN     centermod(GEN x, GEN p);
PARILIB_API GEN     centermod_i(GEN x, GEN p, GEN ps2);
PARILIB_API GEN     centermodii(GEN x, GEN p, GEN po2);
PARILIB_API GEN     content(GEN x);
PARILIB_API GEN     content0(GEN x, GEN D);
PARILIB_API GEN     deg1_from_roots(GEN L, int64_t v);
PARILIB_API GEN     factor(GEN x);
PARILIB_API GEN     factor0(GEN x, GEN flag);
PARILIB_API GEN     factorback(GEN fa);
PARILIB_API GEN     factorback2(GEN fa,GEN e);
PARILIB_API GEN     gbezout(GEN x, GEN y, GEN *u, GEN *v);
PARILIB_API GEN     gdivexact(GEN x, GEN y);
PARILIB_API GEN     gen_factorback(GEN L, GEN e, void *E, GEN (*_mul)(void*,GEN,GEN),
                                              GEN (*_pow)(void*,GEN,GEN));
PARILIB_API GEN     ggcd(GEN x, GEN y);
PARILIB_API GEN     ggcd0(GEN x, GEN y);
PARILIB_API GEN     ghalfgcd(GEN x, GEN y);
PARILIB_API GEN     ginvmod(GEN x, GEN y);
PARILIB_API GEN     glcm(GEN x, GEN y);
PARILIB_API GEN     glcm0(GEN x, GEN y);
PARILIB_API GEN     idealfactorback(GEN nf, GEN L, GEN e, int red);
PARILIB_API GEN     newtonpoly(GEN x, GEN p);
PARILIB_API GEN     nffactorback(GEN nf, GEN L, GEN e);
PARILIB_API GEN     nfrootsQ(GEN x);
PARILIB_API GEN     poldisc0(GEN x, int64_t v);
PARILIB_API int64_t    polisirreducible(GEN x);
PARILIB_API GEN     polresultant0(GEN x, GEN y,int64_t v,int64_t flag);
PARILIB_API GEN     polsym(GEN x, int64_t n);
PARILIB_API GEN     primitive_part(GEN x, GEN *c);
PARILIB_API GEN     primpart(GEN x);
PARILIB_API GEN     reduceddiscsmith(GEN pol);
PARILIB_API GEN     resultant2(GEN x, GEN y);
PARILIB_API GEN     resultant(GEN u, GEN v);
PARILIB_API GEN     rnfcharpoly(GEN nf, GEN T, GEN alpha, int64_t v);
PARILIB_API GEN     roots_from_deg1(GEN x);
PARILIB_API GEN     roots_to_pol(GEN a, int64_t v);
PARILIB_API GEN     roots_to_pol_r1(GEN a, int64_t v, int64_t r1);
PARILIB_API int64_t    sturmpart(GEN x, GEN a, GEN b);
PARILIB_API GEN     subresext(GEN x, GEN y, GEN *U, GEN *V);
PARILIB_API GEN     sylvestermatrix(GEN x,GEN y);
PARILIB_API GEN     trivial_fact(void);
PARILIB_API GEN     gcdext0(GEN x, GEN y);
PARILIB_API GEN     polresultantext0(GEN x, GEN y, int64_t v);
PARILIB_API GEN     polresultantext(GEN x, GEN y);
PARILIB_API GEN     prime_fact(GEN x);
PARILIB_API GEN     vec_Q_primpart(GEN M);
PARILIB_API GEN     vecprod(GEN v);
PARILIB_API GEN     ZV_lcm(GEN x);

/* polarit3.c */

PARILIB_API GEN     Flx_FlxY_resultant(GEN a, GEN b, ulong pp);
PARILIB_API GEN     FlxX_resultant(GEN u, GEN v, ulong p, int64_t sx);
PARILIB_API GEN     FpX_FpXY_resultant(GEN a, GEN b0, GEN p);
PARILIB_API GEN     FpX_translate(GEN P, GEN c, GEN p);
PARILIB_API GEN     FpXQX_normalize(GEN z, GEN T, GEN p);
PARILIB_API GEN     FpXV_FpC_mul(GEN V, GEN W, GEN p);
PARILIB_API GEN     FpXY_FpXQ_evaly(GEN Q, GEN y, GEN T, GEN p, int64_t vx);
PARILIB_API GEN     FpXC_center(GEN C, GEN p, GEN pov2);
PARILIB_API GEN     FpXM_center(GEN M, GEN p, GEN pov2);
PARILIB_API GEN     Fq_Fp_mul(GEN x, GEN y, GEN T, GEN p);
PARILIB_API GEN     Fq_add(GEN x, GEN y, GEN T/*unused*/, GEN p);
PARILIB_API GEN     Fq_div(GEN x, GEN y, GEN T, GEN p);
PARILIB_API GEN     Fq_halve(GEN x, GEN T/*unused*/, GEN p);
PARILIB_API GEN     Fq_inv(GEN x, GEN T, GEN p);
PARILIB_API GEN     Fq_invsafe(GEN x, GEN T, GEN p);
PARILIB_API GEN     Fq_mul(GEN x, GEN y, GEN T, GEN p);
PARILIB_API GEN     Fq_mulu(GEN x, ulong y, /*unused*/GEN T, GEN p);
PARILIB_API GEN     Fq_neg(GEN x, GEN T, GEN p);
PARILIB_API GEN     Fq_neg_inv(GEN x, GEN T, GEN p);
PARILIB_API GEN     Fq_pow(GEN x, GEN n, GEN T, GEN p);
PARILIB_API GEN     Fq_powu(GEN x, ulong n, GEN pol, GEN p);
PARILIB_API GEN     Fq_sqr(GEN x, GEN T, GEN p);
PARILIB_API GEN     Fq_sqrt(GEN x, GEN T, GEN p);
PARILIB_API GEN     Fq_sqrtn(GEN x, GEN n, GEN T, GEN p, GEN *zeta);
PARILIB_API GEN     Fq_sub(GEN x, GEN y, GEN T/*unused*/, GEN p);
PARILIB_API GEN     FqC_Fq_mul(GEN x, GEN y, GEN T, GEN p);
PARILIB_API GEN     FqC_FqV_mul(GEN x, GEN y, GEN T, GEN p);
PARILIB_API GEN     FqC_add(GEN x, GEN y, GEN T, GEN p);
PARILIB_API GEN     FqC_sub(GEN x, GEN y, GEN T, GEN p);
PARILIB_API GEN     FqC_to_FlxC(GEN v, GEN T, GEN pp);
PARILIB_API GEN     FqM_to_FlxM(GEN x, GEN T, GEN pp);
PARILIB_API GEN     FqV_red(GEN z, GEN T, GEN p);
PARILIB_API GEN     FqV_roots_to_pol(GEN V, GEN T, GEN p, int64_t v);
PARILIB_API GEN     FqV_to_FlxV(GEN v, GEN T, GEN pp);
PARILIB_API GEN     FqX_Fq_add(GEN y, GEN x, GEN T, GEN p);
PARILIB_API GEN     FqX_Fq_mul_to_monic(GEN P, GEN U, GEN T, GEN p);
PARILIB_API GEN     FqX_Fq_sub(GEN y, GEN x, GEN T, GEN p);
PARILIB_API GEN     FqX_eval(GEN x, GEN y, GEN T, GEN p);
PARILIB_API GEN     FqX_translate(GEN P, GEN c, GEN T, GEN p);
PARILIB_API GEN     FqXQ_matrix_pow(GEN y, int64_t n, int64_t m, GEN S, GEN T, GEN p);
PARILIB_API GEN     FqXQ_powers(GEN x, int64_t l, GEN S, GEN T, GEN p);
PARILIB_API GEN     FqXY_eval(GEN Q, GEN y, GEN x, GEN T, GEN p);
PARILIB_API GEN     FqXY_evalx(GEN Q, GEN x, GEN T, GEN p);
PARILIB_API GEN     QX_disc(GEN x);
PARILIB_API GEN     QX_gcd(GEN a,GEN b);
PARILIB_API GEN     QX_resultant(GEN A, GEN B);
PARILIB_API GEN     QXQ_div(GEN A, GEN B, GEN C);
PARILIB_API GEN     QXQ_intnorm(GEN A, GEN B);
PARILIB_API GEN     QXQ_inv(GEN A, GEN B);
PARILIB_API GEN     QXQ_mul(GEN A, GEN B, GEN T);
PARILIB_API GEN     QXQ_norm(GEN A, GEN B);
PARILIB_API GEN     QXQ_sqr(GEN A, GEN B);
PARILIB_API int     Rg_is_Fp(GEN x, GEN *p);
PARILIB_API int     Rg_is_FpXQ(GEN x, GEN *pT, GEN *pp);
PARILIB_API GEN     Rg_to_Fp(GEN x, GEN p);
PARILIB_API GEN     Rg_to_FpXQ(GEN x, GEN T, GEN p);
PARILIB_API GEN     RgC_to_FpC(GEN x, GEN p);
PARILIB_API GEN     RgC_to_FqC(GEN x, GEN T, GEN p);
PARILIB_API int     RgM_is_FpM(GEN x, GEN *p);
PARILIB_API GEN     RgM_to_Flm(GEN x, ulong p);
PARILIB_API GEN     RgM_to_FpM(GEN x, GEN p);
PARILIB_API GEN     RgM_to_FqM(GEN x, GEN T, GEN p);
PARILIB_API int     RgV_is_FpV(GEN x, GEN *p);
PARILIB_API GEN     RgV_to_Flv(GEN x, ulong p);
PARILIB_API GEN     RgV_to_FpV(GEN x, GEN p);
PARILIB_API int     RgX_is_FpX(GEN x, GEN *p);
PARILIB_API GEN     RgX_to_FpX(GEN x, GEN p);
PARILIB_API int     RgX_is_FpXQX(GEN x, GEN *pT, GEN *pp);
PARILIB_API GEN     RgX_to_FpXQX(GEN x, GEN T, GEN p);
PARILIB_API GEN     RgX_to_FqX(GEN x, GEN T, GEN p);
PARILIB_API int     Z_incremental_CRT(GEN *H, ulong Hp, GEN *q, ulong p);
PARILIB_API GEN     Z_init_CRT(ulong Hp, ulong p);
PARILIB_API int     ZM_incremental_CRT(GEN *H, GEN Hp, GEN *q, ulong p);
PARILIB_API GEN     ZM_init_CRT(GEN Hp, ulong p);
PARILIB_API GEN     ZX_ZXY_resultant(GEN a, GEN b);
PARILIB_API GEN     ZX_ZXY_rnfequation(GEN A, GEN B, int64_t *lambda);
PARILIB_API GEN     ZX_disc(GEN x);
PARILIB_API GEN     ZX_gcd(GEN A, GEN B);
PARILIB_API GEN     ZX_gcd_all(GEN A, GEN B, GEN *Anew);
PARILIB_API int     ZX_incremental_CRT(GEN *ptH, GEN Hp, GEN *q, ulong p);
PARILIB_API GEN     ZX_init_CRT(GEN Hp, ulong p, int64_t v);
PARILIB_API int     ZX_is_squarefree(GEN x);
PARILIB_API GEN     ZX_radical(GEN A);
PARILIB_API GEN     ZX_resultant(GEN A, GEN B);
PARILIB_API int     ZXM_incremental_CRT(GEN *pH, GEN Hp, GEN *ptq, ulong p);
PARILIB_API GEN     ZXM_init_CRT(GEN Hp, int64_t deg, ulong p);
PARILIB_API GEN     ZXQ_minpoly(GEN A, GEN T, int64_t d, ulong b);
PARILIB_API GEN     ZXQ_charpoly(GEN A, GEN T, int64_t v);
PARILIB_API GEN     characteristic(GEN x);
PARILIB_API GEN     ffinit(GEN p, int64_t n, int64_t v);
PARILIB_API GEN     ffnbirred(GEN p, int64_t n);
PARILIB_API GEN     ffnbirred0(GEN p, int64_t n, int64_t flag);
PARILIB_API GEN     ffsumnbirred(GEN p, int64_t n);
PARILIB_API const struct bb_field *get_Fq_field(void **E, GEN T, GEN p);
PARILIB_API GEN     init_Flxq(ulong p, int64_t n, int64_t v);
PARILIB_API GEN     init_Fq(GEN p, int64_t n, int64_t v);
PARILIB_API GEN     nfX_disc(GEN nf, GEN x);
PARILIB_API GEN     nfX_resultant(GEN nf, GEN x, GEN y);
PARILIB_API GEN     pol_x_powers(int64_t N, int64_t v);
PARILIB_API GEN     residual_characteristic(GEN x);

/* polclass.c */

PARILIB_API GEN     polclass(GEN D, int64_t inv, int64_t xvar);

/* polmodular.c */

PARILIB_API GEN     Fp_modinv_to_j(GEN x, int64_t inv, GEN p);
PARILIB_API GEN     Fp_polmodular_evalx(int64_t L, int64_t inv, GEN J, GEN P, int64_t v, int compute_derivs);
PARILIB_API void    check_modinv(int64_t inv);
PARILIB_API int64_t    disc_best_modinv(int64_t D);
PARILIB_API int64_t    modinv_height_factor(int64_t inv);
PARILIB_API int     modinv_good_disc(int64_t inv, int64_t D);
PARILIB_API int     modinv_good_prime(int64_t inv, int64_t p);
PARILIB_API int     modinv_is_Weber(int64_t inv);
PARILIB_API int     modinv_is_double_eta(int64_t inv);
PARILIB_API GEN     polmodular(int64_t L, int64_t inv, GEN x, int64_t yvar, int64_t compute_derivs);
PARILIB_API GEN     polmodular_ZM(int64_t L, int64_t inv);
PARILIB_API GEN     polmodular_ZXX(int64_t L, int64_t inv, int64_t xvar, int64_t yvar);

/* prime.c */

PARILIB_API int64_t    BPSW_isprime(GEN x);
PARILIB_API int64_t    BPSW_psp(GEN N);
PARILIB_API GEN     addprimes(GEN primes);
PARILIB_API GEN     gisprime(GEN x, int64_t flag);
PARILIB_API GEN     gispseudoprime(GEN x, int64_t flag);
PARILIB_API GEN     gprimepi_upper_bound(GEN x);
PARILIB_API GEN     gprimepi_lower_bound(GEN x);
PARILIB_API int64_t    isprime(GEN x);
PARILIB_API int64_t    ispseudoprime(GEN x, int64_t flag);
PARILIB_API int64_t    millerrabin(GEN n, int64_t k);
PARILIB_API GEN     prime(int64_t n);
PARILIB_API GEN     primecert(GEN x, int64_t flag);
PARILIB_API GEN     primecertexport(GEN cert, int64_t flag);
PARILIB_API int64_t    primecertisvalid(GEN x);
PARILIB_API GEN     primepi(GEN x);
PARILIB_API double  primepi_upper_bound(double x);
PARILIB_API double  primepi_lower_bound(double x);
PARILIB_API GEN     primes(int64_t n);
PARILIB_API GEN     primes_interval(GEN a, GEN b);
PARILIB_API GEN     primes_interval_zv(ulong a, ulong b);
PARILIB_API GEN     primes_upto_zv(ulong b);
PARILIB_API GEN     primes0(GEN n);
PARILIB_API GEN     primes_zv(int64_t m);
PARILIB_API GEN     randomprime(GEN N);
PARILIB_API GEN     randomprime0(GEN N, GEN q);
PARILIB_API GEN     removeprimes(GEN primes);
PARILIB_API int     uis2psp(ulong n);
PARILIB_API int     uispsp(ulong a, ulong n);
PARILIB_API int     uislucaspsp(ulong n);
PARILIB_API int     uisprime(ulong n);
PARILIB_API int     uisprime_101(ulong n);
PARILIB_API int     uisprime_661(ulong n);
PARILIB_API ulong   uprime(int64_t n);
PARILIB_API ulong   uprimepi(ulong n);

/* qfisom.c */

PARILIB_API GEN     qfauto(GEN g, GEN flags);
PARILIB_API GEN     qfauto0(GEN g, GEN flags);
PARILIB_API GEN     qfautoexport(GEN g, int64_t flag);
PARILIB_API GEN     qfisom(GEN g, GEN h, GEN flags, GEN G);
PARILIB_API GEN     qfisom0(GEN g, GEN h, GEN flags, GEN G);
PARILIB_API GEN     qfisominit(GEN g, GEN flags, GEN minvec);
PARILIB_API GEN     qfisominit0(GEN g, GEN flags, GEN minvec);
PARILIB_API GEN     qforbits(GEN G, GEN V);

/* qfparam.c */

PARILIB_API GEN     qfsolve(GEN G);
PARILIB_API GEN     qfparam(GEN G, GEN sol, int64_t fl);

/* random.c */

PARILIB_API GEN     genrand(GEN N);
PARILIB_API GEN     getrand(void);
PARILIB_API ulong   pari_rand(void);
PARILIB_API GEN     randomi(GEN x);
PARILIB_API GEN     randomr(int64_t prec);
PARILIB_API GEN     random_F2x(int64_t d, int64_t vs);
PARILIB_API ulong   random_Fl(ulong n);
PARILIB_API int64_t    random_bits(int64_t k);
PARILIB_API GEN     random_zv(int64_t n);
PARILIB_API void    setrand(GEN seed);

/* ratpoints.c */

PARILIB_API GEN     ellratpoints(GEN E, GEN h, int64_t flag);
PARILIB_API GEN     hyperellratpoints(GEN P, GEN h, int64_t flag);

/* rootpol.c */

PARILIB_API GEN     QX_complex_roots(GEN p, int64_t l);
PARILIB_API GEN     FFT(GEN W, GEN x);
PARILIB_API GEN     FFTinv(GEN W, GEN x);
PARILIB_API GEN     cleanroots(GEN x,int64_t l);
PARILIB_API double  fujiwara_bound(GEN p);
PARILIB_API double  fujiwara_bound_real(GEN p, int64_t sign);
PARILIB_API int     isrealappr(GEN x, int64_t l);
PARILIB_API GEN     polgraeffe(GEN p);
PARILIB_API GEN     polmod_to_embed(GEN x, int64_t prec);
PARILIB_API GEN     polrootsbound(GEN p, GEN tau);
PARILIB_API GEN     roots(GEN x,int64_t l);
PARILIB_API GEN     realroots(GEN P, GEN ab, int64_t prec);
PARILIB_API GEN     ZX_graeffe(GEN p);
PARILIB_API GEN     ZX_realroots_irred(GEN P, int64_t prec);
PARILIB_API int64_t    ZX_sturm(GEN P);
PARILIB_API int64_t    ZX_sturm_irred(GEN P);
PARILIB_API int64_t    ZX_sturmpart(GEN P, GEN ab);
PARILIB_API GEN     ZX_Uspensky(GEN P, GEN ab, int64_t flag, int64_t prec);

/* subcyclo.c */

PARILIB_API GEN     factor_Aurifeuille(GEN p, int64_t n);
PARILIB_API GEN     factor_Aurifeuille_prime(GEN p, int64_t n);
PARILIB_API GEN     galoissubcyclo(GEN N, GEN sg, int64_t flag, int64_t v);
PARILIB_API GEN     polsubcyclo(int64_t n, int64_t d, int64_t v);

/* subfield.c */

PARILIB_API GEN     nfsubfields(GEN nf, int64_t d);
PARILIB_API GEN     nfsubfields0(GEN nf, int64_t d, int64_t flag);
PARILIB_API GEN     nfsubfieldscm(GEN nf, int64_t flag);
PARILIB_API GEN     nfsubfieldsmax(GEN nf, int64_t flag);

/* subgroup.c */

PARILIB_API GEN     subgrouplist(GEN cyc, GEN bound);
PARILIB_API void    forsubgroup(void *E, int64_t fun(void*,GEN), GEN cyc, GEN B);

/* stark.c */

PARILIB_API GEN     ag_kernel(GEN S);
PARILIB_API GEN     ag_subgroup_image(GEN S, GEN H);
PARILIB_API GEN     bnrL1(GEN bnr, GEN sbgrp, int64_t flag, int64_t prec);
PARILIB_API GEN     bnrrootnumber(GEN bnr, GEN chi, int64_t flag, int64_t prec);
PARILIB_API GEN     bnrstark(GEN bnr, GEN subgroup, int64_t prec);
PARILIB_API GEN     cyc2elts(GEN cyc);
PARILIB_API GEN     qfbforms(GEN D);

/* str.c */

PARILIB_API GEN     chartoGENstr(char c);
PARILIB_API char*   pari_strdup(const char *s);
PARILIB_API char*   pari_strndup(const char *s, int64_t n);
PARILIB_API char*   stack_strcat(const char *s, const char *t);
PARILIB_API char*   stack_strdup(const char *s);
PARILIB_API GEN     pari_strchr(GEN g);
PARILIB_API GEN     strjoin(GEN v, GEN p);
PARILIB_API GEN     strntoGENstr(const char *s, int64_t n0);
PARILIB_API GEN     strsplit(GEN x, GEN p);
PARILIB_API GEN     strtoGENstr(const char *s);
PARILIB_API const char* type_name(int64_t t);
PARILIB_API GEN     type0(GEN x);

/* sumiter.c */

PARILIB_API GEN     asympnum(void *E, GEN (*f)(void *,GEN,int64_t), GEN alpha, int64_t prec);
PARILIB_API GEN     asympnumraw(void *E, GEN (*f)(void *,GEN,int64_t), int64_t LIM, GEN alpha, int64_t prec);
PARILIB_API GEN     derivnum(void *E, GEN (*eval)(void *, GEN, int64_t prec), GEN x, int64_t prec);
PARILIB_API GEN     derivnumk(void *E, GEN (*eval)(void *, GEN, int64_t), GEN x, GEN ind0, int64_t prec);
PARILIB_API GEN     derivfun(void *E, GEN (*eval)(void *, GEN, int64_t prec), GEN x, int64_t prec);
PARILIB_API GEN     derivfunk(void *E, GEN (*eval)(void *, GEN, int64_t), GEN x, GEN ind0, int64_t prec);
PARILIB_API int     forvec_init(forvec_t *T, GEN x, int64_t flag);
PARILIB_API GEN     forvec_next(forvec_t *T);
PARILIB_API GEN     laurentseries(void *E, GEN (*f)(void*,GEN x, int64_t), int64_t M, int64_t v, int64_t prec);
PARILIB_API GEN     limitnum(void *E, GEN (*f)(void *,GEN,int64_t), GEN alpha, int64_t prec);
PARILIB_API GEN     polzag(int64_t n, int64_t m);
PARILIB_API GEN     prodeuler(void *E, GEN (*eval)(void *, GEN), GEN ga, GEN gb, int64_t prec);
PARILIB_API GEN     prodinf(void *E, GEN (*eval)(void *, GEN), GEN a, int64_t prec);
PARILIB_API GEN     prodinf1(void *E, GEN (*eval)(void *, GEN), GEN a, int64_t prec);
PARILIB_API GEN     solvestep(void *E, GEN (*eval)(void *, GEN), GEN a, GEN b, GEN step, int64_t flag, int64_t prec);
PARILIB_API GEN     sumalt(void *E, GEN (*eval)(void *, GEN), GEN a, int64_t prec);
PARILIB_API GEN     sumalt2(void *E, GEN (*eval)(void *, GEN), GEN a, int64_t prec);
PARILIB_API GEN     sumpos(void *E, GEN (*eval)(void *, GEN), GEN a, int64_t prec);
PARILIB_API GEN     sumpos2(void *E, GEN (*eval)(void *, GEN), GEN a, int64_t prec);
PARILIB_API GEN     suminf(void *E, GEN (*eval)(void *, GEN), GEN a, int64_t prec);
PARILIB_API GEN     suminf_bitprec(void *E, GEN (*eval)(void *, GEN), GEN a, int64_t prec);
PARILIB_API GEN     sumdivmultexpr(void *D, GEN (*fun)(void*, GEN), GEN num);
PARILIB_API GEN     zbrent(void *E, GEN (*eval)(void *, GEN), GEN a, GEN b, int64_t prec);

/* thue.c */

PARILIB_API GEN     bnfisintnorm(GEN x, GEN y);
PARILIB_API GEN     bnfisintnormabs(GEN bnf, GEN a);
PARILIB_API GEN     thue(GEN thueres, GEN rhs, GEN ne);
PARILIB_API GEN     thueinit(GEN pol, int64_t flag, int64_t prec);

/* trans1.c */

PARILIB_API GEN     Pi2n(int64_t n, int64_t prec);
PARILIB_API GEN     PiI2(int64_t prec);
PARILIB_API GEN     PiI2n(int64_t n, int64_t prec);
PARILIB_API GEN     Qp_exp(GEN x);
PARILIB_API GEN     Qp_log(GEN x);
PARILIB_API GEN     Qp_sqrt(GEN x);
PARILIB_API GEN     Qp_sqrtn(GEN x, GEN n, GEN *zetan);
PARILIB_API int64_t    Zn_ispower(GEN a, GEN q, GEN K, GEN *pt);
PARILIB_API int64_t    Zn_issquare(GEN x, GEN n);
PARILIB_API GEN     Zn_sqrt(GEN x, GEN n);
PARILIB_API GEN     Zp_teichmuller(GEN x, GEN p, int64_t n, GEN q);
PARILIB_API GEN     agm(GEN x, GEN y, int64_t prec);
PARILIB_API GEN     constcatalan(int64_t prec);
PARILIB_API GEN     consteuler(int64_t prec);
PARILIB_API GEN     constlog2(int64_t prec);
PARILIB_API GEN     constpi(int64_t prec);
PARILIB_API GEN     cxexpm1(GEN z, int64_t prec);
PARILIB_API GEN     ellE(GEN k, int64_t prec);
PARILIB_API GEN     ellK(GEN k, int64_t prec);
PARILIB_API GEN     expIr(GEN x);
PARILIB_API GEN     exp1r_abs(GEN x);
PARILIB_API GEN     gcos(GEN x, int64_t prec);
PARILIB_API GEN     gcotan(GEN x, int64_t prec);
PARILIB_API GEN     gcotanh(GEN x, int64_t prec);
PARILIB_API GEN     gexp(GEN x, int64_t prec);
PARILIB_API GEN     gexpm1(GEN x, int64_t prec);
PARILIB_API GEN     glog(GEN x, int64_t prec);
PARILIB_API GEN     glog1p(GEN x, int64_t prec);
PARILIB_API GEN     gpow(GEN x, GEN n, int64_t prec);
PARILIB_API GEN     gpowers(GEN x, int64_t n);
PARILIB_API GEN     gpowers0(GEN x, int64_t n, GEN x0);
PARILIB_API GEN     gpowgs(GEN x, int64_t n);
PARILIB_API GEN     grootsof1(int64_t N, int64_t prec);
PARILIB_API GEN     gsin(GEN x, int64_t prec);
PARILIB_API GEN     gsinc(GEN x, int64_t prec);
PARILIB_API void    gsincos(GEN x, GEN *s, GEN *c, int64_t prec);
PARILIB_API GEN     gsqrpowers(GEN q, int64_t n);
PARILIB_API GEN     gsqrt(GEN x, int64_t prec);
PARILIB_API GEN     gsqrtn(GEN x, GEN n, GEN *zetan, int64_t prec);
PARILIB_API GEN     gtan(GEN x, int64_t prec);
PARILIB_API GEN     logr_abs(GEN x);
PARILIB_API GEN     mpcos(GEN x);
PARILIB_API GEN     mpeuler(int64_t prec);
PARILIB_API GEN     mpcatalan(int64_t prec);
PARILIB_API void    mpsincosm1(GEN x, GEN *s, GEN *c);
PARILIB_API GEN     mpexp(GEN x);
PARILIB_API GEN     mpexpm1(GEN x);
PARILIB_API GEN     mplog(GEN x);
PARILIB_API GEN     mplog2(int64_t prec);
PARILIB_API GEN     mppi(int64_t prec);
PARILIB_API GEN     mpsin(GEN x);
PARILIB_API void    mpsincos(GEN x, GEN *s, GEN *c);
PARILIB_API GEN     powPis(GEN s, int64_t prec);
PARILIB_API GEN     pow2Pis(GEN s, int64_t prec);
PARILIB_API GEN     powersr(GEN a, int64_t n);
PARILIB_API GEN     powis(GEN x, int64_t n);
PARILIB_API GEN     powiu(GEN p, ulong k);
PARILIB_API GEN     powrfrac(GEN x, int64_t n, int64_t d);
PARILIB_API GEN     powrs(GEN x, int64_t n);
PARILIB_API GEN     powrshalf(GEN x, int64_t s);
PARILIB_API GEN     powru(GEN x, ulong n);
PARILIB_API GEN     powruhalf(GEN x, ulong s);
PARILIB_API GEN     powuu(ulong p, ulong k);
PARILIB_API GEN     powgi(GEN x, GEN n);
PARILIB_API GEN     rootsof1_cx(GEN d, int64_t prec);
PARILIB_API GEN     rootsof1u_cx(ulong d, int64_t prec);
PARILIB_API GEN     rootsof1q_cx(int64_t a, int64_t b, int64_t prec);
PARILIB_API GEN     rootsof1powinit(int64_t a, int64_t b, int64_t prec);
PARILIB_API GEN     rootsof1pow(GEN T, int64_t c);
PARILIB_API GEN     serchop(GEN s, int64_t n);
PARILIB_API GEN     serchop_i(GEN s, int64_t n);
PARILIB_API GEN     serchop0(GEN s);
PARILIB_API GEN     sqrtnint(GEN a, int64_t n);
PARILIB_API GEN     sqrtnr_abs(GEN x, int64_t n);
PARILIB_API GEN     teich(GEN x);
PARILIB_API GEN     teichmullerinit(int64_t p, int64_t n);
PARILIB_API GEN     teichmuller(GEN x, GEN tab);
PARILIB_API GEN     trans_eval(const char *fun, GEN (*f) (GEN, int64_t), GEN x, int64_t prec);
PARILIB_API ulong   upowuu(ulong p, ulong k);
PARILIB_API GEN     upowers(ulong x, int64_t n);
PARILIB_API ulong   usqrtn(ulong a, ulong n);
PARILIB_API ulong   usqrt(ulong a);

/* trans2.c */

PARILIB_API GEN     Qp_gamma(GEN x);
PARILIB_API GEN     gacosh(GEN x, int64_t prec);
PARILIB_API GEN     gacos(GEN x, int64_t prec);
PARILIB_API GEN     garg(GEN x, int64_t prec);
PARILIB_API GEN     gasinh(GEN x, int64_t prec);
PARILIB_API GEN     gasin(GEN x, int64_t prec);
PARILIB_API GEN     gatan(GEN x, int64_t prec);
PARILIB_API GEN     gatanh(GEN x, int64_t prec);
PARILIB_API GEN     gcosh(GEN x, int64_t prec);
PARILIB_API GEN     ggammah(GEN x, int64_t prec);
PARILIB_API GEN     ggamma(GEN x, int64_t prec);
PARILIB_API GEN     ggamma1m1(GEN x, int64_t prec);
PARILIB_API GEN     glngamma(GEN x, int64_t prec);
PARILIB_API GEN     gpsi(GEN x, int64_t prec);
PARILIB_API GEN     gsinh(GEN x, int64_t prec);
PARILIB_API GEN     gtanh(GEN x, int64_t prec);
PARILIB_API GEN     mpfactr(int64_t n, int64_t prec);
PARILIB_API void    mpsinhcosh(GEN x, GEN *s, GEN *c);
PARILIB_API GEN     psi1series(int64_t n, int64_t v, int64_t prec);
PARILIB_API GEN     sumformal(GEN T, int64_t v);

/* trans3.c */

PARILIB_API int     RgV_is_arithprog(GEN v, GEN *a, GEN *b);
PARILIB_API GEN     constzeta(int64_t n, int64_t prec);
PARILIB_API GEN     cxEk(GEN tau, int64_t k, int64_t prec);
PARILIB_API double  dblmodulus(GEN x);
PARILIB_API GEN     dilog(GEN x, int64_t prec);
PARILIB_API GEN     eint1(GEN x, int64_t prec);
PARILIB_API GEN     expIPiR(GEN x, int64_t prec);
PARILIB_API GEN     expIPiC(GEN z, int64_t prec);
PARILIB_API GEN     expIxy(GEN x, GEN y, int64_t prec);
PARILIB_API GEN     eta(GEN x, int64_t prec);
PARILIB_API GEN     eta0(GEN x, int64_t flag,int64_t prec);
PARILIB_API GEN     gerfc(GEN x, int64_t prec);
PARILIB_API GEN     glambertW(GEN y, int64_t prec);
PARILIB_API GEN     gpolylog(int64_t m, GEN x, int64_t prec);
PARILIB_API GEN     gzeta(GEN x, int64_t prec);
PARILIB_API GEN     hbessel1(GEN n, GEN z, int64_t prec);
PARILIB_API GEN     hbessel2(GEN n, GEN z, int64_t prec);
PARILIB_API GEN     hyperu(GEN a, GEN b, GEN gx, int64_t prec);
PARILIB_API GEN     ibessel(GEN n, GEN z, int64_t prec);
PARILIB_API GEN     incgam(GEN a, GEN x, int64_t prec);
PARILIB_API GEN     incgam0(GEN a, GEN x, GEN z,int64_t prec);
PARILIB_API GEN     incgamc(GEN a, GEN x, int64_t prec);
PARILIB_API GEN     jbessel(GEN n, GEN z, int64_t prec);
PARILIB_API GEN     jbesselh(GEN n, GEN z, int64_t prec);
PARILIB_API GEN     jell(GEN x, int64_t prec);
PARILIB_API GEN     kbessel(GEN nu, GEN gx, int64_t prec);
PARILIB_API GEN     mpeint1(GEN x, GEN expx);
PARILIB_API GEN     mplambertW(GEN y);
PARILIB_API GEN     mpveceint1(GEN C, GEN eC, int64_t n);
PARILIB_API GEN     nbessel(GEN n, GEN z, int64_t prec);
PARILIB_API GEN     polylog0(int64_t m, GEN x, int64_t flag, int64_t prec);
PARILIB_API GEN     sumdedekind(GEN h, GEN k);
PARILIB_API GEN     sumdedekind_coprime(GEN h, GEN k);
PARILIB_API GEN     szeta(int64_t x, int64_t prec);
PARILIB_API GEN     theta(GEN q, GEN z, int64_t prec);
PARILIB_API GEN     thetanullk(GEN q, int64_t k, int64_t prec);
PARILIB_API GEN     trueeta(GEN x, int64_t prec);
PARILIB_API GEN     u_sumdedekind_coprime(int64_t h, int64_t k);
PARILIB_API GEN     upper_to_cx(GEN x, int64_t *prec);
PARILIB_API GEN     veceint1(GEN nmax, GEN C, int64_t prec);
PARILIB_API GEN     vecthetanullk(GEN q, int64_t k, int64_t prec);
PARILIB_API GEN     vecthetanullk_tau(GEN tau, int64_t k, int64_t prec);
PARILIB_API GEN     veczeta(GEN a, GEN b, int64_t N, int64_t prec);
PARILIB_API GEN     weber0(GEN x, int64_t flag,int64_t prec);
PARILIB_API GEN     weberf(GEN x, int64_t prec);
PARILIB_API GEN     weberf1(GEN x, int64_t prec);
PARILIB_API GEN     weberf2(GEN x, int64_t prec);
PARILIB_API GEN     zetahurwitz(GEN s, GEN x, int64_t der, int64_t bitprec);

/* modsym.c */
PARILIB_API GEN     SL2_inv_shallow(GEN M);
PARILIB_API GEN     Qevproj_apply(GEN T, GEN pro);
PARILIB_API GEN     Qevproj_apply_vecei(GEN T, GEN pro, int64_t k);
PARILIB_API GEN     Qevproj_down(GEN T, GEN pro);
PARILIB_API GEN     Qevproj_init(GEN M);
PARILIB_API GEN     RgX_act_Gl2Q(GEN g, int64_t k);
PARILIB_API GEN     RgX_act_ZGl2Q(GEN z, int64_t k);
PARILIB_API void    checkms(GEN W);
PARILIB_API void    checkmspadic(GEN W);
PARILIB_API GEN     ellpadiclambdamu(GEN E, int64_t p, int64_t D, int64_t R);
PARILIB_API GEN     mfnumcusps(GEN n);
PARILIB_API GEN     mfnumcusps_fact(GEN fa);
PARILIB_API ulong   mfnumcuspsu_fact(GEN fa);
PARILIB_API ulong   mfnumcuspsu(ulong n);
PARILIB_API GEN     msfromcusp(GEN W, GEN c);
PARILIB_API GEN     msfromell(GEN E, int64_t signe);
PARILIB_API GEN     msfromhecke(GEN W, GEN v, GEN H);
PARILIB_API int64_t    msdim(GEN W);
PARILIB_API GEN     mseval2_ooQ(GEN W, GEN xpm, GEN c);
PARILIB_API int64_t    msgetlevel(GEN W);
PARILIB_API int64_t    msgetsign(GEN W);
PARILIB_API int64_t    msgetweight(GEN W);
PARILIB_API GEN     msatkinlehner(GEN W, int64_t Q, GEN);
PARILIB_API GEN     mscuspidal(GEN W, int64_t flag);
PARILIB_API GEN     mseisenstein(GEN W);
PARILIB_API GEN     mseval(GEN W, GEN s, GEN p);
PARILIB_API GEN     mshecke(GEN W, int64_t p, GEN H);
PARILIB_API GEN     msinit(GEN N, GEN k, int64_t sign);
PARILIB_API GEN     msissymbol(GEN W, GEN s);
PARILIB_API GEN     mslattice(GEN M, GEN F);
PARILIB_API GEN     msomseval(GEN W, GEN phi, GEN path);
PARILIB_API void    mspadic_parse_chi(GEN s, GEN *s1, GEN *s2);
PARILIB_API GEN     mspadic_unit_eigenvalue(GEN ap, int64_t k, GEN p, int64_t n);
PARILIB_API GEN     mspadicinit(GEN W, int64_t p, int64_t n, int64_t flag);
PARILIB_API GEN     mspadicL(GEN oms, GEN s, int64_t r);
PARILIB_API GEN     mspadicmoments(GEN W, GEN phi, int64_t D);
PARILIB_API GEN     mspadicseries(GEN M, int64_t teichi);
PARILIB_API GEN     mspathgens(GEN W);
PARILIB_API GEN     mspathlog(GEN W, GEN path);
PARILIB_API GEN     msnew(GEN W);
PARILIB_API GEN     mspetersson(GEN W, GEN F1, GEN F2);
PARILIB_API GEN     mspolygon(GEN M, int64_t flag);
PARILIB_API GEN     msstar(GEN W, GEN);
PARILIB_API GEN     msqexpansion(GEN W, GEN proV, ulong B);
PARILIB_API GEN     mssplit(GEN W, GEN H, int64_t deglim);
PARILIB_API GEN     mstooms(GEN W, GEN phi);

/* mscosets.c */
PARILIB_API GEN mscosets0(GEN V, GEN code);
PARILIB_API GEN mscosets(GEN V, void *E, int64_t (*in)(void *, GEN));
PARILIB_API GEN msfarey(GEN F, void *E, int64_t (*in)(void *, GEN), GEN *pCM);
PARILIB_API GEN msfarey0(GEN F, GEN code, GEN *pCM);
PARILIB_API int checkfarey_i(GEN F);

/* zetamult.c */

PARILIB_API GEN     polylogmult(GEN avec, GEN zvec, int64_t prec);
PARILIB_API GEN     polylogmult_interpolate(GEN avec, GEN zvec, GEN t, int64_t prec);
PARILIB_API GEN     zetamult(GEN avec, int64_t prec);
PARILIB_API GEN     zetamultdual(GEN s);
PARILIB_API GEN     zetamult_interpolate(GEN avec, GEN t, int64_t prec);
PARILIB_API GEN     zetamultall(int64_t k, int64_t flag, int64_t prec);
PARILIB_API GEN     zetamultconvert(GEN a, int64_t fl);

/* level1.c */

PARILIB_API int64_t addll(ulong a, ulong b, ulong *overflow);
PARILIB_API int64_t addllx(ulong a, ulong b, ulong *overflow);
PARILIB_API int64_t subll(ulong __arg1, ulong __arg2, ulong *overflow);
PARILIB_API int64_t subllx(ulong a, ulong b, ulong *overflow);
PARILIB_API int64_t addmul(ulong x, ulong y, ulong *hiremainder);
PARILIB_API int64_t mulll(ulong x, ulong y, ulong* hireaminder);
PARILIB_API ulong  Fl_add(ulong a, ulong b, ulong p);
PARILIB_API ulong  Fl_addmul_pre(ulong x0, ulong x1, ulong y0, ulong p, ulong pi);
PARILIB_API ulong  Fl_addmulmul_pre(ulong x0, ulong y0, ulong x1, ulong y1, ulong p, ulong pi);
PARILIB_API int64_t   Fl_center(ulong u, ulong p, ulong ps2);
PARILIB_API ulong  Fl_div(ulong a, ulong b, ulong p);
PARILIB_API ulong  Fl_double(ulong a, ulong p);
PARILIB_API ulong  Fl_ellj_pre(ulong a4, ulong a6, ulong p, ulong pi);
PARILIB_API ulong  Fl_halve(ulong y, ulong p);
PARILIB_API ulong  Fl_mul(ulong a, ulong b, ulong p);
PARILIB_API ulong  Fl_mul_pre(ulong a, ulong b, ulong p, ulong pi);
PARILIB_API ulong  Fl_neg(ulong x, ulong p);
PARILIB_API ulong  Fl_sqr(ulong a, ulong p);
PARILIB_API ulong  Fl_sqr_pre(ulong a, ulong p, ulong pi);
PARILIB_API ulong  Fl_sub(ulong a, ulong b, ulong p);
PARILIB_API ulong  Fl_triple(ulong a, ulong p);
PARILIB_API ulong  Mod2(GEN x);
PARILIB_API ulong  Mod4(GEN x);
PARILIB_API ulong  Mod8(GEN x);
PARILIB_API ulong  Mod16(GEN x);
PARILIB_API ulong  Mod32(GEN x);
PARILIB_API ulong  Mod64(GEN x);
PARILIB_API int    abscmpiu(GEN x, ulong y);
PARILIB_API int    abscmpui(ulong x, GEN y);
PARILIB_API int    absequaliu(GEN x, ulong y);
PARILIB_API GEN    absi(GEN x);
PARILIB_API GEN    absi_shallow(GEN x);
PARILIB_API GEN    absr(GEN x);
PARILIB_API int    absrnz_equal1(GEN x);
PARILIB_API int    absrnz_equal2n(GEN x);
PARILIB_API GEN    addii(GEN x, GEN y);
PARILIB_API void   addiiz(GEN x, GEN y, GEN z);
PARILIB_API GEN    addir(GEN x, GEN y);
PARILIB_API void   addirz(GEN x, GEN y, GEN z);
PARILIB_API GEN    addis(GEN x, int64_t s);
PARILIB_API GEN    addiu(GEN x, ulong s);
PARILIB_API GEN    addri(GEN x, GEN y);
PARILIB_API void   addriz(GEN x, GEN y, GEN z);
PARILIB_API GEN    addrr(GEN x, GEN y);
PARILIB_API void   addrrz(GEN x, GEN y, GEN z);
PARILIB_API GEN    addrs(GEN x, int64_t s);
PARILIB_API GEN    addsi(int64_t x, GEN y);
PARILIB_API GEN    addui(ulong x, GEN y);
PARILIB_API void   addsiz(int64_t s, GEN y, GEN z);
PARILIB_API void   addsrz(int64_t s, GEN y, GEN z);
PARILIB_API GEN    addss(int64_t x, int64_t y);
PARILIB_API void   addssz(int64_t s, int64_t y, GEN z);
PARILIB_API GEN    adduu(ulong x, ulong y);
INLINE void   affgr(GEN x, GEN y);
PARILIB_API void   affii(GEN x, GEN y);
PARILIB_API void   affiz(GEN x, GEN y);
PARILIB_API void   affrr_fixlg(GEN y, GEN z);
PARILIB_API void   affsi(int64_t s, GEN x);
PARILIB_API void   affsr(int64_t s, GEN x);
PARILIB_API void   affsz(int64_t x, GEN y);
PARILIB_API void   affui(ulong s, GEN x);
PARILIB_API void   affur(ulong s, GEN x);
PARILIB_API GEN    cgetg(int64_t x, int64_t y);
PARILIB_API GEN    cgetg_block(int64_t x, int64_t y);
PARILIB_API GEN    cgetg_copy(GEN x, int64_t *plx);
PARILIB_API GEN    cgeti(int64_t x);
PARILIB_API GEN    cgetineg(int64_t x);
PARILIB_API GEN    cgetipos(int64_t x);
PARILIB_API GEN    cgetr(int64_t x);
PARILIB_API GEN    cgetr_block(int64_t prec);
PARILIB_API int    cmpir(GEN x, GEN y);
PARILIB_API int    cmpis(GEN x, int64_t y);
PARILIB_API int    cmpiu(GEN x, ulong y);
PARILIB_API int    cmpri(GEN x, GEN y);
PARILIB_API int    cmprs(GEN x, int64_t y);
PARILIB_API int    cmpsi(int64_t x, GEN y);
PARILIB_API int    cmpsr(int64_t x, GEN y);
PARILIB_API int    cmpss(int64_t a, int64_t b);
PARILIB_API int    cmpui(ulong x, GEN y);
PARILIB_API int    cmpuu(ulong a, ulong b);
INLINE GEN    cxtofp(GEN x, int64_t prec);
PARILIB_API GEN    divii(GEN a, GEN b);
PARILIB_API void   diviiz(GEN x, GEN y, GEN z);
PARILIB_API void   divirz(GEN x, GEN y, GEN z);
PARILIB_API void   divisz(GEN x, int64_t s, GEN z);
PARILIB_API void   divriz(GEN x, GEN y, GEN z);
PARILIB_API void   divrrz(GEN x, GEN y, GEN z);
PARILIB_API void   divrsz(GEN y, int64_t s, GEN z);
PARILIB_API GEN    divsi_rem(int64_t x, GEN y, int64_t *rem);
PARILIB_API void   divsiz(int64_t x, GEN y, GEN z);
PARILIB_API void   divsrz(int64_t s, GEN y, GEN z);
PARILIB_API GEN    divss(int64_t x, int64_t y);
PARILIB_API GEN    divss_rem(int64_t x, int64_t y, int64_t *rem);
PARILIB_API void   divssz(int64_t x, int64_t y, GEN z);
PARILIB_API int    dvdii(GEN x, GEN y);
PARILIB_API int    dvdiiz(GEN x, GEN y, GEN z);
PARILIB_API int    dvdis(GEN x, int64_t y);
PARILIB_API int    dvdisz(GEN x, int64_t y, GEN z);
PARILIB_API int    dvdiu(GEN x, ulong y);
PARILIB_API int    dvdiuz(GEN x, ulong y, GEN z);
PARILIB_API int    dvdsi(int64_t x, GEN y);
PARILIB_API int    dvdui(ulong x, GEN y);
PARILIB_API void   dvmdiiz(GEN x, GEN y, GEN z, GEN t);
PARILIB_API GEN    dvmdis(GEN x, int64_t y, GEN *z);
PARILIB_API void   dvmdisz(GEN x, int64_t y, GEN z, GEN t);
PARILIB_API int64_t   dvmdsBIL(int64_t n, int64_t *r);
PARILIB_API GEN    dvmdsi(int64_t x, GEN y, GEN *z);
PARILIB_API void   dvmdsiz(int64_t x, GEN y, GEN z, GEN t);
PARILIB_API GEN    dvmdss(int64_t x, int64_t y, GEN *z);
PARILIB_API void   dvmdssz(int64_t x, int64_t y, GEN z, GEN t);
PARILIB_API ulong  dvmduBIL(ulong n, ulong *r);
PARILIB_API ulong remll_pre(ulong a_hi, ulong a_lo, ulong n, ulong ninv);
PARILIB_API int    equalis(GEN x, int64_t y);
PARILIB_API int    equalsi(int64_t x, GEN y);
PARILIB_API int    equalui(ulong x, GEN y);
PARILIB_API int    equaliu(GEN x, ulong y);
PARILIB_API int    absequalui(ulong x, GEN y);
PARILIB_API ulong  ceildivuu(ulong a, ulong b);
PARILIB_API int64_t   evalexpo(int64_t x);
PARILIB_API int64_t   evallg(int64_t x);
PARILIB_API int64_t   evalprecp(int64_t x);
PARILIB_API int64_t   evalvalp(int64_t x);
PARILIB_API int64_t   expi(GEN x);
PARILIB_API int64_t   expu(ulong x);
PARILIB_API void   fixlg(GEN z, int64_t ly);
PARILIB_API GEN    fractor(GEN x, int64_t prec);
PARILIB_API int    gc_bool(pari_sp av, int s);
PARILIB_API GEN    gc_const(pari_sp av, GEN x);
PARILIB_API double gc_double(pari_sp av, double d);
PARILIB_API int    gc_int(pari_sp av, int s);
PARILIB_API int64_t   gc_long(pari_sp av, int64_t s);
PARILIB_API ulong  gc_ulong(pari_sp av, ulong s);
PARILIB_API GEN    gc_NULL(pari_sp av);
PARILIB_API GEN    icopy(GEN x);
PARILIB_API GEN    icopyspec(GEN x, int64_t nx);
INLINE GEN    icopy_avma(GEN x, pari_sp av);
PARILIB_API ulong  int_bit(GEN x, int64_t n);
PARILIB_API GEN    itor(GEN x, int64_t prec);
PARILIB_API int64_t   itos(GEN x);
PARILIB_API int64_t   itos_or_0(GEN x);
PARILIB_API ulong  itou(GEN x);
PARILIB_API ulong  itou_or_0(GEN x);
PARILIB_API GEN    leafcopy(GEN x);
INLINE GEN    leafcopy_avma(GEN x, pari_sp av);
PARILIB_API double maxdd(double x, double y);
PARILIB_API int64_t   maxss(int64_t x, int64_t y);
PARILIB_API int64_t   maxuu(ulong x, ulong y);
PARILIB_API double mindd(double x, double y);
PARILIB_API int64_t   minss(int64_t x, int64_t y);
PARILIB_API int64_t   minuu(ulong x, ulong y);
PARILIB_API int64_t   mod16(GEN x);
PARILIB_API int64_t   mod2(GEN x);
PARILIB_API ulong  mod2BIL(GEN x);
PARILIB_API int64_t   mod32(GEN x);
PARILIB_API int64_t   mod4(GEN x);
PARILIB_API int64_t   mod64(GEN x);
PARILIB_API int64_t   mod8(GEN x);
PARILIB_API GEN    modis(GEN x, int64_t y);
PARILIB_API void   modisz(GEN y, int64_t s, GEN z);
PARILIB_API GEN    modsi(int64_t x, GEN y);
PARILIB_API void   modsiz(int64_t s, GEN y, GEN z);
PARILIB_API GEN    modss(int64_t x, int64_t y);
PARILIB_API void   modssz(int64_t s, int64_t y, GEN z);
PARILIB_API GEN    mpabs(GEN x);
PARILIB_API GEN    mpabs_shallow(GEN x);
PARILIB_API GEN    mpadd(GEN x, GEN y);
PARILIB_API void   mpaddz(GEN x, GEN y, GEN z);
PARILIB_API void   mpaff(GEN x, GEN y);
PARILIB_API GEN    mpceil(GEN x);
PARILIB_API int    mpcmp(GEN x, GEN y);
PARILIB_API GEN    mpcopy(GEN x);
PARILIB_API GEN    mpdiv(GEN x, GEN y);
PARILIB_API int64_t   mpexpo(GEN x);
PARILIB_API GEN    mpfloor(GEN x);
PARILIB_API GEN    mpmul(GEN x, GEN y);
PARILIB_API void   mpmulz(GEN x, GEN y, GEN z);
PARILIB_API GEN    mpneg(GEN x);
PARILIB_API int    mpodd(GEN x);
PARILIB_API GEN    mpround(GEN x);
PARILIB_API GEN    mpshift(GEN x,int64_t s);
PARILIB_API GEN    mpsqr(GEN x);
PARILIB_API GEN    mpsub(GEN x, GEN y);
PARILIB_API void   mpsubz(GEN x, GEN y, GEN z);
PARILIB_API GEN    mptrunc(GEN x);
PARILIB_API void   muliiz(GEN x, GEN y, GEN z);
PARILIB_API void   mulirz(GEN x, GEN y, GEN z);
PARILIB_API GEN    mulis(GEN x, int64_t s);
PARILIB_API GEN    muliu(GEN x, ulong s);
PARILIB_API GEN    mulri(GEN x, GEN s);
PARILIB_API void   mulriz(GEN x, GEN y, GEN z);
PARILIB_API void   mulrrz(GEN x, GEN y, GEN z);
PARILIB_API GEN    mulrs(GEN x, int64_t s);
PARILIB_API GEN    mulru(GEN x, ulong s);
PARILIB_API void   mulsiz(int64_t s, GEN y, GEN z);
PARILIB_API void   mulsrz(int64_t s, GEN y, GEN z);
PARILIB_API void   mulssz(int64_t s, int64_t y, GEN z);
PARILIB_API GEN    negi(GEN x);
PARILIB_API GEN    negr(GEN x);
PARILIB_API GEN    new_chunk(size_t x);
PARILIB_API GEN    rcopy(GEN x);
PARILIB_API GEN    rdivii(GEN x, GEN y, int64_t prec);
PARILIB_API void   rdiviiz(GEN x, GEN y, GEN z);
PARILIB_API GEN    rdivis(GEN x, int64_t y, int64_t prec);
PARILIB_API GEN    rdivsi(int64_t x, GEN y, int64_t prec);
PARILIB_API GEN    rdivss(int64_t x, int64_t y, int64_t prec);
PARILIB_API GEN    real2n(int64_t n, int64_t prec);
PARILIB_API GEN    real_m2n(int64_t n, int64_t prec);
PARILIB_API GEN    real_0(int64_t prec);
PARILIB_API GEN    real_0_bit(int64_t bitprec);
PARILIB_API GEN    real_1(int64_t prec);
PARILIB_API GEN    real_1_bit(int64_t bit);
PARILIB_API GEN    real_m1(int64_t prec);
PARILIB_API GEN    remii(GEN a, GEN b);
PARILIB_API void   remiiz(GEN x, GEN y, GEN z);
PARILIB_API GEN    remis(GEN x, int64_t y);
PARILIB_API void   remisz(GEN y, int64_t s, GEN z);
PARILIB_API ulong  remlll_pre(ulong u2, ulong u1, ulong u0, ulong p, ulong pi);
PARILIB_API GEN    remsi(int64_t x, GEN y);
PARILIB_API void   remsiz(int64_t s, GEN y, GEN z);
PARILIB_API GEN    remss(int64_t x, int64_t y);
PARILIB_API void   remssz(int64_t s, int64_t y, GEN z);
PARILIB_API GEN    rtor(GEN x, int64_t prec);
PARILIB_API int64_t   sdivsi(int64_t x, GEN y);
PARILIB_API int64_t   sdivsi_rem(int64_t x, GEN y, int64_t *rem);
PARILIB_API int64_t   sdivss_rem(int64_t x, int64_t y, int64_t *rem);
PARILIB_API void   set_avma(ulong av);
PARILIB_API ulong  uabsdiviu_rem(GEN n, ulong d, ulong *r);
PARILIB_API ulong  udivuu_rem(ulong x, ulong y, ulong *r);
PARILIB_API ulong  umodi2n(GEN x, int64_t n);
PARILIB_API void   setabssign(GEN x);
PARILIB_API void   shift_left(GEN z2, GEN z1, int64_t min, int64_t M, ulong f,  ulong sh);
PARILIB_API void   shift_right(GEN z2, GEN z1, int64_t min, int64_t M, ulong f, ulong sh);
PARILIB_API ulong  shiftl(ulong x, ulong y);
PARILIB_API ulong  shiftlr(ulong x, ulong y);
PARILIB_API GEN    shiftr(GEN x, int64_t n);
PARILIB_API void   shiftr_inplace(GEN z, int64_t d);
PARILIB_API int64_t   smodis(GEN x, int64_t y);
PARILIB_API int64_t   smodss(int64_t x, int64_t y);
PARILIB_API void   stackdummy(pari_sp av, pari_sp ltop);
PARILIB_API char  *stack_malloc(size_t N);
PARILIB_API char  *stack_malloc_align(size_t N, int64_t k);
PARILIB_API char  *stack_calloc(size_t N);
PARILIB_API char  *stack_calloc_align(size_t N, int64_t k);
PARILIB_API GEN    stoi(int64_t x);
PARILIB_API GEN    stor(int64_t x, int64_t prec);
PARILIB_API GEN    subii(GEN x, GEN y);
PARILIB_API void   subiiz(GEN x, GEN y, GEN z);
PARILIB_API GEN    subir(GEN x, GEN y);
PARILIB_API void   subirz(GEN x, GEN y, GEN z);
PARILIB_API GEN subiu(GEN x, int64_t y);
PARILIB_API GEN    subis(GEN x, int64_t y);
PARILIB_API void   subisz(GEN y, int64_t s, GEN z);
PARILIB_API GEN    subri(GEN x, GEN y);
PARILIB_API void   subriz(GEN x, GEN y, GEN z);
PARILIB_API GEN    subrr(GEN x, GEN y);
PARILIB_API void   subrrz(GEN x, GEN y, GEN z);
PARILIB_API GEN    subrs(GEN x, int64_t y);
PARILIB_API void   subrsz(GEN y, int64_t s, GEN z);
PARILIB_API GEN    subsi(int64_t x, GEN y);
PARILIB_API GEN    subui(ulong x, GEN y);
PARILIB_API void   subsiz(int64_t s, GEN y, GEN z);
PARILIB_API void   subsrz(int64_t s, GEN y, GEN z);
PARILIB_API GEN    subss(int64_t x, int64_t y);
PARILIB_API void   subssz(int64_t x, int64_t y, GEN z);
PARILIB_API GEN    subuu(ulong x, ulong y);
PARILIB_API void   togglesign(GEN x);
PARILIB_API void   togglesign_safe(GEN *px);
PARILIB_API void   affectsign(GEN x, GEN y);
PARILIB_API void   affectsign_safe(GEN x, GEN *py);
PARILIB_API GEN    truedivii(GEN a,GEN b);
PARILIB_API GEN    truedivis(GEN a, int64_t b);
PARILIB_API GEN    truedivsi(int64_t a, GEN b);
PARILIB_API ulong  uabsdivui_rem(ulong x, GEN y, ulong *rem);
PARILIB_API ulong  umodsu(int64_t x, ulong y);
PARILIB_API ulong  umodui(ulong x, GEN y);
PARILIB_API ulong  ugcdiu(GEN x, ulong y);
PARILIB_API ulong  ugcdui(ulong y, GEN x);
PARILIB_API ulong  umuluu_le(ulong x, ulong y, ulong n);
PARILIB_API ulong  umuluu_or_0(ulong x, ulong y);
PARILIB_API GEN    utoi(ulong x);
PARILIB_API GEN    utoineg(ulong x);
PARILIB_API GEN    utoipos(ulong x);
PARILIB_API GEN    utor(ulong s, int64_t prec);
PARILIB_API GEN    uutoi(ulong x, ulong y);
PARILIB_API GEN    uutoineg(ulong x, ulong y);
PARILIB_API int64_t   vali(GEN x);
PARILIB_API int    varncmp(int64_t x, int64_t y);
PARILIB_API int64_t   varnmax(int64_t x, int64_t y);
PARILIB_API int64_t   varnmin(int64_t x, int64_t y);

/* pariinl.h */
INLINE GEN    abgrp_get_cyc(GEN x);
INLINE GEN    abgrp_get_gen(GEN x);
INLINE GEN    abgrp_get_no(GEN x);
INLINE GEN    bid_get_arch(GEN bid);
INLINE GEN    bid_get_archp(GEN bid);
INLINE GEN    bid_get_cyc(GEN bid);
INLINE GEN    bid_get_fact(GEN bid);
INLINE GEN    bid_get_fact2(GEN bid);
INLINE GEN    bid_get_gen(GEN bid);
INLINE GEN    bid_get_gen_nocheck(GEN bid);
INLINE GEN    bid_get_grp(GEN bid);
INLINE GEN    bid_get_ideal(GEN bid);
INLINE GEN    bid_get_mod(GEN bid);
INLINE GEN    bid_get_no(GEN bid);
INLINE GEN    bid_get_sarch(GEN bid);
INLINE GEN    bid_get_sprk(GEN bid);
INLINE GEN    bid_get_U(GEN bid);
INLINE GEN    bnf_get_clgp(GEN bnf);
INLINE GEN    bnf_get_cyc(GEN bnf);
INLINE GEN    bnf_get_fu(GEN bnf);
INLINE GEN    bnf_get_fu_nocheck(GEN bnf);
INLINE GEN    bnf_get_gen(GEN bnf);
INLINE GEN    bnf_get_logfu(GEN bnf);
INLINE GEN    bnf_get_nf(GEN bnf);
INLINE GEN    bnf_get_no(GEN bnf);
INLINE GEN    bnf_get_reg(GEN bnf);
INLINE GEN    bnf_get_sunits(GEN bnf);
INLINE GEN    bnf_get_tuU(GEN bnf);
INLINE int64_t   bnf_get_tuN(GEN bnf);
INLINE GEN    bnr_get_bnf(GEN bnr);
INLINE GEN    bnr_get_clgp(GEN bnr);
INLINE GEN    bnr_get_cyc(GEN bnr);
INLINE GEN    bnr_get_gen(GEN bnr);
INLINE GEN    bnr_get_gen_nocheck(GEN bnr);
INLINE GEN    bnr_get_no(GEN bnr);
INLINE GEN    bnr_get_bid(GEN bnr);
INLINE GEN    bnr_get_mod(GEN bnr);
INLINE GEN    bnr_get_nf(GEN bnr);
INLINE int    checkell_i(GEN e);
INLINE GEN    cyc_get_expo(GEN c);
INLINE GEN    ell_get_a1(GEN e);
INLINE GEN    ell_get_a2(GEN e);
INLINE GEN    ell_get_a3(GEN e);
INLINE GEN    ell_get_a4(GEN e);
INLINE GEN    ell_get_a6(GEN e);
INLINE GEN    ell_get_b2(GEN e);
INLINE GEN    ell_get_b4(GEN e);
INLINE GEN    ell_get_b6(GEN e);
INLINE GEN    ell_get_b8(GEN e);
INLINE GEN    ell_get_c4(GEN e);
INLINE GEN    ell_get_c6(GEN e);
INLINE GEN    ell_get_disc(GEN e);
INLINE GEN    ell_get_j(GEN e);
INLINE int64_t   ell_get_type(GEN e);
INLINE int    ell_is_inf(GEN z);
INLINE GEN    ellinf(void);
INLINE GEN    ellff_get_field(GEN x);
INLINE GEN    ellff_get_a4a6(GEN x);
INLINE GEN    ellnf_get_bnf(GEN x);
INLINE GEN    ellnf_get_nf(GEN x);
INLINE GEN    ellQp_get_p(GEN E);
INLINE int64_t   ellQp_get_prec(GEN E);
INLINE GEN    ellQp_get_zero(GEN x);
INLINE int64_t   ellR_get_prec(GEN x);
INLINE int64_t   ellR_get_sign(GEN x);
INLINE GEN    gal_get_pol(GEN gal);
INLINE GEN    gal_get_p(GEN gal);
INLINE GEN    gal_get_e(GEN gal);
INLINE GEN    gal_get_mod(GEN gal);
INLINE GEN    gal_get_roots(GEN gal);
INLINE GEN    gal_get_invvdm(GEN gal);
INLINE GEN    gal_get_den(GEN gal);
INLINE GEN    gal_get_group(GEN gal);
INLINE GEN    gal_get_gen(GEN gal);
INLINE GEN    gal_get_orders(GEN gal);
INLINE ulong  hash_str(const char *str);
INLINE ulong  hash_str_len(const char *s, int64_t len);
INLINE GEN    idealchineseinit(GEN nf, GEN x);
INLINE GEN    idealpseudomin(GEN I, GEN G);
INLINE GEN    idealpseudomin_nonscalar(GEN I, GEN G);
INLINE GEN    idealpseudominvec(GEN I, GEN G);
INLINE GEN    idealpseudored(GEN I, GEN G);
INLINE GEN    idealred_elt(GEN nf, GEN I);
INLINE GEN    idealred(GEN nf, GEN I);
INLINE int64_t   logint(GEN B, GEN y);
INLINE ulong  ulogint(ulong B, ulong y);
INLINE GEN    modpr_get_pr(GEN x);
INLINE GEN    modpr_get_p(GEN x);
INLINE GEN    modpr_get_T(GEN x);
INLINE GEN    nf_get_M(GEN nf);
INLINE GEN    nf_get_G(GEN nf);
INLINE GEN    nf_get_Tr(GEN nf);
INLINE GEN    nf_get_diff(GEN nf);
INLINE int64_t   nf_get_degree(GEN nf);
INLINE GEN    nf_get_disc(GEN nf);
INLINE GEN    nf_get_index(GEN nf);
INLINE GEN    nf_get_invzk(GEN nf);
INLINE GEN    nf_get_pol(GEN nf);
INLINE int64_t   nf_get_r1(GEN nf);
INLINE int64_t   nf_get_r2(GEN nf);
INLINE GEN    nf_get_ramified_primes(GEN nf);
INLINE GEN    nf_get_roots(GEN nf);
INLINE GEN    nf_get_roundG(GEN nf);
INLINE void   nf_get_sign(GEN nf, int64_t *r1, int64_t *r2);
INLINE int64_t   nf_get_varn(GEN nf);
INLINE GEN    nf_get_zk(GEN nf);
INLINE GEN    nf_get_zkden(GEN nf);
INLINE GEN    nf_get_zkprimpart(GEN nf);
INLINE int64_t   pr_get_e(GEN pr);
INLINE int64_t   pr_get_f(GEN pr);
INLINE GEN    pr_get_gen(GEN pr);
INLINE GEN    pr_get_p(GEN pr);
INLINE GEN    pr_get_tau(GEN pr);
INLINE int    pr_is_inert(GEN P);
INLINE GEN    pr_norm(GEN pr);
INLINE GEN    rnf_get_alpha(GEN rnf);
INLINE int64_t   rnf_get_absdegree(GEN rnf);
INLINE int64_t   rnf_get_degree(GEN rnf);
INLINE GEN    rnf_get_disc(GEN rnf);
INLINE GEN    rnf_get_idealdisc(GEN rnf);
INLINE GEN    rnf_get_index(GEN rnf);
INLINE GEN    rnf_get_invzk(GEN rnf);
INLINE GEN    rnf_get_k(GEN rnf);
INLINE GEN    rnf_get_map(GEN rnf);
INLINE GEN    rnf_get_nf(GEN rnf);
INLINE int64_t   rnf_get_nfdegree(GEN rnf);
INLINE GEN    rnf_get_nfpol(GEN rnf);
INLINE int64_t   rnf_get_nfvarn(GEN rnf);
INLINE GEN    rnf_get_pol(GEN rnf);
INLINE GEN    rnf_get_polabs(GEN rnf);
INLINE GEN    rnf_get_ramified_primes(GEN rnf);
INLINE GEN    rnf_get_zk(GEN nf);
INLINE GEN    rnf_get_nfzk(GEN rnf);
INLINE int64_t   rnf_get_varn(GEN rnf);
INLINE ulong  upr_norm(GEN pr);
INLINE GEN    znstar_get_N(GEN G);
INLINE GEN    znstar_get_conreycyc(GEN G);
INLINE GEN    znstar_get_conreygen(GEN G);
INLINE GEN    znstar_get_cyc(GEN G);
INLINE GEN    znstar_get_faN(GEN G);
INLINE GEN    znstar_get_gen(GEN G);
INLINE GEN    znstar_get_no(GEN G);
INLINE GEN    znstar_get_pe(GEN G);
INLINE GEN    znstar_get_U(GEN G);
INLINE GEN    znstar_get_Ui(GEN G);

INLINE int64_t   closure_arity(GEN C);
INLINE const char * closure_codestr(GEN C);
INLINE GEN    closure_get_code(GEN C);
INLINE GEN    closure_get_oper(GEN C);
INLINE GEN    closure_get_data(GEN C);
INLINE GEN    closure_get_dbg(GEN C);
INLINE GEN    closure_get_text(GEN C);
INLINE GEN    closure_get_frame(GEN C);
INLINE int64_t   closure_is_variadic(GEN C);

INLINE GEN    addmuliu(GEN x, GEN y, ulong u);
INLINE GEN    addmuliu_inplace(GEN x, GEN y, ulong u);
INLINE GEN    lincombii(GEN u, GEN v, GEN x, GEN y);
INLINE GEN    mulsubii(GEN y, GEN z, GEN x);
INLINE GEN    submulii(GEN x, GEN y, GEN z);
INLINE GEN    submuliu(GEN x, GEN y, ulong u);
INLINE GEN    submuliu_inplace(GEN x, GEN y, ulong u);

INLINE GEN    FpXQ_add(GEN x,GEN y,GEN T,GEN p);
INLINE GEN    FpXQ_sub(GEN x,GEN y,GEN T,GEN p);
INLINE GEN    Flxq_add(GEN x,GEN y,GEN T,ulong p);
INLINE GEN    Flxq_sub(GEN x,GEN y,GEN T,ulong p);

INLINE GEN    FpXQX_div(GEN x, GEN y, GEN T, GEN p);
INLINE GEN    FlxqX_div(GEN x, GEN y, GEN T, ulong p);
INLINE GEN    F2xqX_div(GEN x, GEN y, GEN T);

INLINE GEN    Rg_to_Fq(GEN x, GEN T, GEN p);
INLINE GEN    Fq_red(GEN x, GEN T, GEN p);
INLINE GEN    Fq_to_FpXQ(GEN x, GEN T, GEN p);
INLINE GEN    gener_Fq_local(GEN T, GEN p, GEN L);
INLINE GEN    FpXY_Fq_evaly(GEN Q, GEN y, GEN T, GEN p, int64_t vx);
INLINE GEN    FqX_Fp_mul(GEN P, GEN U, GEN T, GEN p);
INLINE GEN    FqX_Fq_mul(GEN P, GEN U, GEN T, GEN p);
INLINE GEN    FqX_add(GEN x,GEN y,GEN T,GEN p);
INLINE GEN    FqX_ddf(GEN f, GEN T, GEN p);
INLINE GEN    FqX_degfact(GEN f, GEN T, GEN p);
INLINE GEN    FqX_deriv(GEN f, GEN T, GEN p);
INLINE GEN    FqX_div(GEN x, GEN y, GEN T, GEN p);
INLINE GEN    FqX_div_by_X_x(GEN x, GEN y, GEN T, GEN p, GEN *z);
INLINE GEN    FqX_divrem(GEN x, GEN y, GEN T, GEN p, GEN *z);
INLINE GEN    FqX_extgcd(GEN P,GEN Q,GEN T,GEN p, GEN *U, GEN *V);
INLINE GEN    FqX_factor(GEN f, GEN T, GEN p);
INLINE GEN    FqX_factor_squarefree(GEN f, GEN T, GEN p);
INLINE GEN    FqX_gcd(GEN P, GEN Q, GEN T, GEN p);
INLINE GEN    FqX_get_red(GEN S, GEN T, GEN p);
INLINE GEN    FqX_halfgcd(GEN P,GEN Q,GEN T,GEN p);
INLINE GEN    FqX_halve(GEN x, GEN T, GEN p);
INLINE GEN    FqX_integ(GEN f, GEN T, GEN p);
INLINE GEN    FqX_mul(GEN x, GEN y, GEN T, GEN p);
INLINE GEN    FqX_mulu(GEN x, ulong y, GEN T, GEN p);
INLINE GEN    FqX_neg(GEN x, GEN T, GEN p);
INLINE GEN    FqX_normalize(GEN z, GEN T, GEN p);
INLINE GEN    FqX_powu(GEN x, ulong n, GEN T, GEN p);
INLINE GEN    FqX_red(GEN z, GEN T, GEN p);
INLINE GEN    FqX_rem(GEN x, GEN y, GEN T, GEN p);
INLINE GEN    FqX_roots(GEN f, GEN T, GEN p);
INLINE GEN    FqX_sqr(GEN x, GEN T, GEN p);
INLINE GEN    FqX_sub(GEN x,GEN y,GEN T,GEN p);
INLINE GEN    FqX_to_mod(GEN f, GEN T, GEN p);

INLINE GEN    FqXQ_add(GEN x, GEN y, GEN S, GEN T, GEN p);
INLINE GEN    FqXQ_div(GEN x, GEN y, GEN S, GEN T, GEN p);
INLINE GEN    FqXQ_inv(GEN x, GEN S, GEN T, GEN p);
INLINE GEN    FqXQ_invsafe(GEN x, GEN S, GEN T, GEN p);
INLINE GEN    FqXQ_mul(GEN x, GEN y, GEN S, GEN T, GEN p);
INLINE GEN    FqXQ_pow(GEN x, GEN n, GEN S, GEN T, GEN p);
INLINE GEN    FqXQ_sqr(GEN x, GEN S, GEN T, GEN p);
INLINE GEN    FqXQ_sub(GEN x, GEN y, GEN S, GEN T, GEN p);

INLINE GEN    FqXn_exp(GEN x, int64_t n, GEN T, GEN p);
INLINE GEN    FqXn_expint(GEN x, int64_t n, GEN T, GEN p);
INLINE GEN    FqXn_inv(GEN x, int64_t n, GEN T, GEN p);
INLINE GEN    FqXn_mul(GEN x, GEN y, int64_t n, GEN T, GEN p);
INLINE GEN    FqXn_sqr(GEN x, int64_t n, GEN T, GEN p);

INLINE int64_t   get_F2x_degree(GEN T);
INLINE GEN    get_F2x_mod(GEN T);
INLINE int64_t   get_F2x_var(GEN T);
INLINE int64_t   get_F2xqX_degree(GEN T);
INLINE GEN    get_F2xqX_mod(GEN T);
INLINE int64_t   get_F2xqX_var(GEN T);
INLINE int64_t   get_Flx_degree(GEN T);
INLINE GEN    get_Flx_mod(GEN T);
INLINE int64_t   get_Flx_var(GEN T);
INLINE int64_t   get_FlxqX_degree(GEN T);
INLINE GEN    get_FlxqX_mod(GEN T);
INLINE int64_t   get_FlxqX_var(GEN T);
INLINE int64_t   get_FpX_degree(GEN T);
INLINE GEN    get_FpX_mod(GEN T);
INLINE int64_t   get_FpX_var(GEN T);
INLINE int64_t   get_FpXQX_degree(GEN T);
INLINE GEN    get_FpXQX_mod(GEN T);
INLINE int64_t   get_FpXQX_var(GEN T);

INLINE ulong  F2m_coeff(GEN x, int64_t a, int64_t b);
INLINE void   F2m_clear(GEN x, int64_t a, int64_t b);
INLINE void   F2m_flip(GEN x, int64_t a, int64_t b);
INLINE void   F2m_set(GEN x, int64_t a, int64_t b);
INLINE void   F2v_clear(GEN x,int64_t v);
INLINE ulong  F2v_coeff(GEN x,int64_t v);
INLINE void   F2v_flip(GEN x,int64_t v);
INLINE GEN    F2v_to_F2x(GEN x, int64_t sv);
INLINE void   F2v_set(GEN x,int64_t v);
INLINE void   F2x_clear(GEN x,int64_t v);
INLINE ulong  F2x_coeff(GEN x,int64_t v);
INLINE void   F2x_flip(GEN x,int64_t v);
INLINE void   F2x_set(GEN x,int64_t v);
INLINE int    F2x_equal1(GEN x);
INLINE int    F2x_equal(GEN V, GEN W);
INLINE GEN    F2x_div(GEN x, GEN y);
INLINE GEN    F2x_renormalize(GEN x, int64_t lx);
INLINE GEN    F2m_copy(GEN x);
INLINE GEN    F2v_copy(GEN x);
INLINE GEN    F2x_copy(GEN x);
INLINE GEN    F2v_ei(int64_t n, int64_t i);
INLINE GEN    Flm_copy(GEN x);
INLINE GEN    Flv_copy(GEN x);
INLINE int    Flx_equal1(GEN x);
INLINE ulong  Flx_constant(GEN x);
INLINE GEN    Flx_copy(GEN x);
INLINE GEN    Flx_div(GEN x, GEN y, ulong p);
INLINE ulong  Flx_lead(GEN x);
INLINE GEN    Flx_mulu(GEN x, ulong a, ulong p);
INLINE GEN    Fp_divu(GEN x, ulong a, GEN p);
INLINE GEN    FpV_FpC_mul(GEN x, GEN y, GEN p);
INLINE GEN    FpXQX_renormalize(GEN x, int64_t lx);
INLINE GEN    FpXX_renormalize(GEN x, int64_t lx);
INLINE GEN    FpX_div(GEN x, GEN y, GEN p);
INLINE GEN    FpX_renormalize(GEN x, int64_t lx);
INLINE GEN    Fp_add(GEN a, GEN b, GEN m);
INLINE GEN    Fp_addmul(GEN x, GEN y, GEN z, GEN p);
INLINE GEN    Fp_center(GEN u, GEN p, GEN ps2);
INLINE GEN    Fp_center_i(GEN u, GEN p, GEN ps2);
INLINE GEN    Fp_div(GEN a, GEN b, GEN m);
INLINE GEN    Fp_halve(GEN y, GEN p);
INLINE GEN    Fp_inv(GEN a, GEN m);
INLINE GEN    Fp_invsafe(GEN a, GEN m);
INLINE GEN    Fp_mul(GEN a, GEN b, GEN m);
INLINE GEN    Fp_muls(GEN a, int64_t b, GEN m);
INLINE GEN    Fp_mulu(GEN a, ulong b, GEN m);
INLINE GEN    Fp_neg(GEN b, GEN m);
INLINE GEN    Fp_red(GEN x, GEN p);
INLINE GEN    Fp_sqr(GEN a, GEN m);
INLINE GEN    Fp_sub(GEN a, GEN b, GEN m);
INLINE GEN    GENbinbase(GENbin *p);
INLINE GEN    Q_abs(GEN x);
INLINE GEN    Q_abs_shallow(GEN x);
INLINE int    QV_isscalar(GEN x);
INLINE void   Qtoss(GEN q, int64_t *n, int64_t *d);
INLINE GEN    R_abs(GEN x);
INLINE GEN    R_abs_shallow(GEN x);
INLINE GEN    RgC_fpnorml2(GEN x, int64_t prec);
INLINE GEN    RgC_gtofp(GEN x, int64_t prec);
INLINE GEN    RgC_gtomp(GEN x, int64_t prec);
INLINE void   RgM_dimensions(GEN x, int64_t *m, int64_t *n);
INLINE GEN    RgM_fpnorml2(GEN x, int64_t prec);
INLINE GEN    RgM_gtofp(GEN x, int64_t prec);
INLINE GEN    RgM_gtomp(GEN x, int64_t prec);
INLINE GEN    RgM_minor(GEN a, int64_t i, int64_t j);
INLINE GEN    RgM_shallowcopy(GEN x);
INLINE GEN    RgV_gtofp(GEN x, int64_t prec);
INLINE int    RgV_isscalar(GEN x);
INLINE int64_t   RgV_isin(GEN v, GEN x);
INLINE int64_t   RgV_isin_i(GEN v, GEN x, int64_t n);
INLINE int    RgV_is_ZV(GEN x);
INLINE int    RgV_is_QV(GEN x);
INLINE int64_t   RgX_equal_var(GEN x, GEN y);
INLINE int    RgX_is_monomial(GEN x);
INLINE int    RgX_is_rational(GEN x);
INLINE int    RgX_is_QX(GEN x);
INLINE int    RgX_is_ZX(GEN x);
INLINE int    RgX_isscalar(GEN x);
INLINE GEN    RgX_shift_inplace(GEN x, int64_t v);
INLINE void   RgX_shift_inplace_init(int64_t v);
INLINE GEN    RgXQX_div(GEN x, GEN y, GEN T);
INLINE GEN    RgXQX_rem(GEN x, GEN y, GEN T);
INLINE GEN    RgX_coeff(GEN x, int64_t n);
INLINE GEN    RgX_copy(GEN x);
INLINE GEN    RgX_div(GEN x, GEN y);
INLINE GEN    RgX_fpnorml2(GEN x, int64_t prec);
INLINE GEN    RgX_gtofp(GEN x, int64_t prec);
INLINE GEN    RgX_renormalize(GEN x);
INLINE GEN    Rg_col_ei(GEN x, int64_t n, int64_t i);
INLINE GEN    ZC_hnfrem(GEN x, GEN y);
INLINE GEN    ZM_hnfrem(GEN x, GEN y);
INLINE GEN    ZM_lll(GEN x, double D, int64_t f);
INLINE int    ZV_dvd(GEN x, GEN y);
INLINE int    ZV_isscalar(GEN x);
INLINE GEN    ZV_to_zv(GEN x);
INLINE int    ZX_equal1(GEN x);
INLINE int    ZX_is_monic(GEN x);
INLINE GEN    ZX_renormalize(GEN x, int64_t lx);
INLINE GEN    ZXQ_mul(GEN x,GEN y,GEN T);
INLINE GEN    ZXQ_sqr(GEN x,GEN T);
INLINE int64_t   Z_ispower(GEN x, ulong k);
INLINE int64_t   Z_issquare(GEN x);
INLINE GEN    absfrac(GEN x);
INLINE GEN    absfrac_shallow(GEN x);
INLINE GEN    affc_fixlg(GEN x, GEN res);
INLINE GEN    bin_copy(GENbin *p);
INLINE int64_t   bit_accuracy(int64_t x);
INLINE double bit_accuracy_mul(int64_t x, double y);
INLINE int64_t   bit_prec(GEN x);
INLINE int    both_odd(int64_t x, int64_t y);
INLINE GEN    cbrtr(GEN x);
INLINE GEN    cbrtr_abs(GEN x);
INLINE GEN    cgetc(int64_t x);
INLINE GEN    cgetalloc(int64_t t, size_t l);
INLINE void   cgiv(GEN x);
INLINE GEN    col_ei(int64_t n, int64_t i);
INLINE GEN    const_col(int64_t n, GEN x);
INLINE GEN    const_vec(int64_t n, GEN x);
INLINE GEN    const_vecsmall(int64_t n, int64_t c);
INLINE GEN    constant_coeff(GEN x);
INLINE GEN    cxcompotor(GEN z, int64_t prec);
INLINE GEN    cxnorm(GEN x);
INLINE GEN    cxtoreal(GEN q);
INLINE GEN    cyclic_perm(int64_t l, int64_t d);
INLINE double dbllog2r(GEN x);
INLINE int64_t   degpol(GEN x);
INLINE int64_t   divsBIL(int64_t n);
INLINE void   gabsz(GEN x, int64_t prec, GEN z);
INLINE GEN    gaddgs(GEN y, int64_t s);
INLINE void   gaddz(GEN x, GEN y, GEN z);
INLINE int    gcmpgs(GEN y, int64_t s);
INLINE void   gdiventz(GEN x, GEN y, GEN z);
INLINE GEN    gdivsg(int64_t s, GEN y);
INLINE void   gdivz(GEN x, GEN y, GEN z);
INLINE GEN    gen_I(void);
INLINE void   gerepileall(pari_sp av, int n, ...);
INLINE void   gerepilecoeffs(pari_sp av, GEN x, int n);
INLINE GEN    gerepilecopy(pari_sp av, GEN x);
INLINE void   gerepilemany(pari_sp av, GEN* g[], int n);
INLINE int    gequalgs(GEN y, int64_t s);
INLINE GEN    gerepileupto(pari_sp av, GEN q);
INLINE GEN    gerepileuptoint(pari_sp av, GEN q);
INLINE GEN    gerepileuptoleaf(pari_sp av, GEN q);
INLINE int    gisdouble(GEN x, double *g);
INLINE GEN    gmax_shallow(GEN x, GEN y);
INLINE GEN    gmaxsg(int64_t s, GEN y);
INLINE GEN    gmin_shallow(GEN x, GEN y);
INLINE GEN    gminsg(int64_t s, GEN y);
INLINE void   gmodz(GEN x, GEN y, GEN z);
INLINE void   gmul2nz(GEN x, int64_t s, GEN z);
INLINE GEN    gmulgs(GEN y, int64_t s);
INLINE void   gmulz(GEN x, GEN y, GEN z);
INLINE void   gnegz(GEN x, GEN z);
INLINE void   gshiftz(GEN x, int64_t s, GEN z);
INLINE GEN    gsubgs(GEN y, int64_t s);
INLINE void   gsubz(GEN x, GEN y, GEN z);
INLINE double gtodouble(GEN x);
INLINE GEN    gtofp(GEN z, int64_t prec);
INLINE GEN    gtomp(GEN z, int64_t prec);
INLINE int64_t   gtos(GEN x);
INLINE ulong  gtou(GEN x);
INLINE void   guncloneNULL(GEN x);
INLINE void   guncloneNULL_deep(GEN x);
INLINE int64_t   gval(GEN x, int64_t v);
INLINE GEN    identity_perm(int64_t l);
INLINE GEN    identity_zv(int64_t n);
INLINE GEN    identity_ZV(int64_t n);
INLINE int    equali1(GEN n);
INLINE int    equalim1(GEN n);
INLINE int64_t   inf_get_sign(GEN x);
INLINE GEN    inv_content(GEN c);
INLINE int    is_bigint(GEN n);
INLINE int    is_const_t(int64_t t);
INLINE int    is_extscalar_t(int64_t t);
INLINE int    is_intreal_t(int64_t t);
INLINE int    is_matvec_t(int64_t t);
INLINE int    is_noncalc_t(int64_t tx);
INLINE int    is_pm1(GEN n);
INLINE int    is_qfb_t(int64_t t);
INLINE int    is_rational_t(int64_t t);
INLINE int    is_real_t(int64_t t);
INLINE int    is_recursive_t(int64_t t);
INLINE int    is_scalar_t(int64_t t);
INLINE int    is_universal_constant(GEN x);
INLINE int    is_vec_t(int64_t t);
INLINE int    isint1(GEN x);
INLINE int    isintm1(GEN x);
INLINE int    isintzero(GEN x);
INLINE int    ismpzero(GEN x);
INLINE int    isonstack(GEN x);
INLINE void   killblock(GEN x);
INLINE GEN    leading_coeff(GEN x);
INLINE void   lg_increase(GEN x);
INLINE int64_t   lgcols(GEN x);
INLINE int64_t   lgpol(GEN x);
INLINE GEN    div_content(GEN cx, GEN cy);
INLINE GEN    matpascal(int64_t n);
INLINE GEN    matslice(GEN A, int64_t x1, int64_t x2, int64_t y1, int64_t y2);
INLINE GEN    mkcol(GEN x);
INLINE GEN    mkcol2(GEN x, GEN y);
INLINE GEN    mkcol2s(int64_t x, int64_t y);
INLINE GEN    mkcol3(GEN x, GEN y, GEN z);
INLINE GEN    mkcol3s(int64_t x, int64_t y, int64_t z);
INLINE GEN    mkcol4(GEN x, GEN y, GEN z, GEN t);
INLINE GEN    mkcol4s(int64_t x, int64_t y, int64_t z, int64_t t);
INLINE GEN    mkcol5(GEN x, GEN y, GEN z, GEN t, GEN u);
INLINE GEN    mkcol6(GEN x, GEN y, GEN z, GEN t, GEN u, GEN v);
INLINE GEN    mkcolcopy(GEN x);
INLINE GEN    mkcols(int64_t x);
INLINE GEN    mkcomplex(GEN x, GEN y);
INLINE GEN    mkerr(int64_t n);
INLINE GEN    mkmoo(void);
INLINE GEN    mkoo(void);
INLINE GEN    mkfrac(GEN x, GEN y);
INLINE GEN    mkfracss(int64_t x, int64_t y);
INLINE GEN    mkfraccopy(GEN x, GEN y);
INLINE GEN    mkintmod(GEN x, GEN y);
INLINE GEN    mkintmodu(ulong x, ulong y);
INLINE GEN    mkmat(GEN x);
INLINE GEN    mkmat2(GEN x, GEN y);
INLINE GEN    mkmat22(GEN a, GEN b, GEN c, GEN d);
INLINE GEN    mkmat22s(int64_t a, int64_t b, int64_t c, int64_t d);
INLINE GEN    mkmat3(GEN x, GEN y, GEN z);
INLINE GEN    mkmat4(GEN x, GEN y, GEN z, GEN t);
INLINE GEN    mkmat5(GEN x, GEN y, GEN z, GEN t, GEN u);
INLINE GEN    mkmatcopy(GEN x);
INLINE GEN    mkpolmod(GEN x, GEN y);
INLINE GEN    mkqfi(GEN x, GEN y, GEN z);
INLINE GEN    mkquad(GEN n, GEN x, GEN y);
INLINE GEN    mkrfrac(GEN x, GEN y);
INLINE GEN    mkrfraccopy(GEN x, GEN y);
INLINE GEN    mkvec(GEN x);
INLINE GEN    mkvec2(GEN x, GEN y);
INLINE GEN    mkvec2copy(GEN x, GEN y);
INLINE GEN    mkvec2s(int64_t x, int64_t y);
INLINE GEN    mkvec3(GEN x, GEN y, GEN z);
INLINE GEN    mkvec3s(int64_t x, int64_t y, int64_t z);
INLINE GEN    mkvec4(GEN x, GEN y, GEN z, GEN t);
INLINE GEN    mkvec4s(int64_t x, int64_t y, int64_t z, int64_t t);
INLINE GEN    mkvec5(GEN x, GEN y, GEN z, GEN t, GEN u);
INLINE GEN    mkveccopy(GEN x);
INLINE GEN    mkvecs(int64_t x);
INLINE GEN    mkvecsmall(int64_t x);
INLINE GEN    mkvecsmall2(int64_t x,int64_t y);
INLINE GEN    mkvecsmall3(int64_t x,int64_t y,int64_t z);
INLINE GEN    mkvecsmall4(int64_t x,int64_t y,int64_t z,int64_t t);
INLINE GEN    mkvecsmall5(int64_t x,int64_t y,int64_t z,int64_t t,int64_t u);
INLINE void   mpcosz(GEN x, GEN z);
INLINE void   mpexpz(GEN x, GEN z);
INLINE void   mplogz(GEN x, GEN z);
INLINE void   mpsinz(GEN x, GEN z);
INLINE GEN    mul_content(GEN cx, GEN cy);
INLINE GEN    mul_denom(GEN cx, GEN cy);
INLINE int64_t   nbits2nlong(int64_t x);
INLINE int64_t   nbits2extraprec(int64_t x);
INLINE int64_t   nbits2ndec(int64_t x);
INLINE int64_t   nbits2prec(int64_t x);
INLINE int64_t   nbits2lg(int64_t x);
INLINE int64_t   nbrows(GEN x);
INLINE int64_t   nchar2nlong(int64_t x);
INLINE int64_t   ndec2nbits(int64_t x);
INLINE int64_t   ndec2nlong(int64_t x);
INLINE int64_t   ndec2prec(int64_t x);
INLINE void   normalize_frac(GEN z);
INLINE int    odd(int64_t x);
INLINE void   pari_free(void *pointer);
INLINE void*  pari_calloc(size_t size);
INLINE void*  pari_malloc(size_t bytes);
INLINE void*  pari_realloc(void *pointer,size_t size);
INLINE void   pari_realloc_ip(void **pointer,size_t size);
INLINE GEN    perm_conj(GEN s, GEN t);
INLINE GEN    perm_inv(GEN x);
INLINE GEN    perm_mul(GEN s, GEN t);
INLINE GEN    perm_sqr(GEN s);
INLINE GEN    pol_0(int64_t v);
INLINE GEN    pol_1(int64_t v);
INLINE GEN    pol_x(int64_t v);
INLINE GEN    pol_xn(int64_t n, int64_t v);
INLINE GEN    pol_xnall(int64_t n, int64_t v);
INLINE GEN    pol0_F2x(int64_t sv);
INLINE GEN    pol0_Flx(int64_t sv);
INLINE GEN    pol1_F2x(int64_t sv);
INLINE GEN    pol1_Flx(int64_t sv);
INLINE GEN    polx_Flx(int64_t sv);
INLINE GEN    polx_F2x(int64_t sv);
INLINE GEN    polx_zx(int64_t sv);
INLINE GEN    polxn_Flx(int64_t n, int64_t sv);
INLINE GEN    powii(GEN x, GEN n);
INLINE GEN    powIs(int64_t n);
INLINE int64_t   prec2nbits(int64_t x);
INLINE double prec2nbits_mul(int64_t x, double y);
INLINE int64_t   prec2ndec(int64_t x);
INLINE int64_t   precdbl(int64_t x);
INLINE GEN    quad_disc(GEN x);
INLINE GEN    qfb_disc(GEN x);
INLINE GEN    qfb_disc3(GEN x, GEN y, GEN z);
INLINE GEN    quadnorm(GEN q);
INLINE int64_t   remsBIL(int64_t n);
INLINE GEN    row(GEN A, int64_t x1);
INLINE GEN    Flm_row(GEN A, int64_t x0);
INLINE GEN    row_i(GEN A, int64_t x0, int64_t x1, int64_t x2);
INLINE GEN    zm_row(GEN x, int64_t i);
INLINE GEN    rowcopy(GEN A, int64_t x0);
INLINE GEN    rowpermute(GEN A, GEN p);
INLINE GEN    rowslice(GEN A, int64_t x1, int64_t x2);
INLINE GEN    rowslicepermute(GEN A, GEN p, int64_t x1, int64_t x2);
INLINE GEN    rowsplice(GEN a, int64_t j);
INLINE int    ser_isexactzero(GEN x);
INLINE GEN    shallowcopy(GEN x);
INLINE GEN    sqrfrac(GEN x);
INLINE GEN    sqrti(GEN x);
INLINE GEN    sqrtnr(GEN x, int64_t n);
INLINE GEN    sqrtr(GEN x);
INLINE GEN    sstoQ(int64_t n, int64_t d);
INLINE void   pari_stack_alloc(pari_stack *s, int64_t nb);
INLINE void** pari_stack_base(pari_stack *s);
INLINE void   pari_stack_delete(pari_stack *s);
INLINE void   pari_stack_init(pari_stack *s, size_t size, void **data);
INLINE int64_t   pari_stack_new(pari_stack *s);
INLINE void   pari_stack_pushp(pari_stack *s, void *u);
INLINE int64_t   sturm(GEN x);
INLINE GEN    truecoef(GEN x, int64_t n);
INLINE GEN    trunc_safe(GEN x);
INLINE GEN    vec_ei(int64_t n, int64_t i);
INLINE GEN    vec_append(GEN v, GEN s);
INLINE GEN    vec_lengthen(GEN v, int64_t n);
INLINE GEN    vec_prepend(GEN v, GEN s);
INLINE GEN    vec_setconst(GEN v, GEN x);
INLINE GEN    vec_shorten(GEN v, int64_t n);
INLINE GEN    vec_to_vecsmall(GEN z);
INLINE GEN    vecpermute(GEN A, GEN p);
INLINE GEN    vecreverse(GEN A);
INLINE void   vecreverse_inplace(GEN y);
INLINE GEN    vecsmallpermute(GEN A, GEN p);
INLINE GEN    vecslice(GEN A, int64_t y1, int64_t y2);
INLINE GEN    vecslicepermute(GEN A, GEN p, int64_t y1, int64_t y2);
INLINE GEN    vecsplice(GEN a, int64_t j);
INLINE GEN    vecsmall_append(GEN V, int64_t s);
INLINE int64_t   vecsmall_coincidence(GEN u, GEN v);
INLINE GEN    vecsmall_concat(GEN u, GEN v);
INLINE GEN    vecsmall_copy(GEN x);
INLINE GEN    vecsmall_ei(int64_t n, int64_t i);
INLINE int64_t   vecsmall_indexmax(GEN x);
INLINE int64_t   vecsmall_indexmin(GEN x);
INLINE int64_t   vecsmall_isin(GEN v, int64_t x);
INLINE GEN    vecsmall_lengthen(GEN v, int64_t n);
INLINE int    vecsmall_lexcmp(GEN x, GEN y);
INLINE int64_t   vecsmall_max(GEN v);
INLINE int64_t   vecsmall_min(GEN v);
INLINE int64_t   vecsmall_pack(GEN V, int64_t base, int64_t mod);
INLINE int    vecsmall_prefixcmp(GEN x, GEN y);
INLINE GEN    vecsmall_prepend(GEN V, int64_t s);
INLINE GEN    vecsmall_reverse(GEN A);
INLINE GEN    vecsmall_shorten(GEN v, int64_t n);
INLINE GEN    vecsmall_to_col(GEN z);
INLINE GEN    vecsmall_to_vec(GEN z);
INLINE GEN    vecsmall_to_vec_inplace(GEN z);
INLINE void   vecsmalltrunc_append(GEN x, int64_t t);
INLINE GEN    vecsmalltrunc_init(int64_t l);
INLINE void   vectrunc_append(GEN x, GEN t);
INLINE void   vectrunc_append_batch(GEN x, GEN y);
INLINE GEN    vectrunc_init(int64_t l);
INLINE GEN    coltrunc_init(int64_t l);
INLINE GEN    zc_to_ZC(GEN x);
INLINE GEN    zero_F2m(int64_t n, int64_t m);
INLINE GEN    zero_F2m_copy(int64_t n, int64_t m);
INLINE GEN    zero_F2v(int64_t m);
INLINE GEN    zero_F2x(int64_t sv);
INLINE GEN    zero_Flm(int64_t m, int64_t n);
INLINE GEN    zero_Flm_copy(int64_t m, int64_t n);
INLINE GEN    zero_Flv(int64_t n);
INLINE GEN    zero_Flx(int64_t sv);
INLINE GEN    zero_zm(int64_t x, int64_t y);
INLINE GEN    zero_zv(int64_t x);
INLINE GEN    zero_zx(int64_t sv);
INLINE GEN    zerocol(int64_t n);
INLINE GEN    zeromat(int64_t m, int64_t n);
INLINE GEN    zeromatcopy(int64_t m, int64_t n);
INLINE GEN    zeropadic(GEN p, int64_t e);
INLINE GEN    zeropadic_shallow(GEN p, int64_t e);
INLINE GEN    zeropol(int64_t v);
INLINE GEN    zeroser(int64_t v, int64_t e);
INLINE GEN    zerovec(int64_t n);
INLINE GEN    zerovec_block(int64_t len);
INLINE GEN    zm_copy(GEN x);
INLINE GEN    zm_to_zxV(GEN x, int64_t sv);
INLINE GEN    zm_transpose(GEN x);
INLINE GEN    zv_copy(GEN x);
INLINE GEN    zv_to_ZV(GEN x);
INLINE GEN    zv_to_zx(GEN x, int64_t sv);
INLINE GEN    zx_renormalize(GEN x, int64_t l);
INLINE GEN    zx_shift(GEN x, int64_t n);
INLINE GEN    zx_to_zv(GEN x, int64_t N);

INLINE GEN     err_get_compo(GEN e, int64_t i);
INLINE int64_t    err_get_num(GEN e);
INLINE void    pari_err_BUG(const char *f);
INLINE void    pari_err_COMPONENT(const char *f, const char *op, GEN l, GEN x);
INLINE void    pari_err_CONSTPOL(const char *f);
INLINE void    pari_err_COPRIME(const char *f, GEN x, GEN y);
INLINE void    pari_err_DIM(const char *f);
INLINE void    pari_err_DOMAIN(const char *f, const char *v, const char *op, GEN l, GEN x);
INLINE void    pari_err_FILE(const char *f, const char *g);
INLINE void    pari_err_FILEDESC(const char *f, int64_t n);
INLINE void    pari_err_FLAG(const char *f);
INLINE void    pari_err_IMPL(const char *f);
INLINE void    pari_err_INV(const char *f, GEN x);
INLINE void    pari_err_IRREDPOL(const char *f, GEN x);
INLINE void    pari_err_MAXPRIME(ulong c);
INLINE void    pari_err_MODULUS(const char *f, GEN x, GEN y);
INLINE void    pari_err_OP(const char *f, GEN x, GEN y);
INLINE void    pari_err_OVERFLOW(const char *f);
INLINE void    pari_err_PACKAGE(const char *f);
INLINE void    pari_err_PREC(const char *f);
INLINE void    pari_err_PRIME(const char *f, GEN x);
INLINE void    pari_err_PRIORITY(const char *f, GEN x, const char *op, int64_t v);
INLINE void    pari_err_SQRTN(const char *f, GEN x);
INLINE void    pari_err_TYPE(const char *f, GEN x);
INLINE void    pari_err_TYPE2(const char *f, GEN x, GEN y);
INLINE void    pari_err_VAR(const char *f, GEN x, GEN y);
INLINE void    pari_err_ROOTS0(const char *f);
